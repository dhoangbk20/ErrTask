
F411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043c0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08004560  08004560  00014560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045d0  080045d0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080045d0  080045d0  000145d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080045d8  080045d8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045d8  080045d8  000145d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080045dc  080045dc  000145dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080045e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000175c  20000070  08004650  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200017cc  08004650  000217cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e0d2  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000265d  00000000  00000000  0002e1b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ee8  00000000  00000000  00030818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b75  00000000  00000000  00031700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017fcd  00000000  00000000  00032275  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ff0d  00000000  00000000  0004a242  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000960fc  00000000  00000000  0005a14f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000441c  00000000  00000000  000f024c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000040  00000000  00000000  000f4668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004548 	.word	0x08004548

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08004548 	.word	0x08004548

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b088      	sub	sp, #32
 80004e0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e2:	f000 fa73 	bl	80009cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e6:	f000 f845 	bl	8000574 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ea:	f000 f8a1 	bl	8000630 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  status = xTaskCreate(task1_handler,"Task-1",200,"Hello world from Task-1",2,&task1_handle);
 80004ee:	f107 0308 	add.w	r3, r7, #8
 80004f2:	9301      	str	r3, [sp, #4]
 80004f4:	2302      	movs	r3, #2
 80004f6:	9300      	str	r3, [sp, #0]
 80004f8:	4b18      	ldr	r3, [pc, #96]	; (800055c <main+0x80>)
 80004fa:	22c8      	movs	r2, #200	; 0xc8
 80004fc:	4918      	ldr	r1, [pc, #96]	; (8000560 <main+0x84>)
 80004fe:	4819      	ldr	r0, [pc, #100]	; (8000564 <main+0x88>)
 8000500:	f001 fde6 	bl	80020d0 <xTaskCreate>
 8000504:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 8000506:	697b      	ldr	r3, [r7, #20]
 8000508:	2b01      	cmp	r3, #1
 800050a:	d00a      	beq.n	8000522 <main+0x46>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800050c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000510:	f383 8811 	msr	BASEPRI, r3
 8000514:	f3bf 8f6f 	isb	sy
 8000518:	f3bf 8f4f 	dsb	sy
 800051c:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800051e:	bf00      	nop
 8000520:	e7fe      	b.n	8000520 <main+0x44>
  status = xTaskCreate(task2_handler,"Task-2",200,"Hello world from Task-2",2,&task2_handle);
 8000522:	1d3b      	adds	r3, r7, #4
 8000524:	9301      	str	r3, [sp, #4]
 8000526:	2302      	movs	r3, #2
 8000528:	9300      	str	r3, [sp, #0]
 800052a:	4b0f      	ldr	r3, [pc, #60]	; (8000568 <main+0x8c>)
 800052c:	22c8      	movs	r2, #200	; 0xc8
 800052e:	490f      	ldr	r1, [pc, #60]	; (800056c <main+0x90>)
 8000530:	480f      	ldr	r0, [pc, #60]	; (8000570 <main+0x94>)
 8000532:	f001 fdcd 	bl	80020d0 <xTaskCreate>
 8000536:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 8000538:	697b      	ldr	r3, [r7, #20]
 800053a:	2b01      	cmp	r3, #1
 800053c:	d00a      	beq.n	8000554 <main+0x78>
        __asm volatile
 800053e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000542:	f383 8811 	msr	BASEPRI, r3
 8000546:	f3bf 8f6f 	isb	sy
 800054a:	f3bf 8f4f 	dsb	sy
 800054e:	60fb      	str	r3, [r7, #12]
    }
 8000550:	bf00      	nop
 8000552:	e7fe      	b.n	8000552 <main+0x76>
  vTaskStartScheduler();
 8000554:	f001 ff18 	bl	8002388 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000558:	e7fe      	b.n	8000558 <main+0x7c>
 800055a:	bf00      	nop
 800055c:	08004560 	.word	0x08004560
 8000560:	08004578 	.word	0x08004578
 8000564:	08000665 	.word	0x08000665
 8000568:	08004580 	.word	0x08004580
 800056c:	08004598 	.word	0x08004598
 8000570:	08000675 	.word	0x08000675

08000574 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b094      	sub	sp, #80	; 0x50
 8000578:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057a:	f107 0320 	add.w	r3, r7, #32
 800057e:	2230      	movs	r2, #48	; 0x30
 8000580:	2100      	movs	r1, #0
 8000582:	4618      	mov	r0, r3
 8000584:	f003 fd14 	bl	8003fb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000588:	f107 030c 	add.w	r3, r7, #12
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	605a      	str	r2, [r3, #4]
 8000592:	609a      	str	r2, [r3, #8]
 8000594:	60da      	str	r2, [r3, #12]
 8000596:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000598:	2300      	movs	r3, #0
 800059a:	60bb      	str	r3, [r7, #8]
 800059c:	4b22      	ldr	r3, [pc, #136]	; (8000628 <SystemClock_Config+0xb4>)
 800059e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a0:	4a21      	ldr	r2, [pc, #132]	; (8000628 <SystemClock_Config+0xb4>)
 80005a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005a6:	6413      	str	r3, [r2, #64]	; 0x40
 80005a8:	4b1f      	ldr	r3, [pc, #124]	; (8000628 <SystemClock_Config+0xb4>)
 80005aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b0:	60bb      	str	r3, [r7, #8]
 80005b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005b4:	2300      	movs	r3, #0
 80005b6:	607b      	str	r3, [r7, #4]
 80005b8:	4b1c      	ldr	r3, [pc, #112]	; (800062c <SystemClock_Config+0xb8>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a1b      	ldr	r2, [pc, #108]	; (800062c <SystemClock_Config+0xb8>)
 80005be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005c2:	6013      	str	r3, [r2, #0]
 80005c4:	4b19      	ldr	r3, [pc, #100]	; (800062c <SystemClock_Config+0xb8>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005cc:	607b      	str	r3, [r7, #4]
 80005ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005d0:	2302      	movs	r3, #2
 80005d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d4:	2301      	movs	r3, #1
 80005d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d8:	2310      	movs	r3, #16
 80005da:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005dc:	2300      	movs	r3, #0
 80005de:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e0:	f107 0320 	add.w	r3, r7, #32
 80005e4:	4618      	mov	r0, r3
 80005e6:	f000 fb15 	bl	8000c14 <HAL_RCC_OscConfig>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80005f0:	f000 f85a 	bl	80006a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f4:	230f      	movs	r3, #15
 80005f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005f8:	2300      	movs	r3, #0
 80005fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fc:	2300      	movs	r3, #0
 80005fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000600:	2300      	movs	r3, #0
 8000602:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000604:	2300      	movs	r3, #0
 8000606:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000608:	f107 030c 	add.w	r3, r7, #12
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f000 fd78 	bl	8001104 <HAL_RCC_ClockConfig>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800061a:	f000 f845 	bl	80006a8 <Error_Handler>
  }
}
 800061e:	bf00      	nop
 8000620:	3750      	adds	r7, #80	; 0x50
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	40023800 	.word	0x40023800
 800062c:	40007000 	.word	0x40007000

08000630 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000636:	2300      	movs	r3, #0
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	4b09      	ldr	r3, [pc, #36]	; (8000660 <MX_GPIO_Init+0x30>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	4a08      	ldr	r2, [pc, #32]	; (8000660 <MX_GPIO_Init+0x30>)
 8000640:	f043 0301 	orr.w	r3, r3, #1
 8000644:	6313      	str	r3, [r2, #48]	; 0x30
 8000646:	4b06      	ldr	r3, [pc, #24]	; (8000660 <MX_GPIO_Init+0x30>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	f003 0301 	and.w	r3, r3, #1
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000652:	bf00      	nop
 8000654:	370c      	adds	r7, #12
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	40023800 	.word	0x40023800

08000664 <task1_handler>:

/* USER CODE BEGIN 4 */
static void task1_handler(void *paramters)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		printf("%s\n",(char*)paramters);
 800066c:	6878      	ldr	r0, [r7, #4]
 800066e:	f003 fbbf 	bl	8003df0 <puts>
 8000672:	e7fb      	b.n	800066c <task1_handler+0x8>

08000674 <task2_handler>:
	}

}
static void task2_handler(void *paramters)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		printf("%s\n",(char*)paramters);
 800067c:	6878      	ldr	r0, [r7, #4]
 800067e:	f003 fbb7 	bl	8003df0 <puts>
 8000682:	e7fb      	b.n	800067c <task2_handler+0x8>

08000684 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a04      	ldr	r2, [pc, #16]	; (80006a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000692:	4293      	cmp	r3, r2
 8000694:	d101      	bne.n	800069a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000696:	f000 f9bb 	bl	8000a10 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800069a:	bf00      	nop
 800069c:	3708      	adds	r7, #8
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	40010000 	.word	0x40010000

080006a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006ac:	b672      	cpsid	i
}
 80006ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006b0:	e7fe      	b.n	80006b0 <Error_Handler+0x8>
	...

080006b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	4b10      	ldr	r3, [pc, #64]	; (8000700 <HAL_MspInit+0x4c>)
 80006c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006c2:	4a0f      	ldr	r2, [pc, #60]	; (8000700 <HAL_MspInit+0x4c>)
 80006c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006c8:	6453      	str	r3, [r2, #68]	; 0x44
 80006ca:	4b0d      	ldr	r3, [pc, #52]	; (8000700 <HAL_MspInit+0x4c>)
 80006cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	603b      	str	r3, [r7, #0]
 80006da:	4b09      	ldr	r3, [pc, #36]	; (8000700 <HAL_MspInit+0x4c>)
 80006dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006de:	4a08      	ldr	r2, [pc, #32]	; (8000700 <HAL_MspInit+0x4c>)
 80006e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e4:	6413      	str	r3, [r2, #64]	; 0x40
 80006e6:	4b06      	ldr	r3, [pc, #24]	; (8000700 <HAL_MspInit+0x4c>)
 80006e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ee:	603b      	str	r3, [r7, #0]
 80006f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006f2:	bf00      	nop
 80006f4:	370c      	adds	r7, #12
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	40023800 	.word	0x40023800

08000704 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b08c      	sub	sp, #48	; 0x30
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800070c:	2300      	movs	r3, #0
 800070e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000710:	2300      	movs	r3, #0
 8000712:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000714:	2300      	movs	r3, #0
 8000716:	60bb      	str	r3, [r7, #8]
 8000718:	4b2e      	ldr	r3, [pc, #184]	; (80007d4 <HAL_InitTick+0xd0>)
 800071a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800071c:	4a2d      	ldr	r2, [pc, #180]	; (80007d4 <HAL_InitTick+0xd0>)
 800071e:	f043 0301 	orr.w	r3, r3, #1
 8000722:	6453      	str	r3, [r2, #68]	; 0x44
 8000724:	4b2b      	ldr	r3, [pc, #172]	; (80007d4 <HAL_InitTick+0xd0>)
 8000726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000728:	f003 0301 	and.w	r3, r3, #1
 800072c:	60bb      	str	r3, [r7, #8]
 800072e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000730:	f107 020c 	add.w	r2, r7, #12
 8000734:	f107 0310 	add.w	r3, r7, #16
 8000738:	4611      	mov	r1, r2
 800073a:	4618      	mov	r0, r3
 800073c:	f000 feae 	bl	800149c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000740:	f000 fe98 	bl	8001474 <HAL_RCC_GetPCLK2Freq>
 8000744:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000748:	4a23      	ldr	r2, [pc, #140]	; (80007d8 <HAL_InitTick+0xd4>)
 800074a:	fba2 2303 	umull	r2, r3, r2, r3
 800074e:	0c9b      	lsrs	r3, r3, #18
 8000750:	3b01      	subs	r3, #1
 8000752:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000754:	4b21      	ldr	r3, [pc, #132]	; (80007dc <HAL_InitTick+0xd8>)
 8000756:	4a22      	ldr	r2, [pc, #136]	; (80007e0 <HAL_InitTick+0xdc>)
 8000758:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800075a:	4b20      	ldr	r3, [pc, #128]	; (80007dc <HAL_InitTick+0xd8>)
 800075c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000760:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000762:	4a1e      	ldr	r2, [pc, #120]	; (80007dc <HAL_InitTick+0xd8>)
 8000764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000766:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000768:	4b1c      	ldr	r3, [pc, #112]	; (80007dc <HAL_InitTick+0xd8>)
 800076a:	2200      	movs	r2, #0
 800076c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800076e:	4b1b      	ldr	r3, [pc, #108]	; (80007dc <HAL_InitTick+0xd8>)
 8000770:	2200      	movs	r2, #0
 8000772:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000774:	4b19      	ldr	r3, [pc, #100]	; (80007dc <HAL_InitTick+0xd8>)
 8000776:	2200      	movs	r2, #0
 8000778:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800077a:	4818      	ldr	r0, [pc, #96]	; (80007dc <HAL_InitTick+0xd8>)
 800077c:	f000 fec0 	bl	8001500 <HAL_TIM_Base_Init>
 8000780:	4603      	mov	r3, r0
 8000782:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000786:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800078a:	2b00      	cmp	r3, #0
 800078c:	d11b      	bne.n	80007c6 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800078e:	4813      	ldr	r0, [pc, #76]	; (80007dc <HAL_InitTick+0xd8>)
 8000790:	f000 ff10 	bl	80015b4 <HAL_TIM_Base_Start_IT>
 8000794:	4603      	mov	r3, r0
 8000796:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800079a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d111      	bne.n	80007c6 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80007a2:	2019      	movs	r0, #25
 80007a4:	f000 fa28 	bl	8000bf8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	2b0f      	cmp	r3, #15
 80007ac:	d808      	bhi.n	80007c0 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80007ae:	2200      	movs	r2, #0
 80007b0:	6879      	ldr	r1, [r7, #4]
 80007b2:	2019      	movs	r0, #25
 80007b4:	f000 fa04 	bl	8000bc0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007b8:	4a0a      	ldr	r2, [pc, #40]	; (80007e4 <HAL_InitTick+0xe0>)
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	6013      	str	r3, [r2, #0]
 80007be:	e002      	b.n	80007c6 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80007c0:	2301      	movs	r3, #1
 80007c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80007c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	3730      	adds	r7, #48	; 0x30
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40023800 	.word	0x40023800
 80007d8:	431bde83 	.word	0x431bde83
 80007dc:	2000008c 	.word	0x2000008c
 80007e0:	40010000 	.word	0x40010000
 80007e4:	20000004 	.word	0x20000004

080007e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007ec:	e7fe      	b.n	80007ec <NMI_Handler+0x4>

080007ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ee:	b480      	push	{r7}
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007f2:	e7fe      	b.n	80007f2 <HardFault_Handler+0x4>

080007f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007f8:	e7fe      	b.n	80007f8 <MemManage_Handler+0x4>

080007fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007fa:	b480      	push	{r7}
 80007fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007fe:	e7fe      	b.n	80007fe <BusFault_Handler+0x4>

08000800 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000804:	e7fe      	b.n	8000804 <UsageFault_Handler+0x4>

08000806 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000806:	b480      	push	{r7}
 8000808:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800080a:	bf00      	nop
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr

08000814 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000818:	4802      	ldr	r0, [pc, #8]	; (8000824 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800081a:	f000 ff2d 	bl	8001678 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	2000008c 	.word	0x2000008c

08000828 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	4603      	mov	r3, r0
 8000830:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000832:	4b0f      	ldr	r3, [pc, #60]	; (8000870 <ITM_SendChar+0x48>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4a0e      	ldr	r2, [pc, #56]	; (8000870 <ITM_SendChar+0x48>)
 8000838:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800083c:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800083e:	4b0d      	ldr	r3, [pc, #52]	; (8000874 <ITM_SendChar+0x4c>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	4a0c      	ldr	r2, [pc, #48]	; (8000874 <ITM_SendChar+0x4c>)
 8000844:	f043 0301 	orr.w	r3, r3, #1
 8000848:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800084a:	bf00      	nop
 800084c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	f003 0301 	and.w	r3, r3, #1
 8000856:	2b00      	cmp	r3, #0
 8000858:	d0f8      	beq.n	800084c <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800085a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800085e:	79fb      	ldrb	r3, [r7, #7]
 8000860:	6013      	str	r3, [r2, #0]
}
 8000862:	bf00      	nop
 8000864:	370c      	adds	r7, #12
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	e000edfc 	.word	0xe000edfc
 8000874:	e0000e00 	.word	0xe0000e00

08000878 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b086      	sub	sp, #24
 800087c:	af00      	add	r7, sp, #0
 800087e:	60f8      	str	r0, [r7, #12]
 8000880:	60b9      	str	r1, [r7, #8]
 8000882:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000884:	2300      	movs	r3, #0
 8000886:	617b      	str	r3, [r7, #20]
 8000888:	e00a      	b.n	80008a0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800088a:	f3af 8000 	nop.w
 800088e:	4601      	mov	r1, r0
 8000890:	68bb      	ldr	r3, [r7, #8]
 8000892:	1c5a      	adds	r2, r3, #1
 8000894:	60ba      	str	r2, [r7, #8]
 8000896:	b2ca      	uxtb	r2, r1
 8000898:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800089a:	697b      	ldr	r3, [r7, #20]
 800089c:	3301      	adds	r3, #1
 800089e:	617b      	str	r3, [r7, #20]
 80008a0:	697a      	ldr	r2, [r7, #20]
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	429a      	cmp	r2, r3
 80008a6:	dbf0      	blt.n	800088a <_read+0x12>
  }

  return len;
 80008a8:	687b      	ldr	r3, [r7, #4]
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	3718      	adds	r7, #24
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}

080008b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80008b2:	b580      	push	{r7, lr}
 80008b4:	b086      	sub	sp, #24
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	60f8      	str	r0, [r7, #12]
 80008ba:	60b9      	str	r1, [r7, #8]
 80008bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008be:	2300      	movs	r3, #0
 80008c0:	617b      	str	r3, [r7, #20]
 80008c2:	e009      	b.n	80008d8 <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 80008c4:	68bb      	ldr	r3, [r7, #8]
 80008c6:	1c5a      	adds	r2, r3, #1
 80008c8:	60ba      	str	r2, [r7, #8]
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	4618      	mov	r0, r3
 80008ce:	f7ff ffab 	bl	8000828 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008d2:	697b      	ldr	r3, [r7, #20]
 80008d4:	3301      	adds	r3, #1
 80008d6:	617b      	str	r3, [r7, #20]
 80008d8:	697a      	ldr	r2, [r7, #20]
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	429a      	cmp	r2, r3
 80008de:	dbf1      	blt.n	80008c4 <_write+0x12>
  }
  return len;
 80008e0:	687b      	ldr	r3, [r7, #4]
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	3718      	adds	r7, #24
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}

080008ea <_close>:

int _close(int file)
{
 80008ea:	b480      	push	{r7}
 80008ec:	b083      	sub	sp, #12
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80008f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	370c      	adds	r7, #12
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr

08000902 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000902:	b480      	push	{r7}
 8000904:	b083      	sub	sp, #12
 8000906:	af00      	add	r7, sp, #0
 8000908:	6078      	str	r0, [r7, #4]
 800090a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000912:	605a      	str	r2, [r3, #4]
  return 0;
 8000914:	2300      	movs	r3, #0
}
 8000916:	4618      	mov	r0, r3
 8000918:	370c      	adds	r7, #12
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr

08000922 <_isatty>:

int _isatty(int file)
{
 8000922:	b480      	push	{r7}
 8000924:	b083      	sub	sp, #12
 8000926:	af00      	add	r7, sp, #0
 8000928:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800092a:	2301      	movs	r3, #1
}
 800092c:	4618      	mov	r0, r3
 800092e:	370c      	adds	r7, #12
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr

08000938 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000938:	b480      	push	{r7}
 800093a:	b085      	sub	sp, #20
 800093c:	af00      	add	r7, sp, #0
 800093e:	60f8      	str	r0, [r7, #12]
 8000940:	60b9      	str	r1, [r7, #8]
 8000942:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000944:	2300      	movs	r3, #0
}
 8000946:	4618      	mov	r0, r3
 8000948:	3714      	adds	r7, #20
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
	...

08000954 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000958:	4b06      	ldr	r3, [pc, #24]	; (8000974 <SystemInit+0x20>)
 800095a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800095e:	4a05      	ldr	r2, [pc, #20]	; (8000974 <SystemInit+0x20>)
 8000960:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000964:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	e000ed00 	.word	0xe000ed00

08000978 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000978:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800097c:	480d      	ldr	r0, [pc, #52]	; (80009b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800097e:	490e      	ldr	r1, [pc, #56]	; (80009b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000980:	4a0e      	ldr	r2, [pc, #56]	; (80009bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000982:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000984:	e002      	b.n	800098c <LoopCopyDataInit>

08000986 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000986:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000988:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800098a:	3304      	adds	r3, #4

0800098c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800098c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800098e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000990:	d3f9      	bcc.n	8000986 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000992:	4a0b      	ldr	r2, [pc, #44]	; (80009c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000994:	4c0b      	ldr	r4, [pc, #44]	; (80009c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000996:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000998:	e001      	b.n	800099e <LoopFillZerobss>

0800099a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800099a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800099c:	3204      	adds	r2, #4

0800099e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800099e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009a0:	d3fb      	bcc.n	800099a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009a2:	f7ff ffd7 	bl	8000954 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009a6:	f003 fb51 	bl	800404c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009aa:	f7ff fd97 	bl	80004dc <main>
  bx  lr    
 80009ae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80009b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009b8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80009bc:	080045e0 	.word	0x080045e0
  ldr r2, =_sbss
 80009c0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80009c4:	200017cc 	.word	0x200017cc

080009c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009c8:	e7fe      	b.n	80009c8 <ADC_IRQHandler>
	...

080009cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009d0:	4b0e      	ldr	r3, [pc, #56]	; (8000a0c <HAL_Init+0x40>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a0d      	ldr	r2, [pc, #52]	; (8000a0c <HAL_Init+0x40>)
 80009d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009dc:	4b0b      	ldr	r3, [pc, #44]	; (8000a0c <HAL_Init+0x40>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a0a      	ldr	r2, [pc, #40]	; (8000a0c <HAL_Init+0x40>)
 80009e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009e8:	4b08      	ldr	r3, [pc, #32]	; (8000a0c <HAL_Init+0x40>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a07      	ldr	r2, [pc, #28]	; (8000a0c <HAL_Init+0x40>)
 80009ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009f4:	2003      	movs	r0, #3
 80009f6:	f000 f8d8 	bl	8000baa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009fa:	200f      	movs	r0, #15
 80009fc:	f7ff fe82 	bl	8000704 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a00:	f7ff fe58 	bl	80006b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a04:	2300      	movs	r3, #0
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40023c00 	.word	0x40023c00

08000a10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a14:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <HAL_IncTick+0x20>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	461a      	mov	r2, r3
 8000a1a:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <HAL_IncTick+0x24>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4413      	add	r3, r2
 8000a20:	4a04      	ldr	r2, [pc, #16]	; (8000a34 <HAL_IncTick+0x24>)
 8000a22:	6013      	str	r3, [r2, #0]
}
 8000a24:	bf00      	nop
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	20000008 	.word	0x20000008
 8000a34:	200000d4 	.word	0x200000d4

08000a38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a3c:	4b03      	ldr	r3, [pc, #12]	; (8000a4c <HAL_GetTick+0x14>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	200000d4 	.word	0x200000d4

08000a50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b085      	sub	sp, #20
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	f003 0307 	and.w	r3, r3, #7
 8000a5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a60:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <__NVIC_SetPriorityGrouping+0x44>)
 8000a62:	68db      	ldr	r3, [r3, #12]
 8000a64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a66:	68ba      	ldr	r2, [r7, #8]
 8000a68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a82:	4a04      	ldr	r2, [pc, #16]	; (8000a94 <__NVIC_SetPriorityGrouping+0x44>)
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	60d3      	str	r3, [r2, #12]
}
 8000a88:	bf00      	nop
 8000a8a:	3714      	adds	r7, #20
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr
 8000a94:	e000ed00 	.word	0xe000ed00

08000a98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a9c:	4b04      	ldr	r3, [pc, #16]	; (8000ab0 <__NVIC_GetPriorityGrouping+0x18>)
 8000a9e:	68db      	ldr	r3, [r3, #12]
 8000aa0:	0a1b      	lsrs	r3, r3, #8
 8000aa2:	f003 0307 	and.w	r3, r3, #7
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr
 8000ab0:	e000ed00 	.word	0xe000ed00

08000ab4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4603      	mov	r3, r0
 8000abc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	db0b      	blt.n	8000ade <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	f003 021f 	and.w	r2, r3, #31
 8000acc:	4907      	ldr	r1, [pc, #28]	; (8000aec <__NVIC_EnableIRQ+0x38>)
 8000ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad2:	095b      	lsrs	r3, r3, #5
 8000ad4:	2001      	movs	r0, #1
 8000ad6:	fa00 f202 	lsl.w	r2, r0, r2
 8000ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ade:	bf00      	nop
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	e000e100 	.word	0xe000e100

08000af0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	4603      	mov	r3, r0
 8000af8:	6039      	str	r1, [r7, #0]
 8000afa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	db0a      	blt.n	8000b1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	b2da      	uxtb	r2, r3
 8000b08:	490c      	ldr	r1, [pc, #48]	; (8000b3c <__NVIC_SetPriority+0x4c>)
 8000b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0e:	0112      	lsls	r2, r2, #4
 8000b10:	b2d2      	uxtb	r2, r2
 8000b12:	440b      	add	r3, r1
 8000b14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b18:	e00a      	b.n	8000b30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	b2da      	uxtb	r2, r3
 8000b1e:	4908      	ldr	r1, [pc, #32]	; (8000b40 <__NVIC_SetPriority+0x50>)
 8000b20:	79fb      	ldrb	r3, [r7, #7]
 8000b22:	f003 030f 	and.w	r3, r3, #15
 8000b26:	3b04      	subs	r3, #4
 8000b28:	0112      	lsls	r2, r2, #4
 8000b2a:	b2d2      	uxtb	r2, r2
 8000b2c:	440b      	add	r3, r1
 8000b2e:	761a      	strb	r2, [r3, #24]
}
 8000b30:	bf00      	nop
 8000b32:	370c      	adds	r7, #12
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr
 8000b3c:	e000e100 	.word	0xe000e100
 8000b40:	e000ed00 	.word	0xe000ed00

08000b44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b089      	sub	sp, #36	; 0x24
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	60f8      	str	r0, [r7, #12]
 8000b4c:	60b9      	str	r1, [r7, #8]
 8000b4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	f003 0307 	and.w	r3, r3, #7
 8000b56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b58:	69fb      	ldr	r3, [r7, #28]
 8000b5a:	f1c3 0307 	rsb	r3, r3, #7
 8000b5e:	2b04      	cmp	r3, #4
 8000b60:	bf28      	it	cs
 8000b62:	2304      	movcs	r3, #4
 8000b64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b66:	69fb      	ldr	r3, [r7, #28]
 8000b68:	3304      	adds	r3, #4
 8000b6a:	2b06      	cmp	r3, #6
 8000b6c:	d902      	bls.n	8000b74 <NVIC_EncodePriority+0x30>
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	3b03      	subs	r3, #3
 8000b72:	e000      	b.n	8000b76 <NVIC_EncodePriority+0x32>
 8000b74:	2300      	movs	r3, #0
 8000b76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b78:	f04f 32ff 	mov.w	r2, #4294967295
 8000b7c:	69bb      	ldr	r3, [r7, #24]
 8000b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b82:	43da      	mvns	r2, r3
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	401a      	ands	r2, r3
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	fa01 f303 	lsl.w	r3, r1, r3
 8000b96:	43d9      	mvns	r1, r3
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b9c:	4313      	orrs	r3, r2
         );
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3724      	adds	r7, #36	; 0x24
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr

08000baa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000baa:	b580      	push	{r7, lr}
 8000bac:	b082      	sub	sp, #8
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bb2:	6878      	ldr	r0, [r7, #4]
 8000bb4:	f7ff ff4c 	bl	8000a50 <__NVIC_SetPriorityGrouping>
}
 8000bb8:	bf00      	nop
 8000bba:	3708      	adds	r7, #8
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b086      	sub	sp, #24
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	60b9      	str	r1, [r7, #8]
 8000bca:	607a      	str	r2, [r7, #4]
 8000bcc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bd2:	f7ff ff61 	bl	8000a98 <__NVIC_GetPriorityGrouping>
 8000bd6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bd8:	687a      	ldr	r2, [r7, #4]
 8000bda:	68b9      	ldr	r1, [r7, #8]
 8000bdc:	6978      	ldr	r0, [r7, #20]
 8000bde:	f7ff ffb1 	bl	8000b44 <NVIC_EncodePriority>
 8000be2:	4602      	mov	r2, r0
 8000be4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000be8:	4611      	mov	r1, r2
 8000bea:	4618      	mov	r0, r3
 8000bec:	f7ff ff80 	bl	8000af0 <__NVIC_SetPriority>
}
 8000bf0:	bf00      	nop
 8000bf2:	3718      	adds	r7, #24
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}

08000bf8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c06:	4618      	mov	r0, r3
 8000c08:	f7ff ff54 	bl	8000ab4 <__NVIC_EnableIRQ>
}
 8000c0c:	bf00      	nop
 8000c0e:	3708      	adds	r7, #8
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b086      	sub	sp, #24
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d101      	bne.n	8000c26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c22:	2301      	movs	r3, #1
 8000c24:	e267      	b.n	80010f6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f003 0301 	and.w	r3, r3, #1
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d075      	beq.n	8000d1e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000c32:	4b88      	ldr	r3, [pc, #544]	; (8000e54 <HAL_RCC_OscConfig+0x240>)
 8000c34:	689b      	ldr	r3, [r3, #8]
 8000c36:	f003 030c 	and.w	r3, r3, #12
 8000c3a:	2b04      	cmp	r3, #4
 8000c3c:	d00c      	beq.n	8000c58 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c3e:	4b85      	ldr	r3, [pc, #532]	; (8000e54 <HAL_RCC_OscConfig+0x240>)
 8000c40:	689b      	ldr	r3, [r3, #8]
 8000c42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000c46:	2b08      	cmp	r3, #8
 8000c48:	d112      	bne.n	8000c70 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c4a:	4b82      	ldr	r3, [pc, #520]	; (8000e54 <HAL_RCC_OscConfig+0x240>)
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000c56:	d10b      	bne.n	8000c70 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c58:	4b7e      	ldr	r3, [pc, #504]	; (8000e54 <HAL_RCC_OscConfig+0x240>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d05b      	beq.n	8000d1c <HAL_RCC_OscConfig+0x108>
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d157      	bne.n	8000d1c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	e242      	b.n	80010f6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c78:	d106      	bne.n	8000c88 <HAL_RCC_OscConfig+0x74>
 8000c7a:	4b76      	ldr	r3, [pc, #472]	; (8000e54 <HAL_RCC_OscConfig+0x240>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4a75      	ldr	r2, [pc, #468]	; (8000e54 <HAL_RCC_OscConfig+0x240>)
 8000c80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c84:	6013      	str	r3, [r2, #0]
 8000c86:	e01d      	b.n	8000cc4 <HAL_RCC_OscConfig+0xb0>
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c90:	d10c      	bne.n	8000cac <HAL_RCC_OscConfig+0x98>
 8000c92:	4b70      	ldr	r3, [pc, #448]	; (8000e54 <HAL_RCC_OscConfig+0x240>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4a6f      	ldr	r2, [pc, #444]	; (8000e54 <HAL_RCC_OscConfig+0x240>)
 8000c98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c9c:	6013      	str	r3, [r2, #0]
 8000c9e:	4b6d      	ldr	r3, [pc, #436]	; (8000e54 <HAL_RCC_OscConfig+0x240>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4a6c      	ldr	r2, [pc, #432]	; (8000e54 <HAL_RCC_OscConfig+0x240>)
 8000ca4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ca8:	6013      	str	r3, [r2, #0]
 8000caa:	e00b      	b.n	8000cc4 <HAL_RCC_OscConfig+0xb0>
 8000cac:	4b69      	ldr	r3, [pc, #420]	; (8000e54 <HAL_RCC_OscConfig+0x240>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a68      	ldr	r2, [pc, #416]	; (8000e54 <HAL_RCC_OscConfig+0x240>)
 8000cb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cb6:	6013      	str	r3, [r2, #0]
 8000cb8:	4b66      	ldr	r3, [pc, #408]	; (8000e54 <HAL_RCC_OscConfig+0x240>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a65      	ldr	r2, [pc, #404]	; (8000e54 <HAL_RCC_OscConfig+0x240>)
 8000cbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d013      	beq.n	8000cf4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ccc:	f7ff feb4 	bl	8000a38 <HAL_GetTick>
 8000cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cd2:	e008      	b.n	8000ce6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cd4:	f7ff feb0 	bl	8000a38 <HAL_GetTick>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	693b      	ldr	r3, [r7, #16]
 8000cdc:	1ad3      	subs	r3, r2, r3
 8000cde:	2b64      	cmp	r3, #100	; 0x64
 8000ce0:	d901      	bls.n	8000ce6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000ce2:	2303      	movs	r3, #3
 8000ce4:	e207      	b.n	80010f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ce6:	4b5b      	ldr	r3, [pc, #364]	; (8000e54 <HAL_RCC_OscConfig+0x240>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d0f0      	beq.n	8000cd4 <HAL_RCC_OscConfig+0xc0>
 8000cf2:	e014      	b.n	8000d1e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cf4:	f7ff fea0 	bl	8000a38 <HAL_GetTick>
 8000cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cfa:	e008      	b.n	8000d0e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cfc:	f7ff fe9c 	bl	8000a38 <HAL_GetTick>
 8000d00:	4602      	mov	r2, r0
 8000d02:	693b      	ldr	r3, [r7, #16]
 8000d04:	1ad3      	subs	r3, r2, r3
 8000d06:	2b64      	cmp	r3, #100	; 0x64
 8000d08:	d901      	bls.n	8000d0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	e1f3      	b.n	80010f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d0e:	4b51      	ldr	r3, [pc, #324]	; (8000e54 <HAL_RCC_OscConfig+0x240>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d1f0      	bne.n	8000cfc <HAL_RCC_OscConfig+0xe8>
 8000d1a:	e000      	b.n	8000d1e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f003 0302 	and.w	r3, r3, #2
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d063      	beq.n	8000df2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000d2a:	4b4a      	ldr	r3, [pc, #296]	; (8000e54 <HAL_RCC_OscConfig+0x240>)
 8000d2c:	689b      	ldr	r3, [r3, #8]
 8000d2e:	f003 030c 	and.w	r3, r3, #12
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d00b      	beq.n	8000d4e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d36:	4b47      	ldr	r3, [pc, #284]	; (8000e54 <HAL_RCC_OscConfig+0x240>)
 8000d38:	689b      	ldr	r3, [r3, #8]
 8000d3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000d3e:	2b08      	cmp	r3, #8
 8000d40:	d11c      	bne.n	8000d7c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d42:	4b44      	ldr	r3, [pc, #272]	; (8000e54 <HAL_RCC_OscConfig+0x240>)
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d116      	bne.n	8000d7c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d4e:	4b41      	ldr	r3, [pc, #260]	; (8000e54 <HAL_RCC_OscConfig+0x240>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f003 0302 	and.w	r3, r3, #2
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d005      	beq.n	8000d66 <HAL_RCC_OscConfig+0x152>
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	68db      	ldr	r3, [r3, #12]
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	d001      	beq.n	8000d66 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
 8000d64:	e1c7      	b.n	80010f6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d66:	4b3b      	ldr	r3, [pc, #236]	; (8000e54 <HAL_RCC_OscConfig+0x240>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	691b      	ldr	r3, [r3, #16]
 8000d72:	00db      	lsls	r3, r3, #3
 8000d74:	4937      	ldr	r1, [pc, #220]	; (8000e54 <HAL_RCC_OscConfig+0x240>)
 8000d76:	4313      	orrs	r3, r2
 8000d78:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d7a:	e03a      	b.n	8000df2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d020      	beq.n	8000dc6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d84:	4b34      	ldr	r3, [pc, #208]	; (8000e58 <HAL_RCC_OscConfig+0x244>)
 8000d86:	2201      	movs	r2, #1
 8000d88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d8a:	f7ff fe55 	bl	8000a38 <HAL_GetTick>
 8000d8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d90:	e008      	b.n	8000da4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d92:	f7ff fe51 	bl	8000a38 <HAL_GetTick>
 8000d96:	4602      	mov	r2, r0
 8000d98:	693b      	ldr	r3, [r7, #16]
 8000d9a:	1ad3      	subs	r3, r2, r3
 8000d9c:	2b02      	cmp	r3, #2
 8000d9e:	d901      	bls.n	8000da4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000da0:	2303      	movs	r3, #3
 8000da2:	e1a8      	b.n	80010f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000da4:	4b2b      	ldr	r3, [pc, #172]	; (8000e54 <HAL_RCC_OscConfig+0x240>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f003 0302 	and.w	r3, r3, #2
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d0f0      	beq.n	8000d92 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000db0:	4b28      	ldr	r3, [pc, #160]	; (8000e54 <HAL_RCC_OscConfig+0x240>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	691b      	ldr	r3, [r3, #16]
 8000dbc:	00db      	lsls	r3, r3, #3
 8000dbe:	4925      	ldr	r1, [pc, #148]	; (8000e54 <HAL_RCC_OscConfig+0x240>)
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	600b      	str	r3, [r1, #0]
 8000dc4:	e015      	b.n	8000df2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000dc6:	4b24      	ldr	r3, [pc, #144]	; (8000e58 <HAL_RCC_OscConfig+0x244>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000dcc:	f7ff fe34 	bl	8000a38 <HAL_GetTick>
 8000dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dd2:	e008      	b.n	8000de6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000dd4:	f7ff fe30 	bl	8000a38 <HAL_GetTick>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	693b      	ldr	r3, [r7, #16]
 8000ddc:	1ad3      	subs	r3, r2, r3
 8000dde:	2b02      	cmp	r3, #2
 8000de0:	d901      	bls.n	8000de6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000de2:	2303      	movs	r3, #3
 8000de4:	e187      	b.n	80010f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000de6:	4b1b      	ldr	r3, [pc, #108]	; (8000e54 <HAL_RCC_OscConfig+0x240>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f003 0302 	and.w	r3, r3, #2
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d1f0      	bne.n	8000dd4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f003 0308 	and.w	r3, r3, #8
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d036      	beq.n	8000e6c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	695b      	ldr	r3, [r3, #20]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d016      	beq.n	8000e34 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e06:	4b15      	ldr	r3, [pc, #84]	; (8000e5c <HAL_RCC_OscConfig+0x248>)
 8000e08:	2201      	movs	r2, #1
 8000e0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e0c:	f7ff fe14 	bl	8000a38 <HAL_GetTick>
 8000e10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e12:	e008      	b.n	8000e26 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e14:	f7ff fe10 	bl	8000a38 <HAL_GetTick>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	693b      	ldr	r3, [r7, #16]
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	2b02      	cmp	r3, #2
 8000e20:	d901      	bls.n	8000e26 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000e22:	2303      	movs	r3, #3
 8000e24:	e167      	b.n	80010f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e26:	4b0b      	ldr	r3, [pc, #44]	; (8000e54 <HAL_RCC_OscConfig+0x240>)
 8000e28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e2a:	f003 0302 	and.w	r3, r3, #2
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d0f0      	beq.n	8000e14 <HAL_RCC_OscConfig+0x200>
 8000e32:	e01b      	b.n	8000e6c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e34:	4b09      	ldr	r3, [pc, #36]	; (8000e5c <HAL_RCC_OscConfig+0x248>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e3a:	f7ff fdfd 	bl	8000a38 <HAL_GetTick>
 8000e3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e40:	e00e      	b.n	8000e60 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e42:	f7ff fdf9 	bl	8000a38 <HAL_GetTick>
 8000e46:	4602      	mov	r2, r0
 8000e48:	693b      	ldr	r3, [r7, #16]
 8000e4a:	1ad3      	subs	r3, r2, r3
 8000e4c:	2b02      	cmp	r3, #2
 8000e4e:	d907      	bls.n	8000e60 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000e50:	2303      	movs	r3, #3
 8000e52:	e150      	b.n	80010f6 <HAL_RCC_OscConfig+0x4e2>
 8000e54:	40023800 	.word	0x40023800
 8000e58:	42470000 	.word	0x42470000
 8000e5c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e60:	4b88      	ldr	r3, [pc, #544]	; (8001084 <HAL_RCC_OscConfig+0x470>)
 8000e62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e64:	f003 0302 	and.w	r3, r3, #2
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d1ea      	bne.n	8000e42 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f003 0304 	and.w	r3, r3, #4
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	f000 8097 	beq.w	8000fa8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e7e:	4b81      	ldr	r3, [pc, #516]	; (8001084 <HAL_RCC_OscConfig+0x470>)
 8000e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d10f      	bne.n	8000eaa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	60bb      	str	r3, [r7, #8]
 8000e8e:	4b7d      	ldr	r3, [pc, #500]	; (8001084 <HAL_RCC_OscConfig+0x470>)
 8000e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e92:	4a7c      	ldr	r2, [pc, #496]	; (8001084 <HAL_RCC_OscConfig+0x470>)
 8000e94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e98:	6413      	str	r3, [r2, #64]	; 0x40
 8000e9a:	4b7a      	ldr	r3, [pc, #488]	; (8001084 <HAL_RCC_OscConfig+0x470>)
 8000e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ea2:	60bb      	str	r3, [r7, #8]
 8000ea4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000eaa:	4b77      	ldr	r3, [pc, #476]	; (8001088 <HAL_RCC_OscConfig+0x474>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d118      	bne.n	8000ee8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000eb6:	4b74      	ldr	r3, [pc, #464]	; (8001088 <HAL_RCC_OscConfig+0x474>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a73      	ldr	r2, [pc, #460]	; (8001088 <HAL_RCC_OscConfig+0x474>)
 8000ebc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ec0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000ec2:	f7ff fdb9 	bl	8000a38 <HAL_GetTick>
 8000ec6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ec8:	e008      	b.n	8000edc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000eca:	f7ff fdb5 	bl	8000a38 <HAL_GetTick>
 8000ece:	4602      	mov	r2, r0
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	1ad3      	subs	r3, r2, r3
 8000ed4:	2b02      	cmp	r3, #2
 8000ed6:	d901      	bls.n	8000edc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8000ed8:	2303      	movs	r3, #3
 8000eda:	e10c      	b.n	80010f6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000edc:	4b6a      	ldr	r3, [pc, #424]	; (8001088 <HAL_RCC_OscConfig+0x474>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d0f0      	beq.n	8000eca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	689b      	ldr	r3, [r3, #8]
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d106      	bne.n	8000efe <HAL_RCC_OscConfig+0x2ea>
 8000ef0:	4b64      	ldr	r3, [pc, #400]	; (8001084 <HAL_RCC_OscConfig+0x470>)
 8000ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ef4:	4a63      	ldr	r2, [pc, #396]	; (8001084 <HAL_RCC_OscConfig+0x470>)
 8000ef6:	f043 0301 	orr.w	r3, r3, #1
 8000efa:	6713      	str	r3, [r2, #112]	; 0x70
 8000efc:	e01c      	b.n	8000f38 <HAL_RCC_OscConfig+0x324>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	689b      	ldr	r3, [r3, #8]
 8000f02:	2b05      	cmp	r3, #5
 8000f04:	d10c      	bne.n	8000f20 <HAL_RCC_OscConfig+0x30c>
 8000f06:	4b5f      	ldr	r3, [pc, #380]	; (8001084 <HAL_RCC_OscConfig+0x470>)
 8000f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f0a:	4a5e      	ldr	r2, [pc, #376]	; (8001084 <HAL_RCC_OscConfig+0x470>)
 8000f0c:	f043 0304 	orr.w	r3, r3, #4
 8000f10:	6713      	str	r3, [r2, #112]	; 0x70
 8000f12:	4b5c      	ldr	r3, [pc, #368]	; (8001084 <HAL_RCC_OscConfig+0x470>)
 8000f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f16:	4a5b      	ldr	r2, [pc, #364]	; (8001084 <HAL_RCC_OscConfig+0x470>)
 8000f18:	f043 0301 	orr.w	r3, r3, #1
 8000f1c:	6713      	str	r3, [r2, #112]	; 0x70
 8000f1e:	e00b      	b.n	8000f38 <HAL_RCC_OscConfig+0x324>
 8000f20:	4b58      	ldr	r3, [pc, #352]	; (8001084 <HAL_RCC_OscConfig+0x470>)
 8000f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f24:	4a57      	ldr	r2, [pc, #348]	; (8001084 <HAL_RCC_OscConfig+0x470>)
 8000f26:	f023 0301 	bic.w	r3, r3, #1
 8000f2a:	6713      	str	r3, [r2, #112]	; 0x70
 8000f2c:	4b55      	ldr	r3, [pc, #340]	; (8001084 <HAL_RCC_OscConfig+0x470>)
 8000f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f30:	4a54      	ldr	r2, [pc, #336]	; (8001084 <HAL_RCC_OscConfig+0x470>)
 8000f32:	f023 0304 	bic.w	r3, r3, #4
 8000f36:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	689b      	ldr	r3, [r3, #8]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d015      	beq.n	8000f6c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f40:	f7ff fd7a 	bl	8000a38 <HAL_GetTick>
 8000f44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f46:	e00a      	b.n	8000f5e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f48:	f7ff fd76 	bl	8000a38 <HAL_GetTick>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	1ad3      	subs	r3, r2, r3
 8000f52:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d901      	bls.n	8000f5e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8000f5a:	2303      	movs	r3, #3
 8000f5c:	e0cb      	b.n	80010f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f5e:	4b49      	ldr	r3, [pc, #292]	; (8001084 <HAL_RCC_OscConfig+0x470>)
 8000f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f62:	f003 0302 	and.w	r3, r3, #2
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d0ee      	beq.n	8000f48 <HAL_RCC_OscConfig+0x334>
 8000f6a:	e014      	b.n	8000f96 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f6c:	f7ff fd64 	bl	8000a38 <HAL_GetTick>
 8000f70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f72:	e00a      	b.n	8000f8a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f74:	f7ff fd60 	bl	8000a38 <HAL_GetTick>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d901      	bls.n	8000f8a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8000f86:	2303      	movs	r3, #3
 8000f88:	e0b5      	b.n	80010f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f8a:	4b3e      	ldr	r3, [pc, #248]	; (8001084 <HAL_RCC_OscConfig+0x470>)
 8000f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f8e:	f003 0302 	and.w	r3, r3, #2
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d1ee      	bne.n	8000f74 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000f96:	7dfb      	ldrb	r3, [r7, #23]
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d105      	bne.n	8000fa8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f9c:	4b39      	ldr	r3, [pc, #228]	; (8001084 <HAL_RCC_OscConfig+0x470>)
 8000f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa0:	4a38      	ldr	r2, [pc, #224]	; (8001084 <HAL_RCC_OscConfig+0x470>)
 8000fa2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000fa6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	699b      	ldr	r3, [r3, #24]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	f000 80a1 	beq.w	80010f4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000fb2:	4b34      	ldr	r3, [pc, #208]	; (8001084 <HAL_RCC_OscConfig+0x470>)
 8000fb4:	689b      	ldr	r3, [r3, #8]
 8000fb6:	f003 030c 	and.w	r3, r3, #12
 8000fba:	2b08      	cmp	r3, #8
 8000fbc:	d05c      	beq.n	8001078 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	699b      	ldr	r3, [r3, #24]
 8000fc2:	2b02      	cmp	r3, #2
 8000fc4:	d141      	bne.n	800104a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fc6:	4b31      	ldr	r3, [pc, #196]	; (800108c <HAL_RCC_OscConfig+0x478>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fcc:	f7ff fd34 	bl	8000a38 <HAL_GetTick>
 8000fd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fd2:	e008      	b.n	8000fe6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fd4:	f7ff fd30 	bl	8000a38 <HAL_GetTick>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	2b02      	cmp	r3, #2
 8000fe0:	d901      	bls.n	8000fe6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	e087      	b.n	80010f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fe6:	4b27      	ldr	r3, [pc, #156]	; (8001084 <HAL_RCC_OscConfig+0x470>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d1f0      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	69da      	ldr	r2, [r3, #28]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6a1b      	ldr	r3, [r3, #32]
 8000ffa:	431a      	orrs	r2, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001000:	019b      	lsls	r3, r3, #6
 8001002:	431a      	orrs	r2, r3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001008:	085b      	lsrs	r3, r3, #1
 800100a:	3b01      	subs	r3, #1
 800100c:	041b      	lsls	r3, r3, #16
 800100e:	431a      	orrs	r2, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001014:	061b      	lsls	r3, r3, #24
 8001016:	491b      	ldr	r1, [pc, #108]	; (8001084 <HAL_RCC_OscConfig+0x470>)
 8001018:	4313      	orrs	r3, r2
 800101a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800101c:	4b1b      	ldr	r3, [pc, #108]	; (800108c <HAL_RCC_OscConfig+0x478>)
 800101e:	2201      	movs	r2, #1
 8001020:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001022:	f7ff fd09 	bl	8000a38 <HAL_GetTick>
 8001026:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001028:	e008      	b.n	800103c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800102a:	f7ff fd05 	bl	8000a38 <HAL_GetTick>
 800102e:	4602      	mov	r2, r0
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	1ad3      	subs	r3, r2, r3
 8001034:	2b02      	cmp	r3, #2
 8001036:	d901      	bls.n	800103c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001038:	2303      	movs	r3, #3
 800103a:	e05c      	b.n	80010f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800103c:	4b11      	ldr	r3, [pc, #68]	; (8001084 <HAL_RCC_OscConfig+0x470>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001044:	2b00      	cmp	r3, #0
 8001046:	d0f0      	beq.n	800102a <HAL_RCC_OscConfig+0x416>
 8001048:	e054      	b.n	80010f4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800104a:	4b10      	ldr	r3, [pc, #64]	; (800108c <HAL_RCC_OscConfig+0x478>)
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001050:	f7ff fcf2 	bl	8000a38 <HAL_GetTick>
 8001054:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001056:	e008      	b.n	800106a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001058:	f7ff fcee 	bl	8000a38 <HAL_GetTick>
 800105c:	4602      	mov	r2, r0
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	2b02      	cmp	r3, #2
 8001064:	d901      	bls.n	800106a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001066:	2303      	movs	r3, #3
 8001068:	e045      	b.n	80010f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800106a:	4b06      	ldr	r3, [pc, #24]	; (8001084 <HAL_RCC_OscConfig+0x470>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d1f0      	bne.n	8001058 <HAL_RCC_OscConfig+0x444>
 8001076:	e03d      	b.n	80010f4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	699b      	ldr	r3, [r3, #24]
 800107c:	2b01      	cmp	r3, #1
 800107e:	d107      	bne.n	8001090 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001080:	2301      	movs	r3, #1
 8001082:	e038      	b.n	80010f6 <HAL_RCC_OscConfig+0x4e2>
 8001084:	40023800 	.word	0x40023800
 8001088:	40007000 	.word	0x40007000
 800108c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001090:	4b1b      	ldr	r3, [pc, #108]	; (8001100 <HAL_RCC_OscConfig+0x4ec>)
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	699b      	ldr	r3, [r3, #24]
 800109a:	2b01      	cmp	r3, #1
 800109c:	d028      	beq.n	80010f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d121      	bne.n	80010f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d11a      	bne.n	80010f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80010ba:	68fa      	ldr	r2, [r7, #12]
 80010bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80010c0:	4013      	ands	r3, r2
 80010c2:	687a      	ldr	r2, [r7, #4]
 80010c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80010c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d111      	bne.n	80010f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010d6:	085b      	lsrs	r3, r3, #1
 80010d8:	3b01      	subs	r3, #1
 80010da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80010dc:	429a      	cmp	r2, r3
 80010de:	d107      	bne.n	80010f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d001      	beq.n	80010f4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80010f0:	2301      	movs	r3, #1
 80010f2:	e000      	b.n	80010f6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3718      	adds	r7, #24
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40023800 	.word	0x40023800

08001104 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d101      	bne.n	8001118 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001114:	2301      	movs	r3, #1
 8001116:	e0cc      	b.n	80012b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001118:	4b68      	ldr	r3, [pc, #416]	; (80012bc <HAL_RCC_ClockConfig+0x1b8>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f003 0307 	and.w	r3, r3, #7
 8001120:	683a      	ldr	r2, [r7, #0]
 8001122:	429a      	cmp	r2, r3
 8001124:	d90c      	bls.n	8001140 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001126:	4b65      	ldr	r3, [pc, #404]	; (80012bc <HAL_RCC_ClockConfig+0x1b8>)
 8001128:	683a      	ldr	r2, [r7, #0]
 800112a:	b2d2      	uxtb	r2, r2
 800112c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800112e:	4b63      	ldr	r3, [pc, #396]	; (80012bc <HAL_RCC_ClockConfig+0x1b8>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f003 0307 	and.w	r3, r3, #7
 8001136:	683a      	ldr	r2, [r7, #0]
 8001138:	429a      	cmp	r2, r3
 800113a:	d001      	beq.n	8001140 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800113c:	2301      	movs	r3, #1
 800113e:	e0b8      	b.n	80012b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f003 0302 	and.w	r3, r3, #2
 8001148:	2b00      	cmp	r3, #0
 800114a:	d020      	beq.n	800118e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f003 0304 	and.w	r3, r3, #4
 8001154:	2b00      	cmp	r3, #0
 8001156:	d005      	beq.n	8001164 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001158:	4b59      	ldr	r3, [pc, #356]	; (80012c0 <HAL_RCC_ClockConfig+0x1bc>)
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	4a58      	ldr	r2, [pc, #352]	; (80012c0 <HAL_RCC_ClockConfig+0x1bc>)
 800115e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001162:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f003 0308 	and.w	r3, r3, #8
 800116c:	2b00      	cmp	r3, #0
 800116e:	d005      	beq.n	800117c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001170:	4b53      	ldr	r3, [pc, #332]	; (80012c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	4a52      	ldr	r2, [pc, #328]	; (80012c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001176:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800117a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800117c:	4b50      	ldr	r3, [pc, #320]	; (80012c0 <HAL_RCC_ClockConfig+0x1bc>)
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	494d      	ldr	r1, [pc, #308]	; (80012c0 <HAL_RCC_ClockConfig+0x1bc>)
 800118a:	4313      	orrs	r3, r2
 800118c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	2b00      	cmp	r3, #0
 8001198:	d044      	beq.n	8001224 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d107      	bne.n	80011b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011a2:	4b47      	ldr	r3, [pc, #284]	; (80012c0 <HAL_RCC_ClockConfig+0x1bc>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d119      	bne.n	80011e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e07f      	b.n	80012b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	d003      	beq.n	80011c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011be:	2b03      	cmp	r3, #3
 80011c0:	d107      	bne.n	80011d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011c2:	4b3f      	ldr	r3, [pc, #252]	; (80012c0 <HAL_RCC_ClockConfig+0x1bc>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d109      	bne.n	80011e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e06f      	b.n	80012b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011d2:	4b3b      	ldr	r3, [pc, #236]	; (80012c0 <HAL_RCC_ClockConfig+0x1bc>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f003 0302 	and.w	r3, r3, #2
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d101      	bne.n	80011e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e067      	b.n	80012b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011e2:	4b37      	ldr	r3, [pc, #220]	; (80012c0 <HAL_RCC_ClockConfig+0x1bc>)
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	f023 0203 	bic.w	r2, r3, #3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	4934      	ldr	r1, [pc, #208]	; (80012c0 <HAL_RCC_ClockConfig+0x1bc>)
 80011f0:	4313      	orrs	r3, r2
 80011f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011f4:	f7ff fc20 	bl	8000a38 <HAL_GetTick>
 80011f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011fa:	e00a      	b.n	8001212 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011fc:	f7ff fc1c 	bl	8000a38 <HAL_GetTick>
 8001200:	4602      	mov	r2, r0
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	f241 3288 	movw	r2, #5000	; 0x1388
 800120a:	4293      	cmp	r3, r2
 800120c:	d901      	bls.n	8001212 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800120e:	2303      	movs	r3, #3
 8001210:	e04f      	b.n	80012b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001212:	4b2b      	ldr	r3, [pc, #172]	; (80012c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	f003 020c 	and.w	r2, r3, #12
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	429a      	cmp	r2, r3
 8001222:	d1eb      	bne.n	80011fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001224:	4b25      	ldr	r3, [pc, #148]	; (80012bc <HAL_RCC_ClockConfig+0x1b8>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f003 0307 	and.w	r3, r3, #7
 800122c:	683a      	ldr	r2, [r7, #0]
 800122e:	429a      	cmp	r2, r3
 8001230:	d20c      	bcs.n	800124c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001232:	4b22      	ldr	r3, [pc, #136]	; (80012bc <HAL_RCC_ClockConfig+0x1b8>)
 8001234:	683a      	ldr	r2, [r7, #0]
 8001236:	b2d2      	uxtb	r2, r2
 8001238:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800123a:	4b20      	ldr	r3, [pc, #128]	; (80012bc <HAL_RCC_ClockConfig+0x1b8>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0307 	and.w	r3, r3, #7
 8001242:	683a      	ldr	r2, [r7, #0]
 8001244:	429a      	cmp	r2, r3
 8001246:	d001      	beq.n	800124c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001248:	2301      	movs	r3, #1
 800124a:	e032      	b.n	80012b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f003 0304 	and.w	r3, r3, #4
 8001254:	2b00      	cmp	r3, #0
 8001256:	d008      	beq.n	800126a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001258:	4b19      	ldr	r3, [pc, #100]	; (80012c0 <HAL_RCC_ClockConfig+0x1bc>)
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	4916      	ldr	r1, [pc, #88]	; (80012c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001266:	4313      	orrs	r3, r2
 8001268:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f003 0308 	and.w	r3, r3, #8
 8001272:	2b00      	cmp	r3, #0
 8001274:	d009      	beq.n	800128a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001276:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	691b      	ldr	r3, [r3, #16]
 8001282:	00db      	lsls	r3, r3, #3
 8001284:	490e      	ldr	r1, [pc, #56]	; (80012c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001286:	4313      	orrs	r3, r2
 8001288:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800128a:	f000 f821 	bl	80012d0 <HAL_RCC_GetSysClockFreq>
 800128e:	4602      	mov	r2, r0
 8001290:	4b0b      	ldr	r3, [pc, #44]	; (80012c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	091b      	lsrs	r3, r3, #4
 8001296:	f003 030f 	and.w	r3, r3, #15
 800129a:	490a      	ldr	r1, [pc, #40]	; (80012c4 <HAL_RCC_ClockConfig+0x1c0>)
 800129c:	5ccb      	ldrb	r3, [r1, r3]
 800129e:	fa22 f303 	lsr.w	r3, r2, r3
 80012a2:	4a09      	ldr	r2, [pc, #36]	; (80012c8 <HAL_RCC_ClockConfig+0x1c4>)
 80012a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80012a6:	4b09      	ldr	r3, [pc, #36]	; (80012cc <HAL_RCC_ClockConfig+0x1c8>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff fa2a 	bl	8000704 <HAL_InitTick>

  return HAL_OK;
 80012b0:	2300      	movs	r3, #0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3710      	adds	r7, #16
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40023c00 	.word	0x40023c00
 80012c0:	40023800 	.word	0x40023800
 80012c4:	080045b8 	.word	0x080045b8
 80012c8:	20000000 	.word	0x20000000
 80012cc:	20000004 	.word	0x20000004

080012d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80012d4:	b090      	sub	sp, #64	; 0x40
 80012d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80012d8:	2300      	movs	r3, #0
 80012da:	637b      	str	r3, [r7, #52]	; 0x34
 80012dc:	2300      	movs	r3, #0
 80012de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80012e0:	2300      	movs	r3, #0
 80012e2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80012e4:	2300      	movs	r3, #0
 80012e6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80012e8:	4b59      	ldr	r3, [pc, #356]	; (8001450 <HAL_RCC_GetSysClockFreq+0x180>)
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	f003 030c 	and.w	r3, r3, #12
 80012f0:	2b08      	cmp	r3, #8
 80012f2:	d00d      	beq.n	8001310 <HAL_RCC_GetSysClockFreq+0x40>
 80012f4:	2b08      	cmp	r3, #8
 80012f6:	f200 80a1 	bhi.w	800143c <HAL_RCC_GetSysClockFreq+0x16c>
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d002      	beq.n	8001304 <HAL_RCC_GetSysClockFreq+0x34>
 80012fe:	2b04      	cmp	r3, #4
 8001300:	d003      	beq.n	800130a <HAL_RCC_GetSysClockFreq+0x3a>
 8001302:	e09b      	b.n	800143c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001304:	4b53      	ldr	r3, [pc, #332]	; (8001454 <HAL_RCC_GetSysClockFreq+0x184>)
 8001306:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001308:	e09b      	b.n	8001442 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800130a:	4b53      	ldr	r3, [pc, #332]	; (8001458 <HAL_RCC_GetSysClockFreq+0x188>)
 800130c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800130e:	e098      	b.n	8001442 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001310:	4b4f      	ldr	r3, [pc, #316]	; (8001450 <HAL_RCC_GetSysClockFreq+0x180>)
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001318:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800131a:	4b4d      	ldr	r3, [pc, #308]	; (8001450 <HAL_RCC_GetSysClockFreq+0x180>)
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d028      	beq.n	8001378 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001326:	4b4a      	ldr	r3, [pc, #296]	; (8001450 <HAL_RCC_GetSysClockFreq+0x180>)
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	099b      	lsrs	r3, r3, #6
 800132c:	2200      	movs	r2, #0
 800132e:	623b      	str	r3, [r7, #32]
 8001330:	627a      	str	r2, [r7, #36]	; 0x24
 8001332:	6a3b      	ldr	r3, [r7, #32]
 8001334:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001338:	2100      	movs	r1, #0
 800133a:	4b47      	ldr	r3, [pc, #284]	; (8001458 <HAL_RCC_GetSysClockFreq+0x188>)
 800133c:	fb03 f201 	mul.w	r2, r3, r1
 8001340:	2300      	movs	r3, #0
 8001342:	fb00 f303 	mul.w	r3, r0, r3
 8001346:	4413      	add	r3, r2
 8001348:	4a43      	ldr	r2, [pc, #268]	; (8001458 <HAL_RCC_GetSysClockFreq+0x188>)
 800134a:	fba0 1202 	umull	r1, r2, r0, r2
 800134e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001350:	460a      	mov	r2, r1
 8001352:	62ba      	str	r2, [r7, #40]	; 0x28
 8001354:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001356:	4413      	add	r3, r2
 8001358:	62fb      	str	r3, [r7, #44]	; 0x2c
 800135a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800135c:	2200      	movs	r2, #0
 800135e:	61bb      	str	r3, [r7, #24]
 8001360:	61fa      	str	r2, [r7, #28]
 8001362:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001366:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800136a:	f7fe ff39 	bl	80001e0 <__aeabi_uldivmod>
 800136e:	4602      	mov	r2, r0
 8001370:	460b      	mov	r3, r1
 8001372:	4613      	mov	r3, r2
 8001374:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001376:	e053      	b.n	8001420 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001378:	4b35      	ldr	r3, [pc, #212]	; (8001450 <HAL_RCC_GetSysClockFreq+0x180>)
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	099b      	lsrs	r3, r3, #6
 800137e:	2200      	movs	r2, #0
 8001380:	613b      	str	r3, [r7, #16]
 8001382:	617a      	str	r2, [r7, #20]
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800138a:	f04f 0b00 	mov.w	fp, #0
 800138e:	4652      	mov	r2, sl
 8001390:	465b      	mov	r3, fp
 8001392:	f04f 0000 	mov.w	r0, #0
 8001396:	f04f 0100 	mov.w	r1, #0
 800139a:	0159      	lsls	r1, r3, #5
 800139c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80013a0:	0150      	lsls	r0, r2, #5
 80013a2:	4602      	mov	r2, r0
 80013a4:	460b      	mov	r3, r1
 80013a6:	ebb2 080a 	subs.w	r8, r2, sl
 80013aa:	eb63 090b 	sbc.w	r9, r3, fp
 80013ae:	f04f 0200 	mov.w	r2, #0
 80013b2:	f04f 0300 	mov.w	r3, #0
 80013b6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80013ba:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80013be:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80013c2:	ebb2 0408 	subs.w	r4, r2, r8
 80013c6:	eb63 0509 	sbc.w	r5, r3, r9
 80013ca:	f04f 0200 	mov.w	r2, #0
 80013ce:	f04f 0300 	mov.w	r3, #0
 80013d2:	00eb      	lsls	r3, r5, #3
 80013d4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80013d8:	00e2      	lsls	r2, r4, #3
 80013da:	4614      	mov	r4, r2
 80013dc:	461d      	mov	r5, r3
 80013de:	eb14 030a 	adds.w	r3, r4, sl
 80013e2:	603b      	str	r3, [r7, #0]
 80013e4:	eb45 030b 	adc.w	r3, r5, fp
 80013e8:	607b      	str	r3, [r7, #4]
 80013ea:	f04f 0200 	mov.w	r2, #0
 80013ee:	f04f 0300 	mov.w	r3, #0
 80013f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80013f6:	4629      	mov	r1, r5
 80013f8:	028b      	lsls	r3, r1, #10
 80013fa:	4621      	mov	r1, r4
 80013fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001400:	4621      	mov	r1, r4
 8001402:	028a      	lsls	r2, r1, #10
 8001404:	4610      	mov	r0, r2
 8001406:	4619      	mov	r1, r3
 8001408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800140a:	2200      	movs	r2, #0
 800140c:	60bb      	str	r3, [r7, #8]
 800140e:	60fa      	str	r2, [r7, #12]
 8001410:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001414:	f7fe fee4 	bl	80001e0 <__aeabi_uldivmod>
 8001418:	4602      	mov	r2, r0
 800141a:	460b      	mov	r3, r1
 800141c:	4613      	mov	r3, r2
 800141e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001420:	4b0b      	ldr	r3, [pc, #44]	; (8001450 <HAL_RCC_GetSysClockFreq+0x180>)
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	0c1b      	lsrs	r3, r3, #16
 8001426:	f003 0303 	and.w	r3, r3, #3
 800142a:	3301      	adds	r3, #1
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001430:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001434:	fbb2 f3f3 	udiv	r3, r2, r3
 8001438:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800143a:	e002      	b.n	8001442 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800143c:	4b05      	ldr	r3, [pc, #20]	; (8001454 <HAL_RCC_GetSysClockFreq+0x184>)
 800143e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001440:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001444:	4618      	mov	r0, r3
 8001446:	3740      	adds	r7, #64	; 0x40
 8001448:	46bd      	mov	sp, r7
 800144a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800144e:	bf00      	nop
 8001450:	40023800 	.word	0x40023800
 8001454:	00f42400 	.word	0x00f42400
 8001458:	017d7840 	.word	0x017d7840

0800145c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001460:	4b03      	ldr	r3, [pc, #12]	; (8001470 <HAL_RCC_GetHCLKFreq+0x14>)
 8001462:	681b      	ldr	r3, [r3, #0]
}
 8001464:	4618      	mov	r0, r3
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	20000000 	.word	0x20000000

08001474 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001478:	f7ff fff0 	bl	800145c <HAL_RCC_GetHCLKFreq>
 800147c:	4602      	mov	r2, r0
 800147e:	4b05      	ldr	r3, [pc, #20]	; (8001494 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	0b5b      	lsrs	r3, r3, #13
 8001484:	f003 0307 	and.w	r3, r3, #7
 8001488:	4903      	ldr	r1, [pc, #12]	; (8001498 <HAL_RCC_GetPCLK2Freq+0x24>)
 800148a:	5ccb      	ldrb	r3, [r1, r3]
 800148c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001490:	4618      	mov	r0, r3
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40023800 	.word	0x40023800
 8001498:	080045c8 	.word	0x080045c8

0800149c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	220f      	movs	r2, #15
 80014aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80014ac:	4b12      	ldr	r3, [pc, #72]	; (80014f8 <HAL_RCC_GetClockConfig+0x5c>)
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	f003 0203 	and.w	r2, r3, #3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80014b8:	4b0f      	ldr	r3, [pc, #60]	; (80014f8 <HAL_RCC_GetClockConfig+0x5c>)
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80014c4:	4b0c      	ldr	r3, [pc, #48]	; (80014f8 <HAL_RCC_GetClockConfig+0x5c>)
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80014d0:	4b09      	ldr	r3, [pc, #36]	; (80014f8 <HAL_RCC_GetClockConfig+0x5c>)
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	08db      	lsrs	r3, r3, #3
 80014d6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80014de:	4b07      	ldr	r3, [pc, #28]	; (80014fc <HAL_RCC_GetClockConfig+0x60>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 0207 	and.w	r2, r3, #7
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	601a      	str	r2, [r3, #0]
}
 80014ea:	bf00      	nop
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	40023800 	.word	0x40023800
 80014fc:	40023c00 	.word	0x40023c00

08001500 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d101      	bne.n	8001512 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e041      	b.n	8001596 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001518:	b2db      	uxtb	r3, r3
 800151a:	2b00      	cmp	r3, #0
 800151c:	d106      	bne.n	800152c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2200      	movs	r2, #0
 8001522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f000 f839 	bl	800159e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2202      	movs	r2, #2
 8001530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	3304      	adds	r3, #4
 800153c:	4619      	mov	r1, r3
 800153e:	4610      	mov	r0, r2
 8001540:	f000 f9ca 	bl	80018d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2201      	movs	r2, #1
 8001548:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2201      	movs	r2, #1
 8001550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2201      	movs	r2, #1
 8001558:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2201      	movs	r2, #1
 8001560:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2201      	movs	r2, #1
 8001568:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2201      	movs	r2, #1
 8001570:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2201      	movs	r2, #1
 8001578:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2201      	movs	r2, #1
 8001580:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2201      	movs	r2, #1
 8001588:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2201      	movs	r2, #1
 8001590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800159e:	b480      	push	{r7}
 80015a0:	b083      	sub	sp, #12
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80015a6:	bf00      	nop
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
	...

080015b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d001      	beq.n	80015cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e044      	b.n	8001656 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2202      	movs	r2, #2
 80015d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	68da      	ldr	r2, [r3, #12]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f042 0201 	orr.w	r2, r2, #1
 80015e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a1e      	ldr	r2, [pc, #120]	; (8001664 <HAL_TIM_Base_Start_IT+0xb0>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d018      	beq.n	8001620 <HAL_TIM_Base_Start_IT+0x6c>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015f6:	d013      	beq.n	8001620 <HAL_TIM_Base_Start_IT+0x6c>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a1a      	ldr	r2, [pc, #104]	; (8001668 <HAL_TIM_Base_Start_IT+0xb4>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d00e      	beq.n	8001620 <HAL_TIM_Base_Start_IT+0x6c>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a19      	ldr	r2, [pc, #100]	; (800166c <HAL_TIM_Base_Start_IT+0xb8>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d009      	beq.n	8001620 <HAL_TIM_Base_Start_IT+0x6c>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a17      	ldr	r2, [pc, #92]	; (8001670 <HAL_TIM_Base_Start_IT+0xbc>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d004      	beq.n	8001620 <HAL_TIM_Base_Start_IT+0x6c>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a16      	ldr	r2, [pc, #88]	; (8001674 <HAL_TIM_Base_Start_IT+0xc0>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d111      	bne.n	8001644 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	f003 0307 	and.w	r3, r3, #7
 800162a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	2b06      	cmp	r3, #6
 8001630:	d010      	beq.n	8001654 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f042 0201 	orr.w	r2, r2, #1
 8001640:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001642:	e007      	b.n	8001654 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f042 0201 	orr.w	r2, r2, #1
 8001652:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001654:	2300      	movs	r3, #0
}
 8001656:	4618      	mov	r0, r3
 8001658:	3714      	adds	r7, #20
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	40010000 	.word	0x40010000
 8001668:	40000400 	.word	0x40000400
 800166c:	40000800 	.word	0x40000800
 8001670:	40000c00 	.word	0x40000c00
 8001674:	40014000 	.word	0x40014000

08001678 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	691b      	ldr	r3, [r3, #16]
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	2b02      	cmp	r3, #2
 800168c:	d122      	bne.n	80016d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	f003 0302 	and.w	r3, r3, #2
 8001698:	2b02      	cmp	r3, #2
 800169a:	d11b      	bne.n	80016d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f06f 0202 	mvn.w	r2, #2
 80016a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2201      	movs	r2, #1
 80016aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	699b      	ldr	r3, [r3, #24]
 80016b2:	f003 0303 	and.w	r3, r3, #3
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d003      	beq.n	80016c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f000 f8ee 	bl	800189c <HAL_TIM_IC_CaptureCallback>
 80016c0:	e005      	b.n	80016ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f000 f8e0 	bl	8001888 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f000 f8f1 	bl	80018b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2200      	movs	r2, #0
 80016d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	691b      	ldr	r3, [r3, #16]
 80016da:	f003 0304 	and.w	r3, r3, #4
 80016de:	2b04      	cmp	r3, #4
 80016e0:	d122      	bne.n	8001728 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	f003 0304 	and.w	r3, r3, #4
 80016ec:	2b04      	cmp	r3, #4
 80016ee:	d11b      	bne.n	8001728 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f06f 0204 	mvn.w	r2, #4
 80016f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2202      	movs	r2, #2
 80016fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	699b      	ldr	r3, [r3, #24]
 8001706:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800170a:	2b00      	cmp	r3, #0
 800170c:	d003      	beq.n	8001716 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f000 f8c4 	bl	800189c <HAL_TIM_IC_CaptureCallback>
 8001714:	e005      	b.n	8001722 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f000 f8b6 	bl	8001888 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f000 f8c7 	bl	80018b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2200      	movs	r2, #0
 8001726:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	691b      	ldr	r3, [r3, #16]
 800172e:	f003 0308 	and.w	r3, r3, #8
 8001732:	2b08      	cmp	r3, #8
 8001734:	d122      	bne.n	800177c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	f003 0308 	and.w	r3, r3, #8
 8001740:	2b08      	cmp	r3, #8
 8001742:	d11b      	bne.n	800177c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f06f 0208 	mvn.w	r2, #8
 800174c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2204      	movs	r2, #4
 8001752:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	69db      	ldr	r3, [r3, #28]
 800175a:	f003 0303 	and.w	r3, r3, #3
 800175e:	2b00      	cmp	r3, #0
 8001760:	d003      	beq.n	800176a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f000 f89a 	bl	800189c <HAL_TIM_IC_CaptureCallback>
 8001768:	e005      	b.n	8001776 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f000 f88c 	bl	8001888 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f000 f89d 	bl	80018b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2200      	movs	r2, #0
 800177a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	691b      	ldr	r3, [r3, #16]
 8001782:	f003 0310 	and.w	r3, r3, #16
 8001786:	2b10      	cmp	r3, #16
 8001788:	d122      	bne.n	80017d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	f003 0310 	and.w	r3, r3, #16
 8001794:	2b10      	cmp	r3, #16
 8001796:	d11b      	bne.n	80017d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f06f 0210 	mvn.w	r2, #16
 80017a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2208      	movs	r2, #8
 80017a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	69db      	ldr	r3, [r3, #28]
 80017ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d003      	beq.n	80017be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f000 f870 	bl	800189c <HAL_TIM_IC_CaptureCallback>
 80017bc:	e005      	b.n	80017ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f000 f862 	bl	8001888 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f000 f873 	bl	80018b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2200      	movs	r2, #0
 80017ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	691b      	ldr	r3, [r3, #16]
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d10e      	bne.n	80017fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	f003 0301 	and.w	r3, r3, #1
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d107      	bne.n	80017fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f06f 0201 	mvn.w	r2, #1
 80017f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f7fe ff44 	bl	8000684 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	691b      	ldr	r3, [r3, #16]
 8001802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001806:	2b80      	cmp	r3, #128	; 0x80
 8001808:	d10e      	bne.n	8001828 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001814:	2b80      	cmp	r3, #128	; 0x80
 8001816:	d107      	bne.n	8001828 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001820:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f000 f8e2 	bl	80019ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	691b      	ldr	r3, [r3, #16]
 800182e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001832:	2b40      	cmp	r3, #64	; 0x40
 8001834:	d10e      	bne.n	8001854 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001840:	2b40      	cmp	r3, #64	; 0x40
 8001842:	d107      	bne.n	8001854 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800184c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f000 f838 	bl	80018c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	691b      	ldr	r3, [r3, #16]
 800185a:	f003 0320 	and.w	r3, r3, #32
 800185e:	2b20      	cmp	r3, #32
 8001860:	d10e      	bne.n	8001880 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	f003 0320 	and.w	r3, r3, #32
 800186c:	2b20      	cmp	r3, #32
 800186e:	d107      	bne.n	8001880 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f06f 0220 	mvn.w	r2, #32
 8001878:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f000 f8ac 	bl	80019d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001880:	bf00      	nop
 8001882:	3708      	adds	r7, #8
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}

08001888 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001890:	bf00      	nop
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80018a4:	bf00      	nop
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80018b8:	bf00      	nop
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80018cc:	bf00      	nop
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80018d8:	b480      	push	{r7}
 80018da:	b085      	sub	sp, #20
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	4a34      	ldr	r2, [pc, #208]	; (80019bc <TIM_Base_SetConfig+0xe4>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d00f      	beq.n	8001910 <TIM_Base_SetConfig+0x38>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018f6:	d00b      	beq.n	8001910 <TIM_Base_SetConfig+0x38>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	4a31      	ldr	r2, [pc, #196]	; (80019c0 <TIM_Base_SetConfig+0xe8>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d007      	beq.n	8001910 <TIM_Base_SetConfig+0x38>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	4a30      	ldr	r2, [pc, #192]	; (80019c4 <TIM_Base_SetConfig+0xec>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d003      	beq.n	8001910 <TIM_Base_SetConfig+0x38>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	4a2f      	ldr	r2, [pc, #188]	; (80019c8 <TIM_Base_SetConfig+0xf0>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d108      	bne.n	8001922 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001916:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	68fa      	ldr	r2, [r7, #12]
 800191e:	4313      	orrs	r3, r2
 8001920:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4a25      	ldr	r2, [pc, #148]	; (80019bc <TIM_Base_SetConfig+0xe4>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d01b      	beq.n	8001962 <TIM_Base_SetConfig+0x8a>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001930:	d017      	beq.n	8001962 <TIM_Base_SetConfig+0x8a>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4a22      	ldr	r2, [pc, #136]	; (80019c0 <TIM_Base_SetConfig+0xe8>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d013      	beq.n	8001962 <TIM_Base_SetConfig+0x8a>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4a21      	ldr	r2, [pc, #132]	; (80019c4 <TIM_Base_SetConfig+0xec>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d00f      	beq.n	8001962 <TIM_Base_SetConfig+0x8a>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a20      	ldr	r2, [pc, #128]	; (80019c8 <TIM_Base_SetConfig+0xf0>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d00b      	beq.n	8001962 <TIM_Base_SetConfig+0x8a>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a1f      	ldr	r2, [pc, #124]	; (80019cc <TIM_Base_SetConfig+0xf4>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d007      	beq.n	8001962 <TIM_Base_SetConfig+0x8a>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a1e      	ldr	r2, [pc, #120]	; (80019d0 <TIM_Base_SetConfig+0xf8>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d003      	beq.n	8001962 <TIM_Base_SetConfig+0x8a>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a1d      	ldr	r2, [pc, #116]	; (80019d4 <TIM_Base_SetConfig+0xfc>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d108      	bne.n	8001974 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001968:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	68db      	ldr	r3, [r3, #12]
 800196e:	68fa      	ldr	r2, [r7, #12]
 8001970:	4313      	orrs	r3, r2
 8001972:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	695b      	ldr	r3, [r3, #20]
 800197e:	4313      	orrs	r3, r2
 8001980:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	68fa      	ldr	r2, [r7, #12]
 8001986:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	689a      	ldr	r2, [r3, #8]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	4a08      	ldr	r2, [pc, #32]	; (80019bc <TIM_Base_SetConfig+0xe4>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d103      	bne.n	80019a8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	691a      	ldr	r2, [r3, #16]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2201      	movs	r2, #1
 80019ac:	615a      	str	r2, [r3, #20]
}
 80019ae:	bf00      	nop
 80019b0:	3714      	adds	r7, #20
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	40010000 	.word	0x40010000
 80019c0:	40000400 	.word	0x40000400
 80019c4:	40000800 	.word	0x40000800
 80019c8:	40000c00 	.word	0x40000c00
 80019cc:	40014000 	.word	0x40014000
 80019d0:	40014400 	.word	0x40014400
 80019d4:	40014800 	.word	0x40014800

080019d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80019e0:	bf00      	nop
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80019f4:	bf00      	nop
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr

08001a00 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f103 0208 	add.w	r2, r3, #8
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f04f 32ff 	mov.w	r2, #4294967295
 8001a18:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	f103 0208 	add.w	r2, r3, #8
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f103 0208 	add.w	r2, r3, #8
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001a34:	bf00      	nop
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001a4e:	bf00      	nop
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr

08001a5a <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	b085      	sub	sp, #20
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
 8001a62:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a70:	d103      	bne.n	8001a7a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	691b      	ldr	r3, [r3, #16]
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	e00c      	b.n	8001a94 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	3308      	adds	r3, #8
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	e002      	b.n	8001a88 <vListInsert+0x2e>
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	68ba      	ldr	r2, [r7, #8]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d2f6      	bcs.n	8001a82 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	685a      	ldr	r2, [r3, #4]
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	683a      	ldr	r2, [r7, #0]
 8001aa2:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	68fa      	ldr	r2, [r7, #12]
 8001aa8:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	683a      	ldr	r2, [r7, #0]
 8001aae:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	1c5a      	adds	r2, r3, #1
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	601a      	str	r2, [r3, #0]
}
 8001ac0:	bf00      	nop
 8001ac2:	3714      	adds	r7, #20
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001acc:	b480      	push	{r7}
 8001ace:	b085      	sub	sp, #20
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	691b      	ldr	r3, [r3, #16]
 8001ad8:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	6892      	ldr	r2, [r2, #8]
 8001ae2:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	6852      	ldr	r2, [r2, #4]
 8001aec:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d103      	bne.n	8001b00 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	689a      	ldr	r2, [r3, #8]
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	1e5a      	subs	r2, r3, #1
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3714      	adds	r7, #20
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d10a      	bne.n	8001b4e <xQueueGenericReset+0x2e>
        __asm volatile
 8001b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b3c:	f383 8811 	msr	BASEPRI, r3
 8001b40:	f3bf 8f6f 	isb	sy
 8001b44:	f3bf 8f4f 	dsb	sy
 8001b48:	60fb      	str	r3, [r7, #12]
    }
 8001b4a:	bf00      	nop
 8001b4c:	e7fe      	b.n	8001b4c <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d052      	beq.n	8001bfa <xQueueGenericReset+0xda>
        ( pxQueue->uxLength >= 1U ) &&
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d04e      	beq.n	8001bfa <xQueueGenericReset+0xda>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b64:	2100      	movs	r1, #0
 8001b66:	fba3 2302 	umull	r2, r3, r3, r2
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d000      	beq.n	8001b70 <xQueueGenericReset+0x50>
 8001b6e:	2101      	movs	r1, #1
 8001b70:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d141      	bne.n	8001bfa <xQueueGenericReset+0xda>
    {
        taskENTER_CRITICAL();
 8001b76:	f001 fd77 	bl	8003668 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b82:	6939      	ldr	r1, [r7, #16]
 8001b84:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001b86:	fb01 f303 	mul.w	r3, r1, r3
 8001b8a:	441a      	add	r2, r3
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	2200      	movs	r2, #0
 8001b94:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	6939      	ldr	r1, [r7, #16]
 8001baa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001bac:	fb01 f303 	mul.w	r3, r1, r3
 8001bb0:	441a      	add	r2, r3
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	22ff      	movs	r2, #255	; 0xff
 8001bba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	22ff      	movs	r2, #255	; 0xff
 8001bc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d109      	bne.n	8001be0 <xQueueGenericReset+0xc0>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	691b      	ldr	r3, [r3, #16]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d00f      	beq.n	8001bf4 <xQueueGenericReset+0xd4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	3310      	adds	r3, #16
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f000 feed 	bl	80029b8 <xTaskRemoveFromEventList>
 8001bde:	e009      	b.n	8001bf4 <xQueueGenericReset+0xd4>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	3310      	adds	r3, #16
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff ff0b 	bl	8001a00 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	3324      	adds	r3, #36	; 0x24
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7ff ff06 	bl	8001a00 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8001bf4:	f001 fd68 	bl	80036c8 <vPortExitCritical>
 8001bf8:	e001      	b.n	8001bfe <xQueueGenericReset+0xde>
    }
    else
    {
        xReturn = pdFAIL;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d10a      	bne.n	8001c1a <xQueueGenericReset+0xfa>
        __asm volatile
 8001c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c08:	f383 8811 	msr	BASEPRI, r3
 8001c0c:	f3bf 8f6f 	isb	sy
 8001c10:	f3bf 8f4f 	dsb	sy
 8001c14:	60bb      	str	r3, [r7, #8]
    }
 8001c16:	bf00      	nop
 8001c18:	e7fe      	b.n	8001c18 <xQueueGenericReset+0xf8>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8001c1a:	697b      	ldr	r3, [r7, #20]
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3718      	adds	r7, #24
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b08a      	sub	sp, #40	; 0x28
 8001c28:	af02      	add	r7, sp, #8
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	4613      	mov	r3, r2
 8001c30:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8001c32:	2300      	movs	r3, #0
 8001c34:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d02e      	beq.n	8001c9a <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	68ba      	ldr	r2, [r7, #8]
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	fba3 2302 	umull	r2, r3, r3, r2
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d000      	beq.n	8001c4c <xQueueGenericCreate+0x28>
 8001c4a:	2101      	movs	r1, #1
 8001c4c:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d123      	bne.n	8001c9a <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	68ba      	ldr	r2, [r7, #8]
 8001c56:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001c5a:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8001c5e:	d81c      	bhi.n	8001c9a <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	68ba      	ldr	r2, [r7, #8]
 8001c64:	fb02 f303 	mul.w	r3, r2, r3
 8001c68:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	3350      	adds	r3, #80	; 0x50
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f001 fddc 	bl	800382c <pvPortMalloc>
 8001c74:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d01c      	beq.n	8001cb6 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	3350      	adds	r3, #80	; 0x50
 8001c84:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001c86:	79fa      	ldrb	r2, [r7, #7]
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	9300      	str	r3, [sp, #0]
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	697a      	ldr	r2, [r7, #20]
 8001c90:	68b9      	ldr	r1, [r7, #8]
 8001c92:	68f8      	ldr	r0, [r7, #12]
 8001c94:	f000 f814 	bl	8001cc0 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8001c98:	e00d      	b.n	8001cb6 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d10a      	bne.n	8001cb6 <xQueueGenericCreate+0x92>
        __asm volatile
 8001ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ca4:	f383 8811 	msr	BASEPRI, r3
 8001ca8:	f3bf 8f6f 	isb	sy
 8001cac:	f3bf 8f4f 	dsb	sy
 8001cb0:	613b      	str	r3, [r7, #16]
    }
 8001cb2:	bf00      	nop
 8001cb4:	e7fe      	b.n	8001cb4 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8001cb6:	69fb      	ldr	r3, [r7, #28]
    }
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3720      	adds	r7, #32
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	60b9      	str	r1, [r7, #8]
 8001cca:	607a      	str	r2, [r7, #4]
 8001ccc:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d103      	bne.n	8001cdc <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	69ba      	ldr	r2, [r7, #24]
 8001cd8:	601a      	str	r2, [r3, #0]
 8001cda:	e002      	b.n	8001ce2 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	68fa      	ldr	r2, [r7, #12]
 8001ce6:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	68ba      	ldr	r2, [r7, #8]
 8001cec:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001cee:	2101      	movs	r1, #1
 8001cf0:	69b8      	ldr	r0, [r7, #24]
 8001cf2:	f7ff ff15 	bl	8001b20 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	78fa      	ldrb	r2, [r7, #3]
 8001cfa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8001cfe:	bf00      	nop
 8001d00:	3710      	adds	r7, #16
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
	...

08001d08 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b08c      	sub	sp, #48	; 0x30
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	60f8      	str	r0, [r7, #12]
 8001d10:	60b9      	str	r1, [r7, #8]
 8001d12:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8001d14:	2300      	movs	r3, #0
 8001d16:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8001d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d10a      	bne.n	8001d38 <xQueueReceive+0x30>
        __asm volatile
 8001d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d26:	f383 8811 	msr	BASEPRI, r3
 8001d2a:	f3bf 8f6f 	isb	sy
 8001d2e:	f3bf 8f4f 	dsb	sy
 8001d32:	623b      	str	r3, [r7, #32]
    }
 8001d34:	bf00      	nop
 8001d36:	e7fe      	b.n	8001d36 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d103      	bne.n	8001d46 <xQueueReceive+0x3e>
 8001d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d101      	bne.n	8001d4a <xQueueReceive+0x42>
 8001d46:	2301      	movs	r3, #1
 8001d48:	e000      	b.n	8001d4c <xQueueReceive+0x44>
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d10a      	bne.n	8001d66 <xQueueReceive+0x5e>
        __asm volatile
 8001d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d54:	f383 8811 	msr	BASEPRI, r3
 8001d58:	f3bf 8f6f 	isb	sy
 8001d5c:	f3bf 8f4f 	dsb	sy
 8001d60:	61fb      	str	r3, [r7, #28]
    }
 8001d62:	bf00      	nop
 8001d64:	e7fe      	b.n	8001d64 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001d66:	f001 f831 	bl	8002dcc <xTaskGetSchedulerState>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d102      	bne.n	8001d76 <xQueueReceive+0x6e>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d101      	bne.n	8001d7a <xQueueReceive+0x72>
 8001d76:	2301      	movs	r3, #1
 8001d78:	e000      	b.n	8001d7c <xQueueReceive+0x74>
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d10a      	bne.n	8001d96 <xQueueReceive+0x8e>
        __asm volatile
 8001d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d84:	f383 8811 	msr	BASEPRI, r3
 8001d88:	f3bf 8f6f 	isb	sy
 8001d8c:	f3bf 8f4f 	dsb	sy
 8001d90:	61bb      	str	r3, [r7, #24]
    }
 8001d92:	bf00      	nop
 8001d94:	e7fe      	b.n	8001d94 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001d96:	f001 fc67 	bl	8003668 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d9e:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d014      	beq.n	8001dd0 <xQueueReceive+0xc8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001da6:	68b9      	ldr	r1, [r7, #8]
 8001da8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001daa:	f000 f881 	bl	8001eb0 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db0:	1e5a      	subs	r2, r3, #1
 8001db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001db4:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001db8:	691b      	ldr	r3, [r3, #16]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d004      	beq.n	8001dc8 <xQueueReceive+0xc0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dc0:	3310      	adds	r3, #16
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f000 fdf8 	bl	80029b8 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8001dc8:	f001 fc7e 	bl	80036c8 <vPortExitCritical>
                return pdPASS;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e069      	b.n	8001ea4 <xQueueReceive+0x19c>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d103      	bne.n	8001dde <xQueueReceive+0xd6>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8001dd6:	f001 fc77 	bl	80036c8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	e062      	b.n	8001ea4 <xQueueReceive+0x19c>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d106      	bne.n	8001df2 <xQueueReceive+0xea>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001de4:	f107 0310 	add.w	r3, r7, #16
 8001de8:	4618      	mov	r0, r3
 8001dea:	f000 febb 	bl	8002b64 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001dee:	2301      	movs	r3, #1
 8001df0:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001df2:	f001 fc69 	bl	80036c8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001df6:	f000 fb19 	bl	800242c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001dfa:	f001 fc35 	bl	8003668 <vPortEnterCritical>
 8001dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001e04:	b25b      	sxtb	r3, r3
 8001e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e0a:	d103      	bne.n	8001e14 <xQueueReceive+0x10c>
 8001e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e1a:	b25b      	sxtb	r3, r3
 8001e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e20:	d103      	bne.n	8001e2a <xQueueReceive+0x122>
 8001e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e24:	2200      	movs	r2, #0
 8001e26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001e2a:	f001 fc4d 	bl	80036c8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001e2e:	1d3a      	adds	r2, r7, #4
 8001e30:	f107 0310 	add.w	r3, r7, #16
 8001e34:	4611      	mov	r1, r2
 8001e36:	4618      	mov	r0, r3
 8001e38:	f000 feaa 	bl	8002b90 <xTaskCheckForTimeOut>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d123      	bne.n	8001e8a <xQueueReceive+0x182>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001e42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001e44:	f000 f8ac 	bl	8001fa0 <prvIsQueueEmpty>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d017      	beq.n	8001e7e <xQueueReceive+0x176>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e50:	3324      	adds	r3, #36	; 0x24
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	4611      	mov	r1, r2
 8001e56:	4618      	mov	r0, r3
 8001e58:	f000 fd44 	bl	80028e4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8001e5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001e5e:	f000 f84d 	bl	8001efc <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8001e62:	f000 faf1 	bl	8002448 <xTaskResumeAll>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d194      	bne.n	8001d96 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8001e6c:	4b0f      	ldr	r3, [pc, #60]	; (8001eac <xQueueReceive+0x1a4>)
 8001e6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	f3bf 8f4f 	dsb	sy
 8001e78:	f3bf 8f6f 	isb	sy
 8001e7c:	e78b      	b.n	8001d96 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8001e7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001e80:	f000 f83c 	bl	8001efc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001e84:	f000 fae0 	bl	8002448 <xTaskResumeAll>
 8001e88:	e785      	b.n	8001d96 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8001e8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001e8c:	f000 f836 	bl	8001efc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001e90:	f000 fada 	bl	8002448 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001e94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001e96:	f000 f883 	bl	8001fa0 <prvIsQueueEmpty>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	f43f af7a 	beq.w	8001d96 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8001ea2:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3730      	adds	r7, #48	; 0x30
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	e000ed04 	.word	0xe000ed04

08001eb0 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d018      	beq.n	8001ef4 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	68da      	ldr	r2, [r3, #12]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eca:	441a      	add	r2, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	68da      	ldr	r2, [r3, #12]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d303      	bcc.n	8001ee4 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	68d9      	ldr	r1, [r3, #12]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eec:	461a      	mov	r2, r3
 8001eee:	6838      	ldr	r0, [r7, #0]
 8001ef0:	f002 f8d3 	bl	800409a <memcpy>
    }
}
 8001ef4:	bf00      	nop
 8001ef6:	3708      	adds	r7, #8
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}

08001efc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8001f04:	f001 fbb0 	bl	8003668 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f0e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001f10:	e011      	b.n	8001f36 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d012      	beq.n	8001f40 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	3324      	adds	r3, #36	; 0x24
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f000 fd4a 	bl	80029b8 <xTaskRemoveFromEventList>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8001f2a:	f000 fe97 	bl	8002c5c <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8001f2e:	7bfb      	ldrb	r3, [r7, #15]
 8001f30:	3b01      	subs	r3, #1
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001f36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	dce9      	bgt.n	8001f12 <prvUnlockQueue+0x16>
 8001f3e:	e000      	b.n	8001f42 <prvUnlockQueue+0x46>
                    break;
 8001f40:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	22ff      	movs	r2, #255	; 0xff
 8001f46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8001f4a:	f001 fbbd 	bl	80036c8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8001f4e:	f001 fb8b 	bl	8003668 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001f58:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001f5a:	e011      	b.n	8001f80 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	691b      	ldr	r3, [r3, #16]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d012      	beq.n	8001f8a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	3310      	adds	r3, #16
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f000 fd25 	bl	80029b8 <xTaskRemoveFromEventList>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8001f74:	f000 fe72 	bl	8002c5c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8001f78:	7bbb      	ldrb	r3, [r7, #14]
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001f80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	dce9      	bgt.n	8001f5c <prvUnlockQueue+0x60>
 8001f88:	e000      	b.n	8001f8c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8001f8a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	22ff      	movs	r2, #255	; 0xff
 8001f90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8001f94:	f001 fb98 	bl	80036c8 <vPortExitCritical>
}
 8001f98:	bf00      	nop
 8001f9a:	3710      	adds	r7, #16
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001fa8:	f001 fb5e 	bl	8003668 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d102      	bne.n	8001fba <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	e001      	b.n	8001fbe <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001fbe:	f001 fb83 	bl	80036c8 <vPortExitCritical>

    return xReturn;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3710      	adds	r7, #16
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8001fcc:	b480      	push	{r7}
 8001fce:	b087      	sub	sp, #28
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d10a      	bne.n	8001ff6 <vQueueAddToRegistry+0x2a>
        __asm volatile
 8001fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fe4:	f383 8811 	msr	BASEPRI, r3
 8001fe8:	f3bf 8f6f 	isb	sy
 8001fec:	f3bf 8f4f 	dsb	sy
 8001ff0:	60fb      	str	r3, [r7, #12]
    }
 8001ff2:	bf00      	nop
 8001ff4:	e7fe      	b.n	8001ff4 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d024      	beq.n	8002046 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	617b      	str	r3, [r7, #20]
 8002000:	e01e      	b.n	8002040 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8002002:	4a18      	ldr	r2, [pc, #96]	; (8002064 <vQueueAddToRegistry+0x98>)
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	00db      	lsls	r3, r3, #3
 8002008:	4413      	add	r3, r2
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	429a      	cmp	r2, r3
 8002010:	d105      	bne.n	800201e <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	00db      	lsls	r3, r3, #3
 8002016:	4a13      	ldr	r2, [pc, #76]	; (8002064 <vQueueAddToRegistry+0x98>)
 8002018:	4413      	add	r3, r2
 800201a:	613b      	str	r3, [r7, #16]
                    break;
 800201c:	e013      	b.n	8002046 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d10a      	bne.n	800203a <vQueueAddToRegistry+0x6e>
 8002024:	4a0f      	ldr	r2, [pc, #60]	; (8002064 <vQueueAddToRegistry+0x98>)
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d104      	bne.n	800203a <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	4a0b      	ldr	r2, [pc, #44]	; (8002064 <vQueueAddToRegistry+0x98>)
 8002036:	4413      	add	r3, r2
 8002038:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	3301      	adds	r3, #1
 800203e:	617b      	str	r3, [r7, #20]
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	2b07      	cmp	r3, #7
 8002044:	d9dd      	bls.n	8002002 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d005      	beq.n	8002058 <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	683a      	ldr	r2, [r7, #0]
 8002050:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8002058:	bf00      	nop
 800205a:	371c      	adds	r7, #28
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr
 8002064:	200000d8 	.word	0x200000d8

08002068 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002068:	b580      	push	{r7, lr}
 800206a:	b086      	sub	sp, #24
 800206c:	af00      	add	r7, sp, #0
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	60b9      	str	r1, [r7, #8]
 8002072:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002078:	f001 faf6 	bl	8003668 <vPortEnterCritical>
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002082:	b25b      	sxtb	r3, r3
 8002084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002088:	d103      	bne.n	8002092 <vQueueWaitForMessageRestricted+0x2a>
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	2200      	movs	r2, #0
 800208e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002098:	b25b      	sxtb	r3, r3
 800209a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800209e:	d103      	bne.n	80020a8 <vQueueWaitForMessageRestricted+0x40>
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	2200      	movs	r2, #0
 80020a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80020a8:	f001 fb0e 	bl	80036c8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d106      	bne.n	80020c2 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	3324      	adds	r3, #36	; 0x24
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	68b9      	ldr	r1, [r7, #8]
 80020bc:	4618      	mov	r0, r3
 80020be:	f000 fc35 	bl	800292c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80020c2:	6978      	ldr	r0, [r7, #20]
 80020c4:	f7ff ff1a 	bl	8001efc <prvUnlockQueue>
    }
 80020c8:	bf00      	nop
 80020ca:	3718      	adds	r7, #24
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b08c      	sub	sp, #48	; 0x30
 80020d4:	af04      	add	r7, sp, #16
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	603b      	str	r3, [r7, #0]
 80020dc:	4613      	mov	r3, r2
 80020de:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80020e0:	88fb      	ldrh	r3, [r7, #6]
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	4618      	mov	r0, r3
 80020e6:	f001 fba1 	bl	800382c <pvPortMalloc>
 80020ea:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d013      	beq.n	800211a <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80020f2:	205c      	movs	r0, #92	; 0x5c
 80020f4:	f001 fb9a 	bl	800382c <pvPortMalloc>
 80020f8:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d008      	beq.n	8002112 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002100:	225c      	movs	r2, #92	; 0x5c
 8002102:	2100      	movs	r1, #0
 8002104:	69f8      	ldr	r0, [r7, #28]
 8002106:	f001 ff53 	bl	8003fb0 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	697a      	ldr	r2, [r7, #20]
 800210e:	631a      	str	r2, [r3, #48]	; 0x30
 8002110:	e005      	b.n	800211e <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002112:	6978      	ldr	r0, [r7, #20]
 8002114:	f001 fc44 	bl	80039a0 <vPortFree>
 8002118:	e001      	b.n	800211e <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800211a:	2300      	movs	r3, #0
 800211c:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d013      	beq.n	800214c <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002124:	88fa      	ldrh	r2, [r7, #6]
 8002126:	2300      	movs	r3, #0
 8002128:	9303      	str	r3, [sp, #12]
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	9302      	str	r3, [sp, #8]
 800212e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002130:	9301      	str	r3, [sp, #4]
 8002132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002134:	9300      	str	r3, [sp, #0]
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	68b9      	ldr	r1, [r7, #8]
 800213a:	68f8      	ldr	r0, [r7, #12]
 800213c:	f000 f80e 	bl	800215c <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002140:	69f8      	ldr	r0, [r7, #28]
 8002142:	f000 f899 	bl	8002278 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002146:	2301      	movs	r3, #1
 8002148:	61bb      	str	r3, [r7, #24]
 800214a:	e002      	b.n	8002152 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800214c:	f04f 33ff 	mov.w	r3, #4294967295
 8002150:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002152:	69bb      	ldr	r3, [r7, #24]
    }
 8002154:	4618      	mov	r0, r3
 8002156:	3720      	adds	r7, #32
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}

0800215c <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b088      	sub	sp, #32
 8002160:	af00      	add	r7, sp, #0
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	60b9      	str	r1, [r7, #8]
 8002166:	607a      	str	r2, [r7, #4]
 8002168:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800216a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800216c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	461a      	mov	r2, r3
 8002174:	21a5      	movs	r1, #165	; 0xa5
 8002176:	f001 ff1b 	bl	8003fb0 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800217a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800217c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002184:	3b01      	subs	r3, #1
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	4413      	add	r3, r2
 800218a:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	f023 0307 	bic.w	r3, r3, #7
 8002192:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	f003 0307 	and.w	r3, r3, #7
 800219a:	2b00      	cmp	r3, #0
 800219c:	d00a      	beq.n	80021b4 <prvInitialiseNewTask+0x58>
        __asm volatile
 800219e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021a2:	f383 8811 	msr	BASEPRI, r3
 80021a6:	f3bf 8f6f 	isb	sy
 80021aa:	f3bf 8f4f 	dsb	sy
 80021ae:	617b      	str	r3, [r7, #20]
    }
 80021b0:	bf00      	nop
 80021b2:	e7fe      	b.n	80021b2 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d01e      	beq.n	80021f8 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80021ba:	2300      	movs	r3, #0
 80021bc:	61fb      	str	r3, [r7, #28]
 80021be:	e012      	b.n	80021e6 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80021c0:	68ba      	ldr	r2, [r7, #8]
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	4413      	add	r3, r2
 80021c6:	7819      	ldrb	r1, [r3, #0]
 80021c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	4413      	add	r3, r2
 80021ce:	3334      	adds	r3, #52	; 0x34
 80021d0:	460a      	mov	r2, r1
 80021d2:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80021d4:	68ba      	ldr	r2, [r7, #8]
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	4413      	add	r3, r2
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d006      	beq.n	80021ee <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	3301      	adds	r3, #1
 80021e4:	61fb      	str	r3, [r7, #28]
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	2b0e      	cmp	r3, #14
 80021ea:	d9e9      	bls.n	80021c0 <prvInitialiseNewTask+0x64>
 80021ec:	e000      	b.n	80021f0 <prvInitialiseNewTask+0x94>
            {
                break;
 80021ee:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80021f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021f2:	2200      	movs	r2, #0
 80021f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80021f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021fa:	2b04      	cmp	r3, #4
 80021fc:	d90a      	bls.n	8002214 <prvInitialiseNewTask+0xb8>
        __asm volatile
 80021fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002202:	f383 8811 	msr	BASEPRI, r3
 8002206:	f3bf 8f6f 	isb	sy
 800220a:	f3bf 8f4f 	dsb	sy
 800220e:	613b      	str	r3, [r7, #16]
    }
 8002210:	bf00      	nop
 8002212:	e7fe      	b.n	8002212 <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002216:	2b04      	cmp	r3, #4
 8002218:	d901      	bls.n	800221e <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800221a:	2304      	movs	r3, #4
 800221c:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800221e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002220:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002222:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002226:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002228:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800222a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800222c:	3304      	adds	r3, #4
 800222e:	4618      	mov	r0, r3
 8002230:	f7ff fc06 	bl	8001a40 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002236:	3318      	adds	r3, #24
 8002238:	4618      	mov	r0, r3
 800223a:	f7ff fc01 	bl	8001a40 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800223e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002240:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002242:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002246:	f1c3 0205 	rsb	r2, r3, #5
 800224a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800224c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800224e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002250:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002252:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002254:	683a      	ldr	r2, [r7, #0]
 8002256:	68f9      	ldr	r1, [r7, #12]
 8002258:	69b8      	ldr	r0, [r7, #24]
 800225a:	f001 f8d9 	bl	8003410 <pxPortInitialiseStack>
 800225e:	4602      	mov	r2, r0
 8002260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002262:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002266:	2b00      	cmp	r3, #0
 8002268:	d002      	beq.n	8002270 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800226a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800226c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800226e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002270:	bf00      	nop
 8002272:	3720      	adds	r7, #32
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002280:	f001 f9f2 	bl	8003668 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002284:	4b3a      	ldr	r3, [pc, #232]	; (8002370 <prvAddNewTaskToReadyList+0xf8>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	3301      	adds	r3, #1
 800228a:	4a39      	ldr	r2, [pc, #228]	; (8002370 <prvAddNewTaskToReadyList+0xf8>)
 800228c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800228e:	4b39      	ldr	r3, [pc, #228]	; (8002374 <prvAddNewTaskToReadyList+0xfc>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d109      	bne.n	80022aa <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002296:	4a37      	ldr	r2, [pc, #220]	; (8002374 <prvAddNewTaskToReadyList+0xfc>)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800229c:	4b34      	ldr	r3, [pc, #208]	; (8002370 <prvAddNewTaskToReadyList+0xf8>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d110      	bne.n	80022c6 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80022a4:	f000 fcf8 	bl	8002c98 <prvInitialiseTaskLists>
 80022a8:	e00d      	b.n	80022c6 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80022aa:	4b33      	ldr	r3, [pc, #204]	; (8002378 <prvAddNewTaskToReadyList+0x100>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d109      	bne.n	80022c6 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80022b2:	4b30      	ldr	r3, [pc, #192]	; (8002374 <prvAddNewTaskToReadyList+0xfc>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022bc:	429a      	cmp	r2, r3
 80022be:	d802      	bhi.n	80022c6 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80022c0:	4a2c      	ldr	r2, [pc, #176]	; (8002374 <prvAddNewTaskToReadyList+0xfc>)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80022c6:	4b2d      	ldr	r3, [pc, #180]	; (800237c <prvAddNewTaskToReadyList+0x104>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	3301      	adds	r3, #1
 80022cc:	4a2b      	ldr	r2, [pc, #172]	; (800237c <prvAddNewTaskToReadyList+0x104>)
 80022ce:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 80022d0:	4b2a      	ldr	r3, [pc, #168]	; (800237c <prvAddNewTaskToReadyList+0x104>)
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	645a      	str	r2, [r3, #68]	; 0x44
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022dc:	2201      	movs	r2, #1
 80022de:	409a      	lsls	r2, r3
 80022e0:	4b27      	ldr	r3, [pc, #156]	; (8002380 <prvAddNewTaskToReadyList+0x108>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	4a26      	ldr	r2, [pc, #152]	; (8002380 <prvAddNewTaskToReadyList+0x108>)
 80022e8:	6013      	str	r3, [r2, #0]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022ee:	4925      	ldr	r1, [pc, #148]	; (8002384 <prvAddNewTaskToReadyList+0x10c>)
 80022f0:	4613      	mov	r3, r2
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	4413      	add	r3, r2
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	440b      	add	r3, r1
 80022fa:	3304      	adds	r3, #4
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	60fb      	str	r3, [r7, #12]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	68fa      	ldr	r2, [r7, #12]
 8002304:	609a      	str	r2, [r3, #8]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	689a      	ldr	r2, [r3, #8]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	60da      	str	r2, [r3, #12]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	3204      	adds	r2, #4
 8002316:	605a      	str	r2, [r3, #4]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	1d1a      	adds	r2, r3, #4
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	609a      	str	r2, [r3, #8]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002324:	4613      	mov	r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	4413      	add	r3, r2
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	4a15      	ldr	r2, [pc, #84]	; (8002384 <prvAddNewTaskToReadyList+0x10c>)
 800232e:	441a      	add	r2, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	615a      	str	r2, [r3, #20]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002338:	4912      	ldr	r1, [pc, #72]	; (8002384 <prvAddNewTaskToReadyList+0x10c>)
 800233a:	4613      	mov	r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	4413      	add	r3, r2
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	440b      	add	r3, r1
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	1c59      	adds	r1, r3, #1
 8002348:	480e      	ldr	r0, [pc, #56]	; (8002384 <prvAddNewTaskToReadyList+0x10c>)
 800234a:	4613      	mov	r3, r2
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	4413      	add	r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	4403      	add	r3, r0
 8002354:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002356:	f001 f9b7 	bl	80036c8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800235a:	4b07      	ldr	r3, [pc, #28]	; (8002378 <prvAddNewTaskToReadyList+0x100>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <prvAddNewTaskToReadyList+0xee>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002362:	4b04      	ldr	r3, [pc, #16]	; (8002374 <prvAddNewTaskToReadyList+0xfc>)
 8002364:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002366:	bf00      	nop
 8002368:	3710      	adds	r7, #16
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	200001f0 	.word	0x200001f0
 8002374:	20000118 	.word	0x20000118
 8002378:	200001fc 	.word	0x200001fc
 800237c:	2000020c 	.word	0x2000020c
 8002380:	200001f8 	.word	0x200001f8
 8002384:	2000011c 	.word	0x2000011c

08002388 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b086      	sub	sp, #24
 800238c:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 800238e:	4b20      	ldr	r3, [pc, #128]	; (8002410 <vTaskStartScheduler+0x88>)
 8002390:	9301      	str	r3, [sp, #4]
 8002392:	2300      	movs	r3, #0
 8002394:	9300      	str	r3, [sp, #0]
 8002396:	2300      	movs	r3, #0
 8002398:	2280      	movs	r2, #128	; 0x80
 800239a:	491e      	ldr	r1, [pc, #120]	; (8002414 <vTaskStartScheduler+0x8c>)
 800239c:	481e      	ldr	r0, [pc, #120]	; (8002418 <vTaskStartScheduler+0x90>)
 800239e:	f7ff fe97 	bl	80020d0 <xTaskCreate>
 80023a2:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d102      	bne.n	80023b0 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 80023aa:	f000 fdad 	bl	8002f08 <xTimerCreateTimerTask>
 80023ae:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d116      	bne.n	80023e4 <vTaskStartScheduler+0x5c>
        __asm volatile
 80023b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023ba:	f383 8811 	msr	BASEPRI, r3
 80023be:	f3bf 8f6f 	isb	sy
 80023c2:	f3bf 8f4f 	dsb	sy
 80023c6:	60bb      	str	r3, [r7, #8]
    }
 80023c8:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80023ca:	4b14      	ldr	r3, [pc, #80]	; (800241c <vTaskStartScheduler+0x94>)
 80023cc:	f04f 32ff 	mov.w	r2, #4294967295
 80023d0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80023d2:	4b13      	ldr	r3, [pc, #76]	; (8002420 <vTaskStartScheduler+0x98>)
 80023d4:	2201      	movs	r2, #1
 80023d6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80023d8:	4b12      	ldr	r3, [pc, #72]	; (8002424 <vTaskStartScheduler+0x9c>)
 80023da:	2200      	movs	r2, #0
 80023dc:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 80023de:	f001 f8a1 	bl	8003524 <xPortStartScheduler>
 80023e2:	e00e      	b.n	8002402 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023ea:	d10a      	bne.n	8002402 <vTaskStartScheduler+0x7a>
        __asm volatile
 80023ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023f0:	f383 8811 	msr	BASEPRI, r3
 80023f4:	f3bf 8f6f 	isb	sy
 80023f8:	f3bf 8f4f 	dsb	sy
 80023fc:	607b      	str	r3, [r7, #4]
    }
 80023fe:	bf00      	nop
 8002400:	e7fe      	b.n	8002400 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002402:	4b09      	ldr	r3, [pc, #36]	; (8002428 <vTaskStartScheduler+0xa0>)
 8002404:	681b      	ldr	r3, [r3, #0]
}
 8002406:	bf00      	nop
 8002408:	3710      	adds	r7, #16
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	20000214 	.word	0x20000214
 8002414:	080045a0 	.word	0x080045a0
 8002418:	08002c75 	.word	0x08002c75
 800241c:	20000210 	.word	0x20000210
 8002420:	200001fc 	.word	0x200001fc
 8002424:	200001f4 	.word	0x200001f4
 8002428:	2000000c 	.word	0x2000000c

0800242c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002430:	4b04      	ldr	r3, [pc, #16]	; (8002444 <vTaskSuspendAll+0x18>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	3301      	adds	r3, #1
 8002436:	4a03      	ldr	r2, [pc, #12]	; (8002444 <vTaskSuspendAll+0x18>)
 8002438:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800243a:	bf00      	nop
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr
 8002444:	20000218 	.word	0x20000218

08002448 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b088      	sub	sp, #32
 800244c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800244e:	2300      	movs	r3, #0
 8002450:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002452:	2300      	movs	r3, #0
 8002454:	617b      	str	r3, [r7, #20]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002456:	4b6b      	ldr	r3, [pc, #428]	; (8002604 <xTaskResumeAll+0x1bc>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d10a      	bne.n	8002474 <xTaskResumeAll+0x2c>
        __asm volatile
 800245e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002462:	f383 8811 	msr	BASEPRI, r3
 8002466:	f3bf 8f6f 	isb	sy
 800246a:	f3bf 8f4f 	dsb	sy
 800246e:	607b      	str	r3, [r7, #4]
    }
 8002470:	bf00      	nop
 8002472:	e7fe      	b.n	8002472 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002474:	f001 f8f8 	bl	8003668 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002478:	4b62      	ldr	r3, [pc, #392]	; (8002604 <xTaskResumeAll+0x1bc>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	3b01      	subs	r3, #1
 800247e:	4a61      	ldr	r2, [pc, #388]	; (8002604 <xTaskResumeAll+0x1bc>)
 8002480:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002482:	4b60      	ldr	r3, [pc, #384]	; (8002604 <xTaskResumeAll+0x1bc>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2b00      	cmp	r3, #0
 8002488:	f040 80b4 	bne.w	80025f4 <xTaskResumeAll+0x1ac>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800248c:	4b5e      	ldr	r3, [pc, #376]	; (8002608 <xTaskResumeAll+0x1c0>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2b00      	cmp	r3, #0
 8002492:	f000 80af 	beq.w	80025f4 <xTaskResumeAll+0x1ac>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002496:	e08a      	b.n	80025ae <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002498:	4b5c      	ldr	r3, [pc, #368]	; (800260c <xTaskResumeAll+0x1c4>)
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a4:	613b      	str	r3, [r7, #16]
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	69db      	ldr	r3, [r3, #28]
 80024aa:	69fa      	ldr	r2, [r7, #28]
 80024ac:	6a12      	ldr	r2, [r2, #32]
 80024ae:	609a      	str	r2, [r3, #8]
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	6a1b      	ldr	r3, [r3, #32]
 80024b4:	69fa      	ldr	r2, [r7, #28]
 80024b6:	69d2      	ldr	r2, [r2, #28]
 80024b8:	605a      	str	r2, [r3, #4]
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	685a      	ldr	r2, [r3, #4]
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	3318      	adds	r3, #24
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d103      	bne.n	80024ce <xTaskResumeAll+0x86>
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	6a1a      	ldr	r2, [r3, #32]
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	605a      	str	r2, [r3, #4]
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	2200      	movs	r2, #0
 80024d2:	629a      	str	r2, [r3, #40]	; 0x28
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	1e5a      	subs	r2, r3, #1
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	695b      	ldr	r3, [r3, #20]
 80024e2:	60fb      	str	r3, [r7, #12]
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	69fa      	ldr	r2, [r7, #28]
 80024ea:	68d2      	ldr	r2, [r2, #12]
 80024ec:	609a      	str	r2, [r3, #8]
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	69fa      	ldr	r2, [r7, #28]
 80024f4:	6892      	ldr	r2, [r2, #8]
 80024f6:	605a      	str	r2, [r3, #4]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	685a      	ldr	r2, [r3, #4]
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	3304      	adds	r3, #4
 8002500:	429a      	cmp	r2, r3
 8002502:	d103      	bne.n	800250c <xTaskResumeAll+0xc4>
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	68da      	ldr	r2, [r3, #12]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	605a      	str	r2, [r3, #4]
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	2200      	movs	r2, #0
 8002510:	615a      	str	r2, [r3, #20]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	1e5a      	subs	r2, r3, #1
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002520:	2201      	movs	r2, #1
 8002522:	409a      	lsls	r2, r3
 8002524:	4b3a      	ldr	r3, [pc, #232]	; (8002610 <xTaskResumeAll+0x1c8>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4313      	orrs	r3, r2
 800252a:	4a39      	ldr	r2, [pc, #228]	; (8002610 <xTaskResumeAll+0x1c8>)
 800252c:	6013      	str	r3, [r2, #0]
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002532:	4938      	ldr	r1, [pc, #224]	; (8002614 <xTaskResumeAll+0x1cc>)
 8002534:	4613      	mov	r3, r2
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	4413      	add	r3, r2
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	440b      	add	r3, r1
 800253e:	3304      	adds	r3, #4
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	60bb      	str	r3, [r7, #8]
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	68ba      	ldr	r2, [r7, #8]
 8002548:	609a      	str	r2, [r3, #8]
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	689a      	ldr	r2, [r3, #8]
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	60da      	str	r2, [r3, #12]
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	69fa      	ldr	r2, [r7, #28]
 8002558:	3204      	adds	r2, #4
 800255a:	605a      	str	r2, [r3, #4]
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	1d1a      	adds	r2, r3, #4
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	609a      	str	r2, [r3, #8]
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002568:	4613      	mov	r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	4413      	add	r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	4a28      	ldr	r2, [pc, #160]	; (8002614 <xTaskResumeAll+0x1cc>)
 8002572:	441a      	add	r2, r3
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	615a      	str	r2, [r3, #20]
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800257c:	4925      	ldr	r1, [pc, #148]	; (8002614 <xTaskResumeAll+0x1cc>)
 800257e:	4613      	mov	r3, r2
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	4413      	add	r3, r2
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	440b      	add	r3, r1
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	1c59      	adds	r1, r3, #1
 800258c:	4821      	ldr	r0, [pc, #132]	; (8002614 <xTaskResumeAll+0x1cc>)
 800258e:	4613      	mov	r3, r2
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	4413      	add	r3, r2
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	4403      	add	r3, r0
 8002598:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800259e:	4b1e      	ldr	r3, [pc, #120]	; (8002618 <xTaskResumeAll+0x1d0>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d302      	bcc.n	80025ae <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 80025a8:	4b1c      	ldr	r3, [pc, #112]	; (800261c <xTaskResumeAll+0x1d4>)
 80025aa:	2201      	movs	r2, #1
 80025ac:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80025ae:	4b17      	ldr	r3, [pc, #92]	; (800260c <xTaskResumeAll+0x1c4>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	f47f af70 	bne.w	8002498 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80025be:	f000 fbe9 	bl	8002d94 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80025c2:	4b17      	ldr	r3, [pc, #92]	; (8002620 <xTaskResumeAll+0x1d8>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	61bb      	str	r3, [r7, #24]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d010      	beq.n	80025f0 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80025ce:	f000 f839 	bl	8002644 <xTaskIncrementTick>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d002      	beq.n	80025de <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 80025d8:	4b10      	ldr	r3, [pc, #64]	; (800261c <xTaskResumeAll+0x1d4>)
 80025da:	2201      	movs	r2, #1
 80025dc:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	3b01      	subs	r3, #1
 80025e2:	61bb      	str	r3, [r7, #24]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d1f1      	bne.n	80025ce <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 80025ea:	4b0d      	ldr	r3, [pc, #52]	; (8002620 <xTaskResumeAll+0x1d8>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80025f0:	4b0a      	ldr	r3, [pc, #40]	; (800261c <xTaskResumeAll+0x1d4>)
 80025f2:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80025f4:	f001 f868 	bl	80036c8 <vPortExitCritical>

    return xAlreadyYielded;
 80025f8:	697b      	ldr	r3, [r7, #20]
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3720      	adds	r7, #32
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	20000218 	.word	0x20000218
 8002608:	200001f0 	.word	0x200001f0
 800260c:	200001b0 	.word	0x200001b0
 8002610:	200001f8 	.word	0x200001f8
 8002614:	2000011c 	.word	0x2000011c
 8002618:	20000118 	.word	0x20000118
 800261c:	20000204 	.word	0x20000204
 8002620:	20000200 	.word	0x20000200

08002624 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800262a:	4b05      	ldr	r3, [pc, #20]	; (8002640 <xTaskGetTickCount+0x1c>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002630:	687b      	ldr	r3, [r7, #4]
}
 8002632:	4618      	mov	r0, r3
 8002634:	370c      	adds	r7, #12
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	200001f4 	.word	0x200001f4

08002644 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b08a      	sub	sp, #40	; 0x28
 8002648:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800264a:	2300      	movs	r3, #0
 800264c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800264e:	4b6e      	ldr	r3, [pc, #440]	; (8002808 <xTaskIncrementTick+0x1c4>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2b00      	cmp	r3, #0
 8002654:	f040 80cd 	bne.w	80027f2 <xTaskIncrementTick+0x1ae>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002658:	4b6c      	ldr	r3, [pc, #432]	; (800280c <xTaskIncrementTick+0x1c8>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	3301      	adds	r3, #1
 800265e:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002660:	4a6a      	ldr	r2, [pc, #424]	; (800280c <xTaskIncrementTick+0x1c8>)
 8002662:	6a3b      	ldr	r3, [r7, #32]
 8002664:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002666:	6a3b      	ldr	r3, [r7, #32]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d120      	bne.n	80026ae <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 800266c:	4b68      	ldr	r3, [pc, #416]	; (8002810 <xTaskIncrementTick+0x1cc>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d00a      	beq.n	800268c <xTaskIncrementTick+0x48>
        __asm volatile
 8002676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800267a:	f383 8811 	msr	BASEPRI, r3
 800267e:	f3bf 8f6f 	isb	sy
 8002682:	f3bf 8f4f 	dsb	sy
 8002686:	607b      	str	r3, [r7, #4]
    }
 8002688:	bf00      	nop
 800268a:	e7fe      	b.n	800268a <xTaskIncrementTick+0x46>
 800268c:	4b60      	ldr	r3, [pc, #384]	; (8002810 <xTaskIncrementTick+0x1cc>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	61fb      	str	r3, [r7, #28]
 8002692:	4b60      	ldr	r3, [pc, #384]	; (8002814 <xTaskIncrementTick+0x1d0>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a5e      	ldr	r2, [pc, #376]	; (8002810 <xTaskIncrementTick+0x1cc>)
 8002698:	6013      	str	r3, [r2, #0]
 800269a:	4a5e      	ldr	r2, [pc, #376]	; (8002814 <xTaskIncrementTick+0x1d0>)
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	6013      	str	r3, [r2, #0]
 80026a0:	4b5d      	ldr	r3, [pc, #372]	; (8002818 <xTaskIncrementTick+0x1d4>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	3301      	adds	r3, #1
 80026a6:	4a5c      	ldr	r2, [pc, #368]	; (8002818 <xTaskIncrementTick+0x1d4>)
 80026a8:	6013      	str	r3, [r2, #0]
 80026aa:	f000 fb73 	bl	8002d94 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80026ae:	4b5b      	ldr	r3, [pc, #364]	; (800281c <xTaskIncrementTick+0x1d8>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	6a3a      	ldr	r2, [r7, #32]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	f0c0 80a1 	bcc.w	80027fc <xTaskIncrementTick+0x1b8>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80026ba:	4b55      	ldr	r3, [pc, #340]	; (8002810 <xTaskIncrementTick+0x1cc>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d104      	bne.n	80026ce <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026c4:	4b55      	ldr	r3, [pc, #340]	; (800281c <xTaskIncrementTick+0x1d8>)
 80026c6:	f04f 32ff 	mov.w	r2, #4294967295
 80026ca:	601a      	str	r2, [r3, #0]
                    break;
 80026cc:	e096      	b.n	80027fc <xTaskIncrementTick+0x1b8>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80026ce:	4b50      	ldr	r3, [pc, #320]	; (8002810 <xTaskIncrementTick+0x1cc>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80026de:	6a3a      	ldr	r2, [r7, #32]
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d203      	bcs.n	80026ee <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80026e6:	4a4d      	ldr	r2, [pc, #308]	; (800281c <xTaskIncrementTick+0x1d8>)
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80026ec:	e086      	b.n	80027fc <xTaskIncrementTick+0x1b8>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	695b      	ldr	r3, [r3, #20]
 80026f2:	613b      	str	r3, [r7, #16]
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	68d2      	ldr	r2, [r2, #12]
 80026fc:	609a      	str	r2, [r3, #8]
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	6892      	ldr	r2, [r2, #8]
 8002706:	605a      	str	r2, [r3, #4]
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	685a      	ldr	r2, [r3, #4]
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	3304      	adds	r3, #4
 8002710:	429a      	cmp	r2, r3
 8002712:	d103      	bne.n	800271c <xTaskIncrementTick+0xd8>
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	68da      	ldr	r2, [r3, #12]
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	605a      	str	r2, [r3, #4]
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	2200      	movs	r2, #0
 8002720:	615a      	str	r2, [r3, #20]
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	1e5a      	subs	r2, r3, #1
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002730:	2b00      	cmp	r3, #0
 8002732:	d01e      	beq.n	8002772 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002738:	60fb      	str	r3, [r7, #12]
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	69db      	ldr	r3, [r3, #28]
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	6a12      	ldr	r2, [r2, #32]
 8002742:	609a      	str	r2, [r3, #8]
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	6a1b      	ldr	r3, [r3, #32]
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	69d2      	ldr	r2, [r2, #28]
 800274c:	605a      	str	r2, [r3, #4]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	685a      	ldr	r2, [r3, #4]
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	3318      	adds	r3, #24
 8002756:	429a      	cmp	r2, r3
 8002758:	d103      	bne.n	8002762 <xTaskIncrementTick+0x11e>
 800275a:	69bb      	ldr	r3, [r7, #24]
 800275c:	6a1a      	ldr	r2, [r3, #32]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	605a      	str	r2, [r3, #4]
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	2200      	movs	r2, #0
 8002766:	629a      	str	r2, [r3, #40]	; 0x28
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	1e5a      	subs	r2, r3, #1
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002776:	2201      	movs	r2, #1
 8002778:	409a      	lsls	r2, r3
 800277a:	4b29      	ldr	r3, [pc, #164]	; (8002820 <xTaskIncrementTick+0x1dc>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4313      	orrs	r3, r2
 8002780:	4a27      	ldr	r2, [pc, #156]	; (8002820 <xTaskIncrementTick+0x1dc>)
 8002782:	6013      	str	r3, [r2, #0]
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002788:	4926      	ldr	r1, [pc, #152]	; (8002824 <xTaskIncrementTick+0x1e0>)
 800278a:	4613      	mov	r3, r2
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	4413      	add	r3, r2
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	440b      	add	r3, r1
 8002794:	3304      	adds	r3, #4
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	60bb      	str	r3, [r7, #8]
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	68ba      	ldr	r2, [r7, #8]
 800279e:	609a      	str	r2, [r3, #8]
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	689a      	ldr	r2, [r3, #8]
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	60da      	str	r2, [r3, #12]
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	3204      	adds	r2, #4
 80027b0:	605a      	str	r2, [r3, #4]
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	1d1a      	adds	r2, r3, #4
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	609a      	str	r2, [r3, #8]
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027be:	4613      	mov	r3, r2
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	4413      	add	r3, r2
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	4a17      	ldr	r2, [pc, #92]	; (8002824 <xTaskIncrementTick+0x1e0>)
 80027c8:	441a      	add	r2, r3
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	615a      	str	r2, [r3, #20]
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027d2:	4914      	ldr	r1, [pc, #80]	; (8002824 <xTaskIncrementTick+0x1e0>)
 80027d4:	4613      	mov	r3, r2
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	4413      	add	r3, r2
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	440b      	add	r3, r1
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	1c59      	adds	r1, r3, #1
 80027e2:	4810      	ldr	r0, [pc, #64]	; (8002824 <xTaskIncrementTick+0x1e0>)
 80027e4:	4613      	mov	r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	4413      	add	r3, r2
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	4403      	add	r3, r0
 80027ee:	6019      	str	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80027f0:	e763      	b.n	80026ba <xTaskIncrementTick+0x76>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80027f2:	4b0d      	ldr	r3, [pc, #52]	; (8002828 <xTaskIncrementTick+0x1e4>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	3301      	adds	r3, #1
 80027f8:	4a0b      	ldr	r2, [pc, #44]	; (8002828 <xTaskIncrementTick+0x1e4>)
 80027fa:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 80027fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3728      	adds	r7, #40	; 0x28
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	20000218 	.word	0x20000218
 800280c:	200001f4 	.word	0x200001f4
 8002810:	200001a8 	.word	0x200001a8
 8002814:	200001ac 	.word	0x200001ac
 8002818:	20000208 	.word	0x20000208
 800281c:	20000210 	.word	0x20000210
 8002820:	200001f8 	.word	0x200001f8
 8002824:	2000011c 	.word	0x2000011c
 8002828:	20000200 	.word	0x20000200

0800282c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800282c:	b480      	push	{r7}
 800282e:	b087      	sub	sp, #28
 8002830:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002832:	4b27      	ldr	r3, [pc, #156]	; (80028d0 <vTaskSwitchContext+0xa4>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d003      	beq.n	8002842 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800283a:	4b26      	ldr	r3, [pc, #152]	; (80028d4 <vTaskSwitchContext+0xa8>)
 800283c:	2201      	movs	r2, #1
 800283e:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8002840:	e03f      	b.n	80028c2 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8002842:	4b24      	ldr	r3, [pc, #144]	; (80028d4 <vTaskSwitchContext+0xa8>)
 8002844:	2200      	movs	r2, #0
 8002846:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002848:	4b23      	ldr	r3, [pc, #140]	; (80028d8 <vTaskSwitchContext+0xac>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	fab3 f383 	clz	r3, r3
 8002854:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002856:	7afb      	ldrb	r3, [r7, #11]
 8002858:	f1c3 031f 	rsb	r3, r3, #31
 800285c:	617b      	str	r3, [r7, #20]
 800285e:	491f      	ldr	r1, [pc, #124]	; (80028dc <vTaskSwitchContext+0xb0>)
 8002860:	697a      	ldr	r2, [r7, #20]
 8002862:	4613      	mov	r3, r2
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	4413      	add	r3, r2
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	440b      	add	r3, r1
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d10a      	bne.n	8002888 <vTaskSwitchContext+0x5c>
        __asm volatile
 8002872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002876:	f383 8811 	msr	BASEPRI, r3
 800287a:	f3bf 8f6f 	isb	sy
 800287e:	f3bf 8f4f 	dsb	sy
 8002882:	607b      	str	r3, [r7, #4]
    }
 8002884:	bf00      	nop
 8002886:	e7fe      	b.n	8002886 <vTaskSwitchContext+0x5a>
 8002888:	697a      	ldr	r2, [r7, #20]
 800288a:	4613      	mov	r3, r2
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	4413      	add	r3, r2
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	4a12      	ldr	r2, [pc, #72]	; (80028dc <vTaskSwitchContext+0xb0>)
 8002894:	4413      	add	r3, r2
 8002896:	613b      	str	r3, [r7, #16]
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	685a      	ldr	r2, [r3, #4]
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	605a      	str	r2, [r3, #4]
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	685a      	ldr	r2, [r3, #4]
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	3308      	adds	r3, #8
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d104      	bne.n	80028b8 <vTaskSwitchContext+0x8c>
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	685a      	ldr	r2, [r3, #4]
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	605a      	str	r2, [r3, #4]
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	4a08      	ldr	r2, [pc, #32]	; (80028e0 <vTaskSwitchContext+0xb4>)
 80028c0:	6013      	str	r3, [r2, #0]
}
 80028c2:	bf00      	nop
 80028c4:	371c      	adds	r7, #28
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	20000218 	.word	0x20000218
 80028d4:	20000204 	.word	0x20000204
 80028d8:	200001f8 	.word	0x200001f8
 80028dc:	2000011c 	.word	0x2000011c
 80028e0:	20000118 	.word	0x20000118

080028e4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d10a      	bne.n	800290a <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80028f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028f8:	f383 8811 	msr	BASEPRI, r3
 80028fc:	f3bf 8f6f 	isb	sy
 8002900:	f3bf 8f4f 	dsb	sy
 8002904:	60fb      	str	r3, [r7, #12]
    }
 8002906:	bf00      	nop
 8002908:	e7fe      	b.n	8002908 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800290a:	4b07      	ldr	r3, [pc, #28]	; (8002928 <vTaskPlaceOnEventList+0x44>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	3318      	adds	r3, #24
 8002910:	4619      	mov	r1, r3
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f7ff f8a1 	bl	8001a5a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002918:	2101      	movs	r1, #1
 800291a:	6838      	ldr	r0, [r7, #0]
 800291c:	f000 fa74 	bl	8002e08 <prvAddCurrentTaskToDelayedList>
}
 8002920:	bf00      	nop
 8002922:	3710      	adds	r7, #16
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	20000118 	.word	0x20000118

0800292c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800292c:	b580      	push	{r7, lr}
 800292e:	b086      	sub	sp, #24
 8002930:	af00      	add	r7, sp, #0
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d10a      	bne.n	8002954 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800293e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002942:	f383 8811 	msr	BASEPRI, r3
 8002946:	f3bf 8f6f 	isb	sy
 800294a:	f3bf 8f4f 	dsb	sy
 800294e:	613b      	str	r3, [r7, #16]
    }
 8002950:	bf00      	nop
 8002952:	e7fe      	b.n	8002952 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	617b      	str	r3, [r7, #20]
 800295a:	4b16      	ldr	r3, [pc, #88]	; (80029b4 <vTaskPlaceOnEventListRestricted+0x88>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	697a      	ldr	r2, [r7, #20]
 8002960:	61da      	str	r2, [r3, #28]
 8002962:	4b14      	ldr	r3, [pc, #80]	; (80029b4 <vTaskPlaceOnEventListRestricted+0x88>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	697a      	ldr	r2, [r7, #20]
 8002968:	6892      	ldr	r2, [r2, #8]
 800296a:	621a      	str	r2, [r3, #32]
 800296c:	4b11      	ldr	r3, [pc, #68]	; (80029b4 <vTaskPlaceOnEventListRestricted+0x88>)
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	3218      	adds	r2, #24
 8002976:	605a      	str	r2, [r3, #4]
 8002978:	4b0e      	ldr	r3, [pc, #56]	; (80029b4 <vTaskPlaceOnEventListRestricted+0x88>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f103 0218 	add.w	r2, r3, #24
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	609a      	str	r2, [r3, #8]
 8002984:	4b0b      	ldr	r3, [pc, #44]	; (80029b4 <vTaskPlaceOnEventListRestricted+0x88>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68fa      	ldr	r2, [r7, #12]
 800298a:	629a      	str	r2, [r3, #40]	; 0x28
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	1c5a      	adds	r2, r3, #1
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d002      	beq.n	80029a2 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 800299c:	f04f 33ff 	mov.w	r3, #4294967295
 80029a0:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80029a2:	6879      	ldr	r1, [r7, #4]
 80029a4:	68b8      	ldr	r0, [r7, #8]
 80029a6:	f000 fa2f 	bl	8002e08 <prvAddCurrentTaskToDelayedList>
    }
 80029aa:	bf00      	nop
 80029ac:	3718      	adds	r7, #24
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	20000118 	.word	0x20000118

080029b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80029b8:	b480      	push	{r7}
 80029ba:	b08b      	sub	sp, #44	; 0x2c
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80029c8:	6a3b      	ldr	r3, [r7, #32]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d10a      	bne.n	80029e4 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80029ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029d2:	f383 8811 	msr	BASEPRI, r3
 80029d6:	f3bf 8f6f 	isb	sy
 80029da:	f3bf 8f4f 	dsb	sy
 80029de:	60fb      	str	r3, [r7, #12]
    }
 80029e0:	bf00      	nop
 80029e2:	e7fe      	b.n	80029e2 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80029e4:	6a3b      	ldr	r3, [r7, #32]
 80029e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e8:	61fb      	str	r3, [r7, #28]
 80029ea:	6a3b      	ldr	r3, [r7, #32]
 80029ec:	69db      	ldr	r3, [r3, #28]
 80029ee:	6a3a      	ldr	r2, [r7, #32]
 80029f0:	6a12      	ldr	r2, [r2, #32]
 80029f2:	609a      	str	r2, [r3, #8]
 80029f4:	6a3b      	ldr	r3, [r7, #32]
 80029f6:	6a1b      	ldr	r3, [r3, #32]
 80029f8:	6a3a      	ldr	r2, [r7, #32]
 80029fa:	69d2      	ldr	r2, [r2, #28]
 80029fc:	605a      	str	r2, [r3, #4]
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	685a      	ldr	r2, [r3, #4]
 8002a02:	6a3b      	ldr	r3, [r7, #32]
 8002a04:	3318      	adds	r3, #24
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d103      	bne.n	8002a12 <xTaskRemoveFromEventList+0x5a>
 8002a0a:	6a3b      	ldr	r3, [r7, #32]
 8002a0c:	6a1a      	ldr	r2, [r3, #32]
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	605a      	str	r2, [r3, #4]
 8002a12:	6a3b      	ldr	r3, [r7, #32]
 8002a14:	2200      	movs	r2, #0
 8002a16:	629a      	str	r2, [r3, #40]	; 0x28
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	1e5a      	subs	r2, r3, #1
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002a22:	4b4a      	ldr	r3, [pc, #296]	; (8002b4c <xTaskRemoveFromEventList+0x194>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d15e      	bne.n	8002ae8 <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8002a2a:	6a3b      	ldr	r3, [r7, #32]
 8002a2c:	695b      	ldr	r3, [r3, #20]
 8002a2e:	617b      	str	r3, [r7, #20]
 8002a30:	6a3b      	ldr	r3, [r7, #32]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	6a3a      	ldr	r2, [r7, #32]
 8002a36:	68d2      	ldr	r2, [r2, #12]
 8002a38:	609a      	str	r2, [r3, #8]
 8002a3a:	6a3b      	ldr	r3, [r7, #32]
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	6a3a      	ldr	r2, [r7, #32]
 8002a40:	6892      	ldr	r2, [r2, #8]
 8002a42:	605a      	str	r2, [r3, #4]
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	685a      	ldr	r2, [r3, #4]
 8002a48:	6a3b      	ldr	r3, [r7, #32]
 8002a4a:	3304      	adds	r3, #4
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d103      	bne.n	8002a58 <xTaskRemoveFromEventList+0xa0>
 8002a50:	6a3b      	ldr	r3, [r7, #32]
 8002a52:	68da      	ldr	r2, [r3, #12]
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	605a      	str	r2, [r3, #4]
 8002a58:	6a3b      	ldr	r3, [r7, #32]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	615a      	str	r2, [r3, #20]
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	1e5a      	subs	r2, r3, #1
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8002a68:	6a3b      	ldr	r3, [r7, #32]
 8002a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	409a      	lsls	r2, r3
 8002a70:	4b37      	ldr	r3, [pc, #220]	; (8002b50 <xTaskRemoveFromEventList+0x198>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	4a36      	ldr	r2, [pc, #216]	; (8002b50 <xTaskRemoveFromEventList+0x198>)
 8002a78:	6013      	str	r3, [r2, #0]
 8002a7a:	6a3b      	ldr	r3, [r7, #32]
 8002a7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a7e:	4935      	ldr	r1, [pc, #212]	; (8002b54 <xTaskRemoveFromEventList+0x19c>)
 8002a80:	4613      	mov	r3, r2
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	4413      	add	r3, r2
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	440b      	add	r3, r1
 8002a8a:	3304      	adds	r3, #4
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	613b      	str	r3, [r7, #16]
 8002a90:	6a3b      	ldr	r3, [r7, #32]
 8002a92:	693a      	ldr	r2, [r7, #16]
 8002a94:	609a      	str	r2, [r3, #8]
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	689a      	ldr	r2, [r3, #8]
 8002a9a:	6a3b      	ldr	r3, [r7, #32]
 8002a9c:	60da      	str	r2, [r3, #12]
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	6a3a      	ldr	r2, [r7, #32]
 8002aa4:	3204      	adds	r2, #4
 8002aa6:	605a      	str	r2, [r3, #4]
 8002aa8:	6a3b      	ldr	r3, [r7, #32]
 8002aaa:	1d1a      	adds	r2, r3, #4
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	609a      	str	r2, [r3, #8]
 8002ab0:	6a3b      	ldr	r3, [r7, #32]
 8002ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	4413      	add	r3, r2
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	4a25      	ldr	r2, [pc, #148]	; (8002b54 <xTaskRemoveFromEventList+0x19c>)
 8002abe:	441a      	add	r2, r3
 8002ac0:	6a3b      	ldr	r3, [r7, #32]
 8002ac2:	615a      	str	r2, [r3, #20]
 8002ac4:	6a3b      	ldr	r3, [r7, #32]
 8002ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ac8:	4922      	ldr	r1, [pc, #136]	; (8002b54 <xTaskRemoveFromEventList+0x19c>)
 8002aca:	4613      	mov	r3, r2
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	4413      	add	r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	440b      	add	r3, r1
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	1c59      	adds	r1, r3, #1
 8002ad8:	481e      	ldr	r0, [pc, #120]	; (8002b54 <xTaskRemoveFromEventList+0x19c>)
 8002ada:	4613      	mov	r3, r2
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	4413      	add	r3, r2
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	4403      	add	r3, r0
 8002ae4:	6019      	str	r1, [r3, #0]
 8002ae6:	e01b      	b.n	8002b20 <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002ae8:	4b1b      	ldr	r3, [pc, #108]	; (8002b58 <xTaskRemoveFromEventList+0x1a0>)
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	61bb      	str	r3, [r7, #24]
 8002aee:	6a3b      	ldr	r3, [r7, #32]
 8002af0:	69ba      	ldr	r2, [r7, #24]
 8002af2:	61da      	str	r2, [r3, #28]
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	689a      	ldr	r2, [r3, #8]
 8002af8:	6a3b      	ldr	r3, [r7, #32]
 8002afa:	621a      	str	r2, [r3, #32]
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	6a3a      	ldr	r2, [r7, #32]
 8002b02:	3218      	adds	r2, #24
 8002b04:	605a      	str	r2, [r3, #4]
 8002b06:	6a3b      	ldr	r3, [r7, #32]
 8002b08:	f103 0218 	add.w	r2, r3, #24
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	609a      	str	r2, [r3, #8]
 8002b10:	6a3b      	ldr	r3, [r7, #32]
 8002b12:	4a11      	ldr	r2, [pc, #68]	; (8002b58 <xTaskRemoveFromEventList+0x1a0>)
 8002b14:	629a      	str	r2, [r3, #40]	; 0x28
 8002b16:	4b10      	ldr	r3, [pc, #64]	; (8002b58 <xTaskRemoveFromEventList+0x1a0>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	4a0e      	ldr	r2, [pc, #56]	; (8002b58 <xTaskRemoveFromEventList+0x1a0>)
 8002b1e:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002b20:	6a3b      	ldr	r3, [r7, #32]
 8002b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b24:	4b0d      	ldr	r3, [pc, #52]	; (8002b5c <xTaskRemoveFromEventList+0x1a4>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d905      	bls.n	8002b3a <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8002b32:	4b0b      	ldr	r3, [pc, #44]	; (8002b60 <xTaskRemoveFromEventList+0x1a8>)
 8002b34:	2201      	movs	r2, #1
 8002b36:	601a      	str	r2, [r3, #0]
 8002b38:	e001      	b.n	8002b3e <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8002b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	372c      	adds	r7, #44	; 0x2c
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr
 8002b4c:	20000218 	.word	0x20000218
 8002b50:	200001f8 	.word	0x200001f8
 8002b54:	2000011c 	.word	0x2000011c
 8002b58:	200001b0 	.word	0x200001b0
 8002b5c:	20000118 	.word	0x20000118
 8002b60:	20000204 	.word	0x20000204

08002b64 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002b6c:	4b06      	ldr	r3, [pc, #24]	; (8002b88 <vTaskInternalSetTimeOutState+0x24>)
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8002b74:	4b05      	ldr	r3, [pc, #20]	; (8002b8c <vTaskInternalSetTimeOutState+0x28>)
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	605a      	str	r2, [r3, #4]
}
 8002b7c:	bf00      	nop
 8002b7e:	370c      	adds	r7, #12
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr
 8002b88:	20000208 	.word	0x20000208
 8002b8c:	200001f4 	.word	0x200001f4

08002b90 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b088      	sub	sp, #32
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d10a      	bne.n	8002bb6 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8002ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ba4:	f383 8811 	msr	BASEPRI, r3
 8002ba8:	f3bf 8f6f 	isb	sy
 8002bac:	f3bf 8f4f 	dsb	sy
 8002bb0:	613b      	str	r3, [r7, #16]
    }
 8002bb2:	bf00      	nop
 8002bb4:	e7fe      	b.n	8002bb4 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d10a      	bne.n	8002bd2 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8002bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bc0:	f383 8811 	msr	BASEPRI, r3
 8002bc4:	f3bf 8f6f 	isb	sy
 8002bc8:	f3bf 8f4f 	dsb	sy
 8002bcc:	60fb      	str	r3, [r7, #12]
    }
 8002bce:	bf00      	nop
 8002bd0:	e7fe      	b.n	8002bd0 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8002bd2:	f000 fd49 	bl	8003668 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8002bd6:	4b1f      	ldr	r3, [pc, #124]	; (8002c54 <xTaskCheckForTimeOut+0xc4>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bee:	d102      	bne.n	8002bf6 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	61fb      	str	r3, [r7, #28]
 8002bf4:	e026      	b.n	8002c44 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	4b17      	ldr	r3, [pc, #92]	; (8002c58 <xTaskCheckForTimeOut+0xc8>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d00a      	beq.n	8002c18 <xTaskCheckForTimeOut+0x88>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	69ba      	ldr	r2, [r7, #24]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d305      	bcc.n	8002c18 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	2200      	movs	r2, #0
 8002c14:	601a      	str	r2, [r3, #0]
 8002c16:	e015      	b.n	8002c44 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	697a      	ldr	r2, [r7, #20]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d20b      	bcs.n	8002c3a <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	1ad2      	subs	r2, r2, r3
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f7ff ff98 	bl	8002b64 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8002c34:	2300      	movs	r3, #0
 8002c36:	61fb      	str	r3, [r7, #28]
 8002c38:	e004      	b.n	8002c44 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8002c40:	2301      	movs	r3, #1
 8002c42:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8002c44:	f000 fd40 	bl	80036c8 <vPortExitCritical>

    return xReturn;
 8002c48:	69fb      	ldr	r3, [r7, #28]
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3720      	adds	r7, #32
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	200001f4 	.word	0x200001f4
 8002c58:	20000208 	.word	0x20000208

08002c5c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8002c60:	4b03      	ldr	r3, [pc, #12]	; (8002c70 <vTaskMissedYield+0x14>)
 8002c62:	2201      	movs	r2, #1
 8002c64:	601a      	str	r2, [r3, #0]
}
 8002c66:	bf00      	nop
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr
 8002c70:	20000204 	.word	0x20000204

08002c74 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002c7c:	f000 f84c 	bl	8002d18 <prvCheckTasksWaitingTermination>
        {
            /* If we are not using preemption we keep forcing a task switch to
             * see if any other task has become available.  If we are using
             * preemption we don't need to do this as any task becoming available
             * will automatically get the processor anyway. */
            taskYIELD();
 8002c80:	4b04      	ldr	r3, [pc, #16]	; (8002c94 <prvIdleTask+0x20>)
 8002c82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c86:	601a      	str	r2, [r3, #0]
 8002c88:	f3bf 8f4f 	dsb	sy
 8002c8c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002c90:	e7f4      	b.n	8002c7c <prvIdleTask+0x8>
 8002c92:	bf00      	nop
 8002c94:	e000ed04 	.word	0xe000ed04

08002c98 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	607b      	str	r3, [r7, #4]
 8002ca2:	e00c      	b.n	8002cbe <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	4413      	add	r3, r2
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	4a12      	ldr	r2, [pc, #72]	; (8002cf8 <prvInitialiseTaskLists+0x60>)
 8002cb0:	4413      	add	r3, r2
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7fe fea4 	bl	8001a00 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	3301      	adds	r3, #1
 8002cbc:	607b      	str	r3, [r7, #4]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2b04      	cmp	r3, #4
 8002cc2:	d9ef      	bls.n	8002ca4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002cc4:	480d      	ldr	r0, [pc, #52]	; (8002cfc <prvInitialiseTaskLists+0x64>)
 8002cc6:	f7fe fe9b 	bl	8001a00 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002cca:	480d      	ldr	r0, [pc, #52]	; (8002d00 <prvInitialiseTaskLists+0x68>)
 8002ccc:	f7fe fe98 	bl	8001a00 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002cd0:	480c      	ldr	r0, [pc, #48]	; (8002d04 <prvInitialiseTaskLists+0x6c>)
 8002cd2:	f7fe fe95 	bl	8001a00 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8002cd6:	480c      	ldr	r0, [pc, #48]	; (8002d08 <prvInitialiseTaskLists+0x70>)
 8002cd8:	f7fe fe92 	bl	8001a00 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8002cdc:	480b      	ldr	r0, [pc, #44]	; (8002d0c <prvInitialiseTaskLists+0x74>)
 8002cde:	f7fe fe8f 	bl	8001a00 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002ce2:	4b0b      	ldr	r3, [pc, #44]	; (8002d10 <prvInitialiseTaskLists+0x78>)
 8002ce4:	4a05      	ldr	r2, [pc, #20]	; (8002cfc <prvInitialiseTaskLists+0x64>)
 8002ce6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002ce8:	4b0a      	ldr	r3, [pc, #40]	; (8002d14 <prvInitialiseTaskLists+0x7c>)
 8002cea:	4a05      	ldr	r2, [pc, #20]	; (8002d00 <prvInitialiseTaskLists+0x68>)
 8002cec:	601a      	str	r2, [r3, #0]
}
 8002cee:	bf00      	nop
 8002cf0:	3708      	adds	r7, #8
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	2000011c 	.word	0x2000011c
 8002cfc:	20000180 	.word	0x20000180
 8002d00:	20000194 	.word	0x20000194
 8002d04:	200001b0 	.word	0x200001b0
 8002d08:	200001c4 	.word	0x200001c4
 8002d0c:	200001dc 	.word	0x200001dc
 8002d10:	200001a8 	.word	0x200001a8
 8002d14:	200001ac 	.word	0x200001ac

08002d18 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b082      	sub	sp, #8
 8002d1c:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002d1e:	e019      	b.n	8002d54 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8002d20:	f000 fca2 	bl	8003668 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d24:	4b10      	ldr	r3, [pc, #64]	; (8002d68 <prvCheckTasksWaitingTermination+0x50>)
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	3304      	adds	r3, #4
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7fe fecb 	bl	8001acc <uxListRemove>
                --uxCurrentNumberOfTasks;
 8002d36:	4b0d      	ldr	r3, [pc, #52]	; (8002d6c <prvCheckTasksWaitingTermination+0x54>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	4a0b      	ldr	r2, [pc, #44]	; (8002d6c <prvCheckTasksWaitingTermination+0x54>)
 8002d3e:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8002d40:	4b0b      	ldr	r3, [pc, #44]	; (8002d70 <prvCheckTasksWaitingTermination+0x58>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	3b01      	subs	r3, #1
 8002d46:	4a0a      	ldr	r2, [pc, #40]	; (8002d70 <prvCheckTasksWaitingTermination+0x58>)
 8002d48:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8002d4a:	f000 fcbd 	bl	80036c8 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f000 f810 	bl	8002d74 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002d54:	4b06      	ldr	r3, [pc, #24]	; (8002d70 <prvCheckTasksWaitingTermination+0x58>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d1e1      	bne.n	8002d20 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8002d5c:	bf00      	nop
 8002d5e:	bf00      	nop
 8002d60:	3708      	adds	r7, #8
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	200001c4 	.word	0x200001c4
 8002d6c:	200001f0 	.word	0x200001f0
 8002d70:	200001d8 	.word	0x200001d8

08002d74 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d80:	4618      	mov	r0, r3
 8002d82:	f000 fe0d 	bl	80039a0 <vPortFree>
            vPortFree( pxTCB );
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f000 fe0a 	bl	80039a0 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002d8c:	bf00      	nop
 8002d8e:	3708      	adds	r7, #8
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d98:	4b0a      	ldr	r3, [pc, #40]	; (8002dc4 <prvResetNextTaskUnblockTime+0x30>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d104      	bne.n	8002dac <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002da2:	4b09      	ldr	r3, [pc, #36]	; (8002dc8 <prvResetNextTaskUnblockTime+0x34>)
 8002da4:	f04f 32ff 	mov.w	r2, #4294967295
 8002da8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002daa:	e005      	b.n	8002db8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002dac:	4b05      	ldr	r3, [pc, #20]	; (8002dc4 <prvResetNextTaskUnblockTime+0x30>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a04      	ldr	r2, [pc, #16]	; (8002dc8 <prvResetNextTaskUnblockTime+0x34>)
 8002db6:	6013      	str	r3, [r2, #0]
}
 8002db8:	bf00      	nop
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	200001a8 	.word	0x200001a8
 8002dc8:	20000210 	.word	0x20000210

08002dcc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8002dd2:	4b0b      	ldr	r3, [pc, #44]	; (8002e00 <xTaskGetSchedulerState+0x34>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d102      	bne.n	8002de0 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	607b      	str	r3, [r7, #4]
 8002dde:	e008      	b.n	8002df2 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002de0:	4b08      	ldr	r3, [pc, #32]	; (8002e04 <xTaskGetSchedulerState+0x38>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d102      	bne.n	8002dee <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8002de8:	2302      	movs	r3, #2
 8002dea:	607b      	str	r3, [r7, #4]
 8002dec:	e001      	b.n	8002df2 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8002dee:	2300      	movs	r3, #0
 8002df0:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8002df2:	687b      	ldr	r3, [r7, #4]
    }
 8002df4:	4618      	mov	r0, r3
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr
 8002e00:	200001fc 	.word	0x200001fc
 8002e04:	20000218 	.word	0x20000218

08002e08 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b086      	sub	sp, #24
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002e12:	4b36      	ldr	r3, [pc, #216]	; (8002eec <prvAddCurrentTaskToDelayedList+0xe4>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002e18:	4b35      	ldr	r3, [pc, #212]	; (8002ef0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	3304      	adds	r3, #4
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7fe fe54 	bl	8001acc <uxListRemove>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d10b      	bne.n	8002e42 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002e2a:	4b31      	ldr	r3, [pc, #196]	; (8002ef0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e30:	2201      	movs	r2, #1
 8002e32:	fa02 f303 	lsl.w	r3, r2, r3
 8002e36:	43da      	mvns	r2, r3
 8002e38:	4b2e      	ldr	r3, [pc, #184]	; (8002ef4 <prvAddCurrentTaskToDelayedList+0xec>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	4a2d      	ldr	r2, [pc, #180]	; (8002ef4 <prvAddCurrentTaskToDelayedList+0xec>)
 8002e40:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e48:	d124      	bne.n	8002e94 <prvAddCurrentTaskToDelayedList+0x8c>
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d021      	beq.n	8002e94 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002e50:	4b29      	ldr	r3, [pc, #164]	; (8002ef8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	613b      	str	r3, [r7, #16]
 8002e56:	4b26      	ldr	r3, [pc, #152]	; (8002ef0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	693a      	ldr	r2, [r7, #16]
 8002e5c:	609a      	str	r2, [r3, #8]
 8002e5e:	4b24      	ldr	r3, [pc, #144]	; (8002ef0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	693a      	ldr	r2, [r7, #16]
 8002e64:	6892      	ldr	r2, [r2, #8]
 8002e66:	60da      	str	r2, [r3, #12]
 8002e68:	4b21      	ldr	r3, [pc, #132]	; (8002ef0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	3204      	adds	r2, #4
 8002e72:	605a      	str	r2, [r3, #4]
 8002e74:	4b1e      	ldr	r3, [pc, #120]	; (8002ef0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	1d1a      	adds	r2, r3, #4
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	609a      	str	r2, [r3, #8]
 8002e7e:	4b1c      	ldr	r3, [pc, #112]	; (8002ef0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a1d      	ldr	r2, [pc, #116]	; (8002ef8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8002e84:	615a      	str	r2, [r3, #20]
 8002e86:	4b1c      	ldr	r3, [pc, #112]	; (8002ef8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	4a1a      	ldr	r2, [pc, #104]	; (8002ef8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8002e8e:	6013      	str	r3, [r2, #0]
 8002e90:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002e92:	e026      	b.n	8002ee2 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8002e94:	697a      	ldr	r2, [r7, #20]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4413      	add	r3, r2
 8002e9a:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002e9c:	4b14      	ldr	r3, [pc, #80]	; (8002ef0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	68fa      	ldr	r2, [r7, #12]
 8002ea2:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8002ea4:	68fa      	ldr	r2, [r7, #12]
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d209      	bcs.n	8002ec0 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002eac:	4b13      	ldr	r3, [pc, #76]	; (8002efc <prvAddCurrentTaskToDelayedList+0xf4>)
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	4b0f      	ldr	r3, [pc, #60]	; (8002ef0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	3304      	adds	r3, #4
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	4610      	mov	r0, r2
 8002eba:	f7fe fdce 	bl	8001a5a <vListInsert>
}
 8002ebe:	e010      	b.n	8002ee2 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002ec0:	4b0f      	ldr	r3, [pc, #60]	; (8002f00 <prvAddCurrentTaskToDelayedList+0xf8>)
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	4b0a      	ldr	r3, [pc, #40]	; (8002ef0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	3304      	adds	r3, #4
 8002eca:	4619      	mov	r1, r3
 8002ecc:	4610      	mov	r0, r2
 8002ece:	f7fe fdc4 	bl	8001a5a <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8002ed2:	4b0c      	ldr	r3, [pc, #48]	; (8002f04 <prvAddCurrentTaskToDelayedList+0xfc>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68fa      	ldr	r2, [r7, #12]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d202      	bcs.n	8002ee2 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8002edc:	4a09      	ldr	r2, [pc, #36]	; (8002f04 <prvAddCurrentTaskToDelayedList+0xfc>)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6013      	str	r3, [r2, #0]
}
 8002ee2:	bf00      	nop
 8002ee4:	3718      	adds	r7, #24
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	200001f4 	.word	0x200001f4
 8002ef0:	20000118 	.word	0x20000118
 8002ef4:	200001f8 	.word	0x200001f8
 8002ef8:	200001dc 	.word	0x200001dc
 8002efc:	200001ac 	.word	0x200001ac
 8002f00:	200001a8 	.word	0x200001a8
 8002f04:	20000210 	.word	0x20000210

08002f08 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8002f12:	f000 fa47 	bl	80033a4 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8002f16:	4b11      	ldr	r3, [pc, #68]	; (8002f5c <xTimerCreateTimerTask+0x54>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d00b      	beq.n	8002f36 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8002f1e:	4b10      	ldr	r3, [pc, #64]	; (8002f60 <xTimerCreateTimerTask+0x58>)
 8002f20:	9301      	str	r3, [sp, #4]
 8002f22:	2302      	movs	r3, #2
 8002f24:	9300      	str	r3, [sp, #0]
 8002f26:	2300      	movs	r3, #0
 8002f28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f2c:	490d      	ldr	r1, [pc, #52]	; (8002f64 <xTimerCreateTimerTask+0x5c>)
 8002f2e:	480e      	ldr	r0, [pc, #56]	; (8002f68 <xTimerCreateTimerTask+0x60>)
 8002f30:	f7ff f8ce 	bl	80020d0 <xTaskCreate>
 8002f34:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d10a      	bne.n	8002f52 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8002f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f40:	f383 8811 	msr	BASEPRI, r3
 8002f44:	f3bf 8f6f 	isb	sy
 8002f48:	f3bf 8f4f 	dsb	sy
 8002f4c:	603b      	str	r3, [r7, #0]
    }
 8002f4e:	bf00      	nop
 8002f50:	e7fe      	b.n	8002f50 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8002f52:	687b      	ldr	r3, [r7, #4]
    }
 8002f54:	4618      	mov	r0, r3
 8002f56:	3708      	adds	r7, #8
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	2000024c 	.word	0x2000024c
 8002f60:	20000250 	.word	0x20000250
 8002f64:	080045a8 	.word	0x080045a8
 8002f68:	08003011 	.word	0x08003011

08002f6c <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8002f78:	e008      	b.n	8002f8c <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	699b      	ldr	r3, [r3, #24]
 8002f7e:	68ba      	ldr	r2, [r7, #8]
 8002f80:	4413      	add	r3, r2
 8002f82:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6a1b      	ldr	r3, [r3, #32]
 8002f88:	68f8      	ldr	r0, [r7, #12]
 8002f8a:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	699a      	ldr	r2, [r3, #24]
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	18d1      	adds	r1, r2, r3
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	68f8      	ldr	r0, [r7, #12]
 8002f9a:	f000 f8dd 	bl	8003158 <prvInsertTimerInActiveList>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d1ea      	bne.n	8002f7a <prvReloadTimer+0xe>
        }
    }
 8002fa4:	bf00      	nop
 8002fa6:	bf00      	nop
 8002fa8:	3710      	adds	r7, #16
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
	...

08002fb0 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002fba:	4b14      	ldr	r3, [pc, #80]	; (800300c <prvProcessExpiredTimer+0x5c>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	3304      	adds	r3, #4
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7fe fd7f 	bl	8001acc <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002fd4:	f003 0304 	and.w	r3, r3, #4
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d005      	beq.n	8002fe8 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8002fdc:	683a      	ldr	r2, [r7, #0]
 8002fde:	6879      	ldr	r1, [r7, #4]
 8002fe0:	68f8      	ldr	r0, [r7, #12]
 8002fe2:	f7ff ffc3 	bl	8002f6c <prvReloadTimer>
 8002fe6:	e008      	b.n	8002ffa <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002fee:	f023 0301 	bic.w	r3, r3, #1
 8002ff2:	b2da      	uxtb	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6a1b      	ldr	r3, [r3, #32]
 8002ffe:	68f8      	ldr	r0, [r7, #12]
 8003000:	4798      	blx	r3
    }
 8003002:	bf00      	nop
 8003004:	3710      	adds	r7, #16
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	20000244 	.word	0x20000244

08003010 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003018:	f107 0308 	add.w	r3, r7, #8
 800301c:	4618      	mov	r0, r3
 800301e:	f000 f857 	bl	80030d0 <prvGetNextExpireTime>
 8003022:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	4619      	mov	r1, r3
 8003028:	68f8      	ldr	r0, [r7, #12]
 800302a:	f000 f803 	bl	8003034 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800302e:	f000 f8d5 	bl	80031dc <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003032:	e7f1      	b.n	8003018 <prvTimerTask+0x8>

08003034 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800303e:	f7ff f9f5 	bl	800242c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003042:	f107 0308 	add.w	r3, r7, #8
 8003046:	4618      	mov	r0, r3
 8003048:	f000 f866 	bl	8003118 <prvSampleTimeNow>
 800304c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d130      	bne.n	80030b6 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d10a      	bne.n	8003070 <prvProcessTimerOrBlockTask+0x3c>
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	429a      	cmp	r2, r3
 8003060:	d806      	bhi.n	8003070 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003062:	f7ff f9f1 	bl	8002448 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003066:	68f9      	ldr	r1, [r7, #12]
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f7ff ffa1 	bl	8002fb0 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800306e:	e024      	b.n	80030ba <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d008      	beq.n	8003088 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003076:	4b13      	ldr	r3, [pc, #76]	; (80030c4 <prvProcessTimerOrBlockTask+0x90>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d101      	bne.n	8003084 <prvProcessTimerOrBlockTask+0x50>
 8003080:	2301      	movs	r3, #1
 8003082:	e000      	b.n	8003086 <prvProcessTimerOrBlockTask+0x52>
 8003084:	2300      	movs	r3, #0
 8003086:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003088:	4b0f      	ldr	r3, [pc, #60]	; (80030c8 <prvProcessTimerOrBlockTask+0x94>)
 800308a:	6818      	ldr	r0, [r3, #0]
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	683a      	ldr	r2, [r7, #0]
 8003094:	4619      	mov	r1, r3
 8003096:	f7fe ffe7 	bl	8002068 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800309a:	f7ff f9d5 	bl	8002448 <xTaskResumeAll>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d10a      	bne.n	80030ba <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80030a4:	4b09      	ldr	r3, [pc, #36]	; (80030cc <prvProcessTimerOrBlockTask+0x98>)
 80030a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030aa:	601a      	str	r2, [r3, #0]
 80030ac:	f3bf 8f4f 	dsb	sy
 80030b0:	f3bf 8f6f 	isb	sy
    }
 80030b4:	e001      	b.n	80030ba <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80030b6:	f7ff f9c7 	bl	8002448 <xTaskResumeAll>
    }
 80030ba:	bf00      	nop
 80030bc:	3710      	adds	r7, #16
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	20000248 	.word	0x20000248
 80030c8:	2000024c 	.word	0x2000024c
 80030cc:	e000ed04 	.word	0xe000ed04

080030d0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80030d0:	b480      	push	{r7}
 80030d2:	b085      	sub	sp, #20
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80030d8:	4b0e      	ldr	r3, [pc, #56]	; (8003114 <prvGetNextExpireTime+0x44>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d101      	bne.n	80030e6 <prvGetNextExpireTime+0x16>
 80030e2:	2201      	movs	r2, #1
 80030e4:	e000      	b.n	80030e8 <prvGetNextExpireTime+0x18>
 80030e6:	2200      	movs	r2, #0
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d105      	bne.n	8003100 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80030f4:	4b07      	ldr	r3, [pc, #28]	; (8003114 <prvGetNextExpireTime+0x44>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	60fb      	str	r3, [r7, #12]
 80030fe:	e001      	b.n	8003104 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003100:	2300      	movs	r3, #0
 8003102:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003104:	68fb      	ldr	r3, [r7, #12]
    }
 8003106:	4618      	mov	r0, r3
 8003108:	3714      	adds	r7, #20
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	20000244 	.word	0x20000244

08003118 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003120:	f7ff fa80 	bl	8002624 <xTaskGetTickCount>
 8003124:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003126:	4b0b      	ldr	r3, [pc, #44]	; (8003154 <prvSampleTimeNow+0x3c>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68fa      	ldr	r2, [r7, #12]
 800312c:	429a      	cmp	r2, r3
 800312e:	d205      	bcs.n	800313c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003130:	f000 f912 	bl	8003358 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	601a      	str	r2, [r3, #0]
 800313a:	e002      	b.n	8003142 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003142:	4a04      	ldr	r2, [pc, #16]	; (8003154 <prvSampleTimeNow+0x3c>)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003148:	68fb      	ldr	r3, [r7, #12]
    }
 800314a:	4618      	mov	r0, r3
 800314c:	3710      	adds	r7, #16
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	20000254 	.word	0x20000254

08003158 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003158:	b580      	push	{r7, lr}
 800315a:	b086      	sub	sp, #24
 800315c:	af00      	add	r7, sp, #0
 800315e:	60f8      	str	r0, [r7, #12]
 8003160:	60b9      	str	r1, [r7, #8]
 8003162:	607a      	str	r2, [r7, #4]
 8003164:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003166:	2300      	movs	r3, #0
 8003168:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	68ba      	ldr	r2, [r7, #8]
 800316e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	68fa      	ldr	r2, [r7, #12]
 8003174:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003176:	68ba      	ldr	r2, [r7, #8]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	429a      	cmp	r2, r3
 800317c:	d812      	bhi.n	80031a4 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	1ad2      	subs	r2, r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	699b      	ldr	r3, [r3, #24]
 8003188:	429a      	cmp	r2, r3
 800318a:	d302      	bcc.n	8003192 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800318c:	2301      	movs	r3, #1
 800318e:	617b      	str	r3, [r7, #20]
 8003190:	e01b      	b.n	80031ca <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003192:	4b10      	ldr	r3, [pc, #64]	; (80031d4 <prvInsertTimerInActiveList+0x7c>)
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	3304      	adds	r3, #4
 800319a:	4619      	mov	r1, r3
 800319c:	4610      	mov	r0, r2
 800319e:	f7fe fc5c 	bl	8001a5a <vListInsert>
 80031a2:	e012      	b.n	80031ca <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d206      	bcs.n	80031ba <prvInsertTimerInActiveList+0x62>
 80031ac:	68ba      	ldr	r2, [r7, #8]
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d302      	bcc.n	80031ba <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80031b4:	2301      	movs	r3, #1
 80031b6:	617b      	str	r3, [r7, #20]
 80031b8:	e007      	b.n	80031ca <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80031ba:	4b07      	ldr	r3, [pc, #28]	; (80031d8 <prvInsertTimerInActiveList+0x80>)
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	3304      	adds	r3, #4
 80031c2:	4619      	mov	r1, r3
 80031c4:	4610      	mov	r0, r2
 80031c6:	f7fe fc48 	bl	8001a5a <vListInsert>
            }
        }

        return xProcessTimerNow;
 80031ca:	697b      	ldr	r3, [r7, #20]
    }
 80031cc:	4618      	mov	r0, r3
 80031ce:	3718      	adds	r7, #24
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	20000248 	.word	0x20000248
 80031d8:	20000244 	.word	0x20000244

080031dc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80031dc:	b580      	push	{r7, lr}
 80031de:	b088      	sub	sp, #32
 80031e0:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80031e2:	e0a6      	b.n	8003332 <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	f2c0 80a3 	blt.w	8003332 <prvProcessReceivedCommands+0x156>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	695b      	ldr	r3, [r3, #20]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d004      	beq.n	8003202 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	3304      	adds	r3, #4
 80031fc:	4618      	mov	r0, r3
 80031fe:	f7fe fc65 	bl	8001acc <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003202:	1d3b      	adds	r3, r7, #4
 8003204:	4618      	mov	r0, r3
 8003206:	f7ff ff87 	bl	8003118 <prvSampleTimeNow>
 800320a:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	3b01      	subs	r3, #1
 8003210:	2b08      	cmp	r3, #8
 8003212:	f200 808d 	bhi.w	8003330 <prvProcessReceivedCommands+0x154>
 8003216:	a201      	add	r2, pc, #4	; (adr r2, 800321c <prvProcessReceivedCommands+0x40>)
 8003218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800321c:	08003241 	.word	0x08003241
 8003220:	08003241 	.word	0x08003241
 8003224:	080032a9 	.word	0x080032a9
 8003228:	080032bd 	.word	0x080032bd
 800322c:	08003307 	.word	0x08003307
 8003230:	08003241 	.word	0x08003241
 8003234:	08003241 	.word	0x08003241
 8003238:	080032a9 	.word	0x080032a9
 800323c:	080032bd 	.word	0x080032bd
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003246:	f043 0301 	orr.w	r3, r3, #1
 800324a:	b2da      	uxtb	r2, r3
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003252:	68fa      	ldr	r2, [r7, #12]
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	699b      	ldr	r3, [r3, #24]
 8003258:	18d1      	adds	r1, r2, r3
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	69f8      	ldr	r0, [r7, #28]
 8003260:	f7ff ff7a 	bl	8003158 <prvInsertTimerInActiveList>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d063      	beq.n	8003332 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003270:	f003 0304 	and.w	r3, r3, #4
 8003274:	2b00      	cmp	r3, #0
 8003276:	d009      	beq.n	800328c <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003278:	68fa      	ldr	r2, [r7, #12]
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	699b      	ldr	r3, [r3, #24]
 800327e:	4413      	add	r3, r2
 8003280:	69ba      	ldr	r2, [r7, #24]
 8003282:	4619      	mov	r1, r3
 8003284:	69f8      	ldr	r0, [r7, #28]
 8003286:	f7ff fe71 	bl	8002f6c <prvReloadTimer>
 800328a:	e008      	b.n	800329e <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003292:	f023 0301 	bic.w	r3, r3, #1
 8003296:	b2da      	uxtb	r2, r3
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	6a1b      	ldr	r3, [r3, #32]
 80032a2:	69f8      	ldr	r0, [r7, #28]
 80032a4:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80032a6:	e044      	b.n	8003332 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80032ae:	f023 0301 	bic.w	r3, r3, #1
 80032b2:	b2da      	uxtb	r2, r3
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80032ba:	e03a      	b.n	8003332 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80032c2:	f043 0301 	orr.w	r3, r3, #1
 80032c6:	b2da      	uxtb	r2, r3
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80032ce:	68fa      	ldr	r2, [r7, #12]
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	699b      	ldr	r3, [r3, #24]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d10a      	bne.n	80032f2 <prvProcessReceivedCommands+0x116>
        __asm volatile
 80032dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032e0:	f383 8811 	msr	BASEPRI, r3
 80032e4:	f3bf 8f6f 	isb	sy
 80032e8:	f3bf 8f4f 	dsb	sy
 80032ec:	617b      	str	r3, [r7, #20]
    }
 80032ee:	bf00      	nop
 80032f0:	e7fe      	b.n	80032f0 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	699a      	ldr	r2, [r3, #24]
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	18d1      	adds	r1, r2, r3
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	69ba      	ldr	r2, [r7, #24]
 80032fe:	69f8      	ldr	r0, [r7, #28]
 8003300:	f7ff ff2a 	bl	8003158 <prvInsertTimerInActiveList>
                        break;
 8003304:	e015      	b.n	8003332 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800330c:	f003 0302 	and.w	r3, r3, #2
 8003310:	2b00      	cmp	r3, #0
 8003312:	d103      	bne.n	800331c <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8003314:	69f8      	ldr	r0, [r7, #28]
 8003316:	f000 fb43 	bl	80039a0 <vPortFree>
 800331a:	e00a      	b.n	8003332 <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003322:	f023 0301 	bic.w	r3, r3, #1
 8003326:	b2da      	uxtb	r2, r3
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800332e:	e000      	b.n	8003332 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
 8003330:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003332:	4b08      	ldr	r3, [pc, #32]	; (8003354 <prvProcessReceivedCommands+0x178>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f107 0108 	add.w	r1, r7, #8
 800333a:	2200      	movs	r2, #0
 800333c:	4618      	mov	r0, r3
 800333e:	f7fe fce3 	bl	8001d08 <xQueueReceive>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	f47f af4d 	bne.w	80031e4 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800334a:	bf00      	nop
 800334c:	bf00      	nop
 800334e:	3720      	adds	r7, #32
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	2000024c 	.word	0x2000024c

08003358 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800335e:	e009      	b.n	8003374 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003360:	4b0e      	ldr	r3, [pc, #56]	; (800339c <prvSwitchTimerLists+0x44>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800336a:	f04f 31ff 	mov.w	r1, #4294967295
 800336e:	6838      	ldr	r0, [r7, #0]
 8003370:	f7ff fe1e 	bl	8002fb0 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003374:	4b09      	ldr	r3, [pc, #36]	; (800339c <prvSwitchTimerLists+0x44>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d1f0      	bne.n	8003360 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800337e:	4b07      	ldr	r3, [pc, #28]	; (800339c <prvSwitchTimerLists+0x44>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8003384:	4b06      	ldr	r3, [pc, #24]	; (80033a0 <prvSwitchTimerLists+0x48>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a04      	ldr	r2, [pc, #16]	; (800339c <prvSwitchTimerLists+0x44>)
 800338a:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800338c:	4a04      	ldr	r2, [pc, #16]	; (80033a0 <prvSwitchTimerLists+0x48>)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6013      	str	r3, [r2, #0]
    }
 8003392:	bf00      	nop
 8003394:	3708      	adds	r7, #8
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	20000244 	.word	0x20000244
 80033a0:	20000248 	.word	0x20000248

080033a4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80033a4:	b580      	push	{r7, lr}
 80033a6:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80033a8:	f000 f95e 	bl	8003668 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80033ac:	4b12      	ldr	r3, [pc, #72]	; (80033f8 <prvCheckForValidListAndQueue+0x54>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d11d      	bne.n	80033f0 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80033b4:	4811      	ldr	r0, [pc, #68]	; (80033fc <prvCheckForValidListAndQueue+0x58>)
 80033b6:	f7fe fb23 	bl	8001a00 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80033ba:	4811      	ldr	r0, [pc, #68]	; (8003400 <prvCheckForValidListAndQueue+0x5c>)
 80033bc:	f7fe fb20 	bl	8001a00 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80033c0:	4b10      	ldr	r3, [pc, #64]	; (8003404 <prvCheckForValidListAndQueue+0x60>)
 80033c2:	4a0e      	ldr	r2, [pc, #56]	; (80033fc <prvCheckForValidListAndQueue+0x58>)
 80033c4:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80033c6:	4b10      	ldr	r3, [pc, #64]	; (8003408 <prvCheckForValidListAndQueue+0x64>)
 80033c8:	4a0d      	ldr	r2, [pc, #52]	; (8003400 <prvCheckForValidListAndQueue+0x5c>)
 80033ca:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80033cc:	2200      	movs	r2, #0
 80033ce:	210c      	movs	r1, #12
 80033d0:	200a      	movs	r0, #10
 80033d2:	f7fe fc27 	bl	8001c24 <xQueueGenericCreate>
 80033d6:	4603      	mov	r3, r0
 80033d8:	4a07      	ldr	r2, [pc, #28]	; (80033f8 <prvCheckForValidListAndQueue+0x54>)
 80033da:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 80033dc:	4b06      	ldr	r3, [pc, #24]	; (80033f8 <prvCheckForValidListAndQueue+0x54>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d005      	beq.n	80033f0 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80033e4:	4b04      	ldr	r3, [pc, #16]	; (80033f8 <prvCheckForValidListAndQueue+0x54>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4908      	ldr	r1, [pc, #32]	; (800340c <prvCheckForValidListAndQueue+0x68>)
 80033ea:	4618      	mov	r0, r3
 80033ec:	f7fe fdee 	bl	8001fcc <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80033f0:	f000 f96a 	bl	80036c8 <vPortExitCritical>
    }
 80033f4:	bf00      	nop
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	2000024c 	.word	0x2000024c
 80033fc:	2000021c 	.word	0x2000021c
 8003400:	20000230 	.word	0x20000230
 8003404:	20000244 	.word	0x20000244
 8003408:	20000248 	.word	0x20000248
 800340c:	080045b0 	.word	0x080045b0

08003410 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003410:	b480      	push	{r7}
 8003412:	b085      	sub	sp, #20
 8003414:	af00      	add	r7, sp, #0
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	60b9      	str	r1, [r7, #8]
 800341a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	3b04      	subs	r3, #4
 8003420:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003428:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	3b04      	subs	r3, #4
 800342e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	f023 0201 	bic.w	r2, r3, #1
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	3b04      	subs	r3, #4
 800343e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003440:	4a0c      	ldr	r2, [pc, #48]	; (8003474 <pxPortInitialiseStack+0x64>)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	3b14      	subs	r3, #20
 800344a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	3b04      	subs	r3, #4
 8003456:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f06f 0202 	mvn.w	r2, #2
 800345e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	3b20      	subs	r3, #32
 8003464:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003466:	68fb      	ldr	r3, [r7, #12]
}
 8003468:	4618      	mov	r0, r3
 800346a:	3714      	adds	r7, #20
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr
 8003474:	08003479 	.word	0x08003479

08003478 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003478:	b480      	push	{r7}
 800347a:	b085      	sub	sp, #20
 800347c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800347e:	2300      	movs	r3, #0
 8003480:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003482:	4b12      	ldr	r3, [pc, #72]	; (80034cc <prvTaskExitError+0x54>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800348a:	d00a      	beq.n	80034a2 <prvTaskExitError+0x2a>
        __asm volatile
 800348c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003490:	f383 8811 	msr	BASEPRI, r3
 8003494:	f3bf 8f6f 	isb	sy
 8003498:	f3bf 8f4f 	dsb	sy
 800349c:	60fb      	str	r3, [r7, #12]
    }
 800349e:	bf00      	nop
 80034a0:	e7fe      	b.n	80034a0 <prvTaskExitError+0x28>
        __asm volatile
 80034a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034a6:	f383 8811 	msr	BASEPRI, r3
 80034aa:	f3bf 8f6f 	isb	sy
 80034ae:	f3bf 8f4f 	dsb	sy
 80034b2:	60bb      	str	r3, [r7, #8]
    }
 80034b4:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80034b6:	bf00      	nop
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d0fc      	beq.n	80034b8 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80034be:	bf00      	nop
 80034c0:	bf00      	nop
 80034c2:	3714      	adds	r7, #20
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr
 80034cc:	20000010 	.word	0x20000010

080034d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80034d0:	4b07      	ldr	r3, [pc, #28]	; (80034f0 <pxCurrentTCBConst2>)
 80034d2:	6819      	ldr	r1, [r3, #0]
 80034d4:	6808      	ldr	r0, [r1, #0]
 80034d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034da:	f380 8809 	msr	PSP, r0
 80034de:	f3bf 8f6f 	isb	sy
 80034e2:	f04f 0000 	mov.w	r0, #0
 80034e6:	f380 8811 	msr	BASEPRI, r0
 80034ea:	4770      	bx	lr
 80034ec:	f3af 8000 	nop.w

080034f0 <pxCurrentTCBConst2>:
 80034f0:	20000118 	.word	0x20000118
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80034f4:	bf00      	nop
 80034f6:	bf00      	nop

080034f8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80034f8:	4808      	ldr	r0, [pc, #32]	; (800351c <prvPortStartFirstTask+0x24>)
 80034fa:	6800      	ldr	r0, [r0, #0]
 80034fc:	6800      	ldr	r0, [r0, #0]
 80034fe:	f380 8808 	msr	MSP, r0
 8003502:	f04f 0000 	mov.w	r0, #0
 8003506:	f380 8814 	msr	CONTROL, r0
 800350a:	b662      	cpsie	i
 800350c:	b661      	cpsie	f
 800350e:	f3bf 8f4f 	dsb	sy
 8003512:	f3bf 8f6f 	isb	sy
 8003516:	df00      	svc	0
 8003518:	bf00      	nop
 800351a:	0000      	.short	0x0000
 800351c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003520:	bf00      	nop
 8003522:	bf00      	nop

08003524 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b086      	sub	sp, #24
 8003528:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800352a:	4b46      	ldr	r3, [pc, #280]	; (8003644 <xPortStartScheduler+0x120>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a46      	ldr	r2, [pc, #280]	; (8003648 <xPortStartScheduler+0x124>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d10a      	bne.n	800354a <xPortStartScheduler+0x26>
        __asm volatile
 8003534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003538:	f383 8811 	msr	BASEPRI, r3
 800353c:	f3bf 8f6f 	isb	sy
 8003540:	f3bf 8f4f 	dsb	sy
 8003544:	613b      	str	r3, [r7, #16]
    }
 8003546:	bf00      	nop
 8003548:	e7fe      	b.n	8003548 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800354a:	4b3e      	ldr	r3, [pc, #248]	; (8003644 <xPortStartScheduler+0x120>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a3f      	ldr	r2, [pc, #252]	; (800364c <xPortStartScheduler+0x128>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d10a      	bne.n	800356a <xPortStartScheduler+0x46>
        __asm volatile
 8003554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003558:	f383 8811 	msr	BASEPRI, r3
 800355c:	f3bf 8f6f 	isb	sy
 8003560:	f3bf 8f4f 	dsb	sy
 8003564:	60fb      	str	r3, [r7, #12]
    }
 8003566:	bf00      	nop
 8003568:	e7fe      	b.n	8003568 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800356a:	4b39      	ldr	r3, [pc, #228]	; (8003650 <xPortStartScheduler+0x12c>)
 800356c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	b2db      	uxtb	r3, r3
 8003574:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	22ff      	movs	r2, #255	; 0xff
 800357a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	b2db      	uxtb	r3, r3
 8003582:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003584:	78fb      	ldrb	r3, [r7, #3]
 8003586:	b2db      	uxtb	r3, r3
 8003588:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800358c:	b2da      	uxtb	r2, r3
 800358e:	4b31      	ldr	r3, [pc, #196]	; (8003654 <xPortStartScheduler+0x130>)
 8003590:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003592:	4b31      	ldr	r3, [pc, #196]	; (8003658 <xPortStartScheduler+0x134>)
 8003594:	2207      	movs	r2, #7
 8003596:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003598:	e009      	b.n	80035ae <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 800359a:	4b2f      	ldr	r3, [pc, #188]	; (8003658 <xPortStartScheduler+0x134>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	3b01      	subs	r3, #1
 80035a0:	4a2d      	ldr	r2, [pc, #180]	; (8003658 <xPortStartScheduler+0x134>)
 80035a2:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80035a4:	78fb      	ldrb	r3, [r7, #3]
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	005b      	lsls	r3, r3, #1
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80035ae:	78fb      	ldrb	r3, [r7, #3]
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035b6:	2b80      	cmp	r3, #128	; 0x80
 80035b8:	d0ef      	beq.n	800359a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80035ba:	4b27      	ldr	r3, [pc, #156]	; (8003658 <xPortStartScheduler+0x134>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f1c3 0307 	rsb	r3, r3, #7
 80035c2:	2b04      	cmp	r3, #4
 80035c4:	d00a      	beq.n	80035dc <xPortStartScheduler+0xb8>
        __asm volatile
 80035c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ca:	f383 8811 	msr	BASEPRI, r3
 80035ce:	f3bf 8f6f 	isb	sy
 80035d2:	f3bf 8f4f 	dsb	sy
 80035d6:	60bb      	str	r3, [r7, #8]
    }
 80035d8:	bf00      	nop
 80035da:	e7fe      	b.n	80035da <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80035dc:	4b1e      	ldr	r3, [pc, #120]	; (8003658 <xPortStartScheduler+0x134>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	021b      	lsls	r3, r3, #8
 80035e2:	4a1d      	ldr	r2, [pc, #116]	; (8003658 <xPortStartScheduler+0x134>)
 80035e4:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80035e6:	4b1c      	ldr	r3, [pc, #112]	; (8003658 <xPortStartScheduler+0x134>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80035ee:	4a1a      	ldr	r2, [pc, #104]	; (8003658 <xPortStartScheduler+0x134>)
 80035f0:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	b2da      	uxtb	r2, r3
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80035fa:	4b18      	ldr	r3, [pc, #96]	; (800365c <xPortStartScheduler+0x138>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a17      	ldr	r2, [pc, #92]	; (800365c <xPortStartScheduler+0x138>)
 8003600:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003604:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003606:	4b15      	ldr	r3, [pc, #84]	; (800365c <xPortStartScheduler+0x138>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a14      	ldr	r2, [pc, #80]	; (800365c <xPortStartScheduler+0x138>)
 800360c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003610:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003612:	f000 f8db 	bl	80037cc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003616:	4b12      	ldr	r3, [pc, #72]	; (8003660 <xPortStartScheduler+0x13c>)
 8003618:	2200      	movs	r2, #0
 800361a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800361c:	f000 f8fa 	bl	8003814 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003620:	4b10      	ldr	r3, [pc, #64]	; (8003664 <xPortStartScheduler+0x140>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a0f      	ldr	r2, [pc, #60]	; (8003664 <xPortStartScheduler+0x140>)
 8003626:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800362a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800362c:	f7ff ff64 	bl	80034f8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003630:	f7ff f8fc 	bl	800282c <vTaskSwitchContext>
    prvTaskExitError();
 8003634:	f7ff ff20 	bl	8003478 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3718      	adds	r7, #24
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	e000ed00 	.word	0xe000ed00
 8003648:	410fc271 	.word	0x410fc271
 800364c:	410fc270 	.word	0x410fc270
 8003650:	e000e400 	.word	0xe000e400
 8003654:	20000258 	.word	0x20000258
 8003658:	2000025c 	.word	0x2000025c
 800365c:	e000ed20 	.word	0xe000ed20
 8003660:	20000010 	.word	0x20000010
 8003664:	e000ef34 	.word	0xe000ef34

08003668 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
        __asm volatile
 800366e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003672:	f383 8811 	msr	BASEPRI, r3
 8003676:	f3bf 8f6f 	isb	sy
 800367a:	f3bf 8f4f 	dsb	sy
 800367e:	607b      	str	r3, [r7, #4]
    }
 8003680:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003682:	4b0f      	ldr	r3, [pc, #60]	; (80036c0 <vPortEnterCritical+0x58>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	3301      	adds	r3, #1
 8003688:	4a0d      	ldr	r2, [pc, #52]	; (80036c0 <vPortEnterCritical+0x58>)
 800368a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800368c:	4b0c      	ldr	r3, [pc, #48]	; (80036c0 <vPortEnterCritical+0x58>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2b01      	cmp	r3, #1
 8003692:	d10f      	bne.n	80036b4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003694:	4b0b      	ldr	r3, [pc, #44]	; (80036c4 <vPortEnterCritical+0x5c>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	b2db      	uxtb	r3, r3
 800369a:	2b00      	cmp	r3, #0
 800369c:	d00a      	beq.n	80036b4 <vPortEnterCritical+0x4c>
        __asm volatile
 800369e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036a2:	f383 8811 	msr	BASEPRI, r3
 80036a6:	f3bf 8f6f 	isb	sy
 80036aa:	f3bf 8f4f 	dsb	sy
 80036ae:	603b      	str	r3, [r7, #0]
    }
 80036b0:	bf00      	nop
 80036b2:	e7fe      	b.n	80036b2 <vPortEnterCritical+0x4a>
    }
}
 80036b4:	bf00      	nop
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr
 80036c0:	20000010 	.word	0x20000010
 80036c4:	e000ed04 	.word	0xe000ed04

080036c8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80036ce:	4b12      	ldr	r3, [pc, #72]	; (8003718 <vPortExitCritical+0x50>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d10a      	bne.n	80036ec <vPortExitCritical+0x24>
        __asm volatile
 80036d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036da:	f383 8811 	msr	BASEPRI, r3
 80036de:	f3bf 8f6f 	isb	sy
 80036e2:	f3bf 8f4f 	dsb	sy
 80036e6:	607b      	str	r3, [r7, #4]
    }
 80036e8:	bf00      	nop
 80036ea:	e7fe      	b.n	80036ea <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80036ec:	4b0a      	ldr	r3, [pc, #40]	; (8003718 <vPortExitCritical+0x50>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	3b01      	subs	r3, #1
 80036f2:	4a09      	ldr	r2, [pc, #36]	; (8003718 <vPortExitCritical+0x50>)
 80036f4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80036f6:	4b08      	ldr	r3, [pc, #32]	; (8003718 <vPortExitCritical+0x50>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d105      	bne.n	800370a <vPortExitCritical+0x42>
 80036fe:	2300      	movs	r3, #0
 8003700:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003708:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800370a:	bf00      	nop
 800370c:	370c      	adds	r7, #12
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	20000010 	.word	0x20000010
 800371c:	00000000 	.word	0x00000000

08003720 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003720:	f3ef 8009 	mrs	r0, PSP
 8003724:	f3bf 8f6f 	isb	sy
 8003728:	4b15      	ldr	r3, [pc, #84]	; (8003780 <pxCurrentTCBConst>)
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	f01e 0f10 	tst.w	lr, #16
 8003730:	bf08      	it	eq
 8003732:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003736:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800373a:	6010      	str	r0, [r2, #0]
 800373c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003740:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003744:	f380 8811 	msr	BASEPRI, r0
 8003748:	f3bf 8f4f 	dsb	sy
 800374c:	f3bf 8f6f 	isb	sy
 8003750:	f7ff f86c 	bl	800282c <vTaskSwitchContext>
 8003754:	f04f 0000 	mov.w	r0, #0
 8003758:	f380 8811 	msr	BASEPRI, r0
 800375c:	bc09      	pop	{r0, r3}
 800375e:	6819      	ldr	r1, [r3, #0]
 8003760:	6808      	ldr	r0, [r1, #0]
 8003762:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003766:	f01e 0f10 	tst.w	lr, #16
 800376a:	bf08      	it	eq
 800376c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003770:	f380 8809 	msr	PSP, r0
 8003774:	f3bf 8f6f 	isb	sy
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	f3af 8000 	nop.w

08003780 <pxCurrentTCBConst>:
 8003780:	20000118 	.word	0x20000118
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003784:	bf00      	nop
 8003786:	bf00      	nop

08003788 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
        __asm volatile
 800378e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003792:	f383 8811 	msr	BASEPRI, r3
 8003796:	f3bf 8f6f 	isb	sy
 800379a:	f3bf 8f4f 	dsb	sy
 800379e:	607b      	str	r3, [r7, #4]
    }
 80037a0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80037a2:	f7fe ff4f 	bl	8002644 <xTaskIncrementTick>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d003      	beq.n	80037b4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80037ac:	4b06      	ldr	r3, [pc, #24]	; (80037c8 <SysTick_Handler+0x40>)
 80037ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037b2:	601a      	str	r2, [r3, #0]
 80037b4:	2300      	movs	r3, #0
 80037b6:	603b      	str	r3, [r7, #0]
        __asm volatile
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	f383 8811 	msr	BASEPRI, r3
    }
 80037be:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80037c0:	bf00      	nop
 80037c2:	3708      	adds	r7, #8
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	e000ed04 	.word	0xe000ed04

080037cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80037cc:	b480      	push	{r7}
 80037ce:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80037d0:	4b0b      	ldr	r3, [pc, #44]	; (8003800 <vPortSetupTimerInterrupt+0x34>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80037d6:	4b0b      	ldr	r3, [pc, #44]	; (8003804 <vPortSetupTimerInterrupt+0x38>)
 80037d8:	2200      	movs	r2, #0
 80037da:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80037dc:	4b0a      	ldr	r3, [pc, #40]	; (8003808 <vPortSetupTimerInterrupt+0x3c>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a0a      	ldr	r2, [pc, #40]	; (800380c <vPortSetupTimerInterrupt+0x40>)
 80037e2:	fba2 2303 	umull	r2, r3, r2, r3
 80037e6:	099b      	lsrs	r3, r3, #6
 80037e8:	4a09      	ldr	r2, [pc, #36]	; (8003810 <vPortSetupTimerInterrupt+0x44>)
 80037ea:	3b01      	subs	r3, #1
 80037ec:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80037ee:	4b04      	ldr	r3, [pc, #16]	; (8003800 <vPortSetupTimerInterrupt+0x34>)
 80037f0:	2207      	movs	r2, #7
 80037f2:	601a      	str	r2, [r3, #0]
}
 80037f4:	bf00      	nop
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	e000e010 	.word	0xe000e010
 8003804:	e000e018 	.word	0xe000e018
 8003808:	20000000 	.word	0x20000000
 800380c:	10624dd3 	.word	0x10624dd3
 8003810:	e000e014 	.word	0xe000e014

08003814 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003814:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003824 <vPortEnableVFP+0x10>
 8003818:	6801      	ldr	r1, [r0, #0]
 800381a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800381e:	6001      	str	r1, [r0, #0]
 8003820:	4770      	bx	lr
 8003822:	0000      	.short	0x0000
 8003824:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003828:	bf00      	nop
 800382a:	bf00      	nop

0800382c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b08a      	sub	sp, #40	; 0x28
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8003834:	2300      	movs	r3, #0
 8003836:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8003838:	f7fe fdf8 	bl	800242c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800383c:	4b53      	ldr	r3, [pc, #332]	; (800398c <pvPortMalloc+0x160>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d101      	bne.n	8003848 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003844:	f000 f908 	bl	8003a58 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d012      	beq.n	8003874 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800384e:	2208      	movs	r2, #8
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f003 0307 	and.w	r3, r3, #7
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	3308      	adds	r3, #8
 800385a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	43db      	mvns	r3, r3
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	429a      	cmp	r2, r3
 8003864:	d804      	bhi.n	8003870 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	4413      	add	r3, r2
 800386c:	607b      	str	r3, [r7, #4]
 800386e:	e001      	b.n	8003874 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8003870:	2300      	movs	r3, #0
 8003872:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2b00      	cmp	r3, #0
 8003878:	db70      	blt.n	800395c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d06d      	beq.n	800395c <pvPortMalloc+0x130>
 8003880:	4b43      	ldr	r3, [pc, #268]	; (8003990 <pvPortMalloc+0x164>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	429a      	cmp	r2, r3
 8003888:	d868      	bhi.n	800395c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800388a:	4b42      	ldr	r3, [pc, #264]	; (8003994 <pvPortMalloc+0x168>)
 800388c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800388e:	4b41      	ldr	r3, [pc, #260]	; (8003994 <pvPortMalloc+0x168>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003894:	e004      	b.n	80038a0 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8003896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003898:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800389a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80038a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d903      	bls.n	80038b2 <pvPortMalloc+0x86>
 80038aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d1f1      	bne.n	8003896 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80038b2:	4b36      	ldr	r3, [pc, #216]	; (800398c <pvPortMalloc+0x160>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d04f      	beq.n	800395c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80038bc:	6a3b      	ldr	r3, [r7, #32]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2208      	movs	r2, #8
 80038c2:	4413      	add	r3, r2
 80038c4:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80038c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	6a3b      	ldr	r3, [r7, #32]
 80038cc:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80038ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d0:	685a      	ldr	r2, [r3, #4]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	1ad2      	subs	r2, r2, r3
 80038d6:	2308      	movs	r3, #8
 80038d8:	005b      	lsls	r3, r3, #1
 80038da:	429a      	cmp	r2, r3
 80038dc:	d91f      	bls.n	800391e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80038de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4413      	add	r3, r2
 80038e4:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	f003 0307 	and.w	r3, r3, #7
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d00a      	beq.n	8003906 <pvPortMalloc+0xda>
        __asm volatile
 80038f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038f4:	f383 8811 	msr	BASEPRI, r3
 80038f8:	f3bf 8f6f 	isb	sy
 80038fc:	f3bf 8f4f 	dsb	sy
 8003900:	613b      	str	r3, [r7, #16]
    }
 8003902:	bf00      	nop
 8003904:	e7fe      	b.n	8003904 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003908:	685a      	ldr	r2, [r3, #4]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	1ad2      	subs	r2, r2, r3
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003918:	6978      	ldr	r0, [r7, #20]
 800391a:	f000 f8f9 	bl	8003b10 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800391e:	4b1c      	ldr	r3, [pc, #112]	; (8003990 <pvPortMalloc+0x164>)
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	4a19      	ldr	r2, [pc, #100]	; (8003990 <pvPortMalloc+0x164>)
 800392a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800392c:	4b18      	ldr	r3, [pc, #96]	; (8003990 <pvPortMalloc+0x164>)
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	4b19      	ldr	r3, [pc, #100]	; (8003998 <pvPortMalloc+0x16c>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	429a      	cmp	r2, r3
 8003936:	d203      	bcs.n	8003940 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003938:	4b15      	ldr	r3, [pc, #84]	; (8003990 <pvPortMalloc+0x164>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a16      	ldr	r2, [pc, #88]	; (8003998 <pvPortMalloc+0x16c>)
 800393e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8003940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800394c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394e:	2200      	movs	r2, #0
 8003950:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8003952:	4b12      	ldr	r3, [pc, #72]	; (800399c <pvPortMalloc+0x170>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	3301      	adds	r3, #1
 8003958:	4a10      	ldr	r2, [pc, #64]	; (800399c <pvPortMalloc+0x170>)
 800395a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800395c:	f7fe fd74 	bl	8002448 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	f003 0307 	and.w	r3, r3, #7
 8003966:	2b00      	cmp	r3, #0
 8003968:	d00a      	beq.n	8003980 <pvPortMalloc+0x154>
        __asm volatile
 800396a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800396e:	f383 8811 	msr	BASEPRI, r3
 8003972:	f3bf 8f6f 	isb	sy
 8003976:	f3bf 8f4f 	dsb	sy
 800397a:	60fb      	str	r3, [r7, #12]
    }
 800397c:	bf00      	nop
 800397e:	e7fe      	b.n	800397e <pvPortMalloc+0x152>
    return pvReturn;
 8003980:	69fb      	ldr	r3, [r7, #28]
}
 8003982:	4618      	mov	r0, r3
 8003984:	3728      	adds	r7, #40	; 0x28
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	20001668 	.word	0x20001668
 8003990:	2000166c 	.word	0x2000166c
 8003994:	20001660 	.word	0x20001660
 8003998:	20001670 	.word	0x20001670
 800399c:	20001674 	.word	0x20001674

080039a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b086      	sub	sp, #24
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d049      	beq.n	8003a46 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80039b2:	2308      	movs	r3, #8
 80039b4:	425b      	negs	r3, r3
 80039b6:	697a      	ldr	r2, [r7, #20]
 80039b8:	4413      	add	r3, r2
 80039ba:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	db0a      	blt.n	80039de <vPortFree+0x3e>
        __asm volatile
 80039c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039cc:	f383 8811 	msr	BASEPRI, r3
 80039d0:	f3bf 8f6f 	isb	sy
 80039d4:	f3bf 8f4f 	dsb	sy
 80039d8:	60fb      	str	r3, [r7, #12]
    }
 80039da:	bf00      	nop
 80039dc:	e7fe      	b.n	80039dc <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00a      	beq.n	80039fc <vPortFree+0x5c>
        __asm volatile
 80039e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ea:	f383 8811 	msr	BASEPRI, r3
 80039ee:	f3bf 8f6f 	isb	sy
 80039f2:	f3bf 8f4f 	dsb	sy
 80039f6:	60bb      	str	r3, [r7, #8]
    }
 80039f8:	bf00      	nop
 80039fa:	e7fe      	b.n	80039fa <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	0fdb      	lsrs	r3, r3, #31
 8003a02:	f003 0301 	and.w	r3, r3, #1
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d01c      	beq.n	8003a46 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d118      	bne.n	8003a46 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8003a20:	f7fe fd04 	bl	800242c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	685a      	ldr	r2, [r3, #4]
 8003a28:	4b09      	ldr	r3, [pc, #36]	; (8003a50 <vPortFree+0xb0>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4413      	add	r3, r2
 8003a2e:	4a08      	ldr	r2, [pc, #32]	; (8003a50 <vPortFree+0xb0>)
 8003a30:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003a32:	6938      	ldr	r0, [r7, #16]
 8003a34:	f000 f86c 	bl	8003b10 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003a38:	4b06      	ldr	r3, [pc, #24]	; (8003a54 <vPortFree+0xb4>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	3301      	adds	r3, #1
 8003a3e:	4a05      	ldr	r2, [pc, #20]	; (8003a54 <vPortFree+0xb4>)
 8003a40:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003a42:	f7fe fd01 	bl	8002448 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003a46:	bf00      	nop
 8003a48:	3718      	adds	r7, #24
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	2000166c 	.word	0x2000166c
 8003a54:	20001678 	.word	0x20001678

08003a58 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b085      	sub	sp, #20
 8003a5c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003a5e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003a62:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8003a64:	4b25      	ldr	r3, [pc, #148]	; (8003afc <prvHeapInit+0xa4>)
 8003a66:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f003 0307 	and.w	r3, r3, #7
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d00c      	beq.n	8003a8c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	3307      	adds	r3, #7
 8003a76:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f023 0307 	bic.w	r3, r3, #7
 8003a7e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8003a80:	68ba      	ldr	r2, [r7, #8]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	4a1d      	ldr	r2, [pc, #116]	; (8003afc <prvHeapInit+0xa4>)
 8003a88:	4413      	add	r3, r2
 8003a8a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003a90:	4a1b      	ldr	r2, [pc, #108]	; (8003b00 <prvHeapInit+0xa8>)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003a96:	4b1a      	ldr	r3, [pc, #104]	; (8003b00 <prvHeapInit+0xa8>)
 8003a98:	2200      	movs	r2, #0
 8003a9a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	68ba      	ldr	r2, [r7, #8]
 8003aa0:	4413      	add	r3, r2
 8003aa2:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8003aa4:	2208      	movs	r2, #8
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	1a9b      	subs	r3, r3, r2
 8003aaa:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f023 0307 	bic.w	r3, r3, #7
 8003ab2:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	4a13      	ldr	r2, [pc, #76]	; (8003b04 <prvHeapInit+0xac>)
 8003ab8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003aba:	4b12      	ldr	r3, [pc, #72]	; (8003b04 <prvHeapInit+0xac>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8003ac2:	4b10      	ldr	r3, [pc, #64]	; (8003b04 <prvHeapInit+0xac>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	68fa      	ldr	r2, [r7, #12]
 8003ad2:	1ad2      	subs	r2, r2, r3
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003ad8:	4b0a      	ldr	r3, [pc, #40]	; (8003b04 <prvHeapInit+0xac>)
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	4a08      	ldr	r2, [pc, #32]	; (8003b08 <prvHeapInit+0xb0>)
 8003ae6:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	4a07      	ldr	r2, [pc, #28]	; (8003b0c <prvHeapInit+0xb4>)
 8003aee:	6013      	str	r3, [r2, #0]
}
 8003af0:	bf00      	nop
 8003af2:	3714      	adds	r7, #20
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr
 8003afc:	20000260 	.word	0x20000260
 8003b00:	20001660 	.word	0x20001660
 8003b04:	20001668 	.word	0x20001668
 8003b08:	20001670 	.word	0x20001670
 8003b0c:	2000166c 	.word	0x2000166c

08003b10 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003b10:	b480      	push	{r7}
 8003b12:	b085      	sub	sp, #20
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003b18:	4b28      	ldr	r3, [pc, #160]	; (8003bbc <prvInsertBlockIntoFreeList+0xac>)
 8003b1a:	60fb      	str	r3, [r7, #12]
 8003b1c:	e002      	b.n	8003b24 <prvInsertBlockIntoFreeList+0x14>
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	60fb      	str	r3, [r7, #12]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d8f7      	bhi.n	8003b1e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	68ba      	ldr	r2, [r7, #8]
 8003b38:	4413      	add	r3, r2
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d108      	bne.n	8003b52 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	685a      	ldr	r2, [r3, #4]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	441a      	add	r2, r3
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	68ba      	ldr	r2, [r7, #8]
 8003b5c:	441a      	add	r2, r3
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d118      	bne.n	8003b98 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	4b15      	ldr	r3, [pc, #84]	; (8003bc0 <prvInsertBlockIntoFreeList+0xb0>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d00d      	beq.n	8003b8e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685a      	ldr	r2, [r3, #4]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	441a      	add	r2, r3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	601a      	str	r2, [r3, #0]
 8003b8c:	e008      	b.n	8003ba0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003b8e:	4b0c      	ldr	r3, [pc, #48]	; (8003bc0 <prvInsertBlockIntoFreeList+0xb0>)
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	601a      	str	r2, [r3, #0]
 8003b96:	e003      	b.n	8003ba0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003ba0:	68fa      	ldr	r2, [r7, #12]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d002      	beq.n	8003bae <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003bae:	bf00      	nop
 8003bb0:	3714      	adds	r7, #20
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	20001660 	.word	0x20001660
 8003bc0:	20001668 	.word	0x20001668

08003bc4 <std>:
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	b510      	push	{r4, lr}
 8003bc8:	4604      	mov	r4, r0
 8003bca:	e9c0 3300 	strd	r3, r3, [r0]
 8003bce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003bd2:	6083      	str	r3, [r0, #8]
 8003bd4:	8181      	strh	r1, [r0, #12]
 8003bd6:	6643      	str	r3, [r0, #100]	; 0x64
 8003bd8:	81c2      	strh	r2, [r0, #14]
 8003bda:	6183      	str	r3, [r0, #24]
 8003bdc:	4619      	mov	r1, r3
 8003bde:	2208      	movs	r2, #8
 8003be0:	305c      	adds	r0, #92	; 0x5c
 8003be2:	f000 f9e5 	bl	8003fb0 <memset>
 8003be6:	4b0d      	ldr	r3, [pc, #52]	; (8003c1c <std+0x58>)
 8003be8:	6263      	str	r3, [r4, #36]	; 0x24
 8003bea:	4b0d      	ldr	r3, [pc, #52]	; (8003c20 <std+0x5c>)
 8003bec:	62a3      	str	r3, [r4, #40]	; 0x28
 8003bee:	4b0d      	ldr	r3, [pc, #52]	; (8003c24 <std+0x60>)
 8003bf0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003bf2:	4b0d      	ldr	r3, [pc, #52]	; (8003c28 <std+0x64>)
 8003bf4:	6323      	str	r3, [r4, #48]	; 0x30
 8003bf6:	4b0d      	ldr	r3, [pc, #52]	; (8003c2c <std+0x68>)
 8003bf8:	6224      	str	r4, [r4, #32]
 8003bfa:	429c      	cmp	r4, r3
 8003bfc:	d006      	beq.n	8003c0c <std+0x48>
 8003bfe:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003c02:	4294      	cmp	r4, r2
 8003c04:	d002      	beq.n	8003c0c <std+0x48>
 8003c06:	33d0      	adds	r3, #208	; 0xd0
 8003c08:	429c      	cmp	r4, r3
 8003c0a:	d105      	bne.n	8003c18 <std+0x54>
 8003c0c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003c10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c14:	f000 ba3e 	b.w	8004094 <__retarget_lock_init_recursive>
 8003c18:	bd10      	pop	{r4, pc}
 8003c1a:	bf00      	nop
 8003c1c:	08003e01 	.word	0x08003e01
 8003c20:	08003e23 	.word	0x08003e23
 8003c24:	08003e5b 	.word	0x08003e5b
 8003c28:	08003e7f 	.word	0x08003e7f
 8003c2c:	2000167c 	.word	0x2000167c

08003c30 <stdio_exit_handler>:
 8003c30:	4a02      	ldr	r2, [pc, #8]	; (8003c3c <stdio_exit_handler+0xc>)
 8003c32:	4903      	ldr	r1, [pc, #12]	; (8003c40 <stdio_exit_handler+0x10>)
 8003c34:	4803      	ldr	r0, [pc, #12]	; (8003c44 <stdio_exit_handler+0x14>)
 8003c36:	f000 b869 	b.w	8003d0c <_fwalk_sglue>
 8003c3a:	bf00      	nop
 8003c3c:	20000014 	.word	0x20000014
 8003c40:	080043b5 	.word	0x080043b5
 8003c44:	20000020 	.word	0x20000020

08003c48 <cleanup_stdio>:
 8003c48:	6841      	ldr	r1, [r0, #4]
 8003c4a:	4b0c      	ldr	r3, [pc, #48]	; (8003c7c <cleanup_stdio+0x34>)
 8003c4c:	4299      	cmp	r1, r3
 8003c4e:	b510      	push	{r4, lr}
 8003c50:	4604      	mov	r4, r0
 8003c52:	d001      	beq.n	8003c58 <cleanup_stdio+0x10>
 8003c54:	f000 fbae 	bl	80043b4 <_fflush_r>
 8003c58:	68a1      	ldr	r1, [r4, #8]
 8003c5a:	4b09      	ldr	r3, [pc, #36]	; (8003c80 <cleanup_stdio+0x38>)
 8003c5c:	4299      	cmp	r1, r3
 8003c5e:	d002      	beq.n	8003c66 <cleanup_stdio+0x1e>
 8003c60:	4620      	mov	r0, r4
 8003c62:	f000 fba7 	bl	80043b4 <_fflush_r>
 8003c66:	68e1      	ldr	r1, [r4, #12]
 8003c68:	4b06      	ldr	r3, [pc, #24]	; (8003c84 <cleanup_stdio+0x3c>)
 8003c6a:	4299      	cmp	r1, r3
 8003c6c:	d004      	beq.n	8003c78 <cleanup_stdio+0x30>
 8003c6e:	4620      	mov	r0, r4
 8003c70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c74:	f000 bb9e 	b.w	80043b4 <_fflush_r>
 8003c78:	bd10      	pop	{r4, pc}
 8003c7a:	bf00      	nop
 8003c7c:	2000167c 	.word	0x2000167c
 8003c80:	200016e4 	.word	0x200016e4
 8003c84:	2000174c 	.word	0x2000174c

08003c88 <global_stdio_init.part.0>:
 8003c88:	b510      	push	{r4, lr}
 8003c8a:	4b0b      	ldr	r3, [pc, #44]	; (8003cb8 <global_stdio_init.part.0+0x30>)
 8003c8c:	4c0b      	ldr	r4, [pc, #44]	; (8003cbc <global_stdio_init.part.0+0x34>)
 8003c8e:	4a0c      	ldr	r2, [pc, #48]	; (8003cc0 <global_stdio_init.part.0+0x38>)
 8003c90:	601a      	str	r2, [r3, #0]
 8003c92:	4620      	mov	r0, r4
 8003c94:	2200      	movs	r2, #0
 8003c96:	2104      	movs	r1, #4
 8003c98:	f7ff ff94 	bl	8003bc4 <std>
 8003c9c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	2109      	movs	r1, #9
 8003ca4:	f7ff ff8e 	bl	8003bc4 <std>
 8003ca8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003cac:	2202      	movs	r2, #2
 8003cae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cb2:	2112      	movs	r1, #18
 8003cb4:	f7ff bf86 	b.w	8003bc4 <std>
 8003cb8:	200017b4 	.word	0x200017b4
 8003cbc:	2000167c 	.word	0x2000167c
 8003cc0:	08003c31 	.word	0x08003c31

08003cc4 <__sfp_lock_acquire>:
 8003cc4:	4801      	ldr	r0, [pc, #4]	; (8003ccc <__sfp_lock_acquire+0x8>)
 8003cc6:	f000 b9e6 	b.w	8004096 <__retarget_lock_acquire_recursive>
 8003cca:	bf00      	nop
 8003ccc:	200017bd 	.word	0x200017bd

08003cd0 <__sfp_lock_release>:
 8003cd0:	4801      	ldr	r0, [pc, #4]	; (8003cd8 <__sfp_lock_release+0x8>)
 8003cd2:	f000 b9e1 	b.w	8004098 <__retarget_lock_release_recursive>
 8003cd6:	bf00      	nop
 8003cd8:	200017bd 	.word	0x200017bd

08003cdc <__sinit>:
 8003cdc:	b510      	push	{r4, lr}
 8003cde:	4604      	mov	r4, r0
 8003ce0:	f7ff fff0 	bl	8003cc4 <__sfp_lock_acquire>
 8003ce4:	6a23      	ldr	r3, [r4, #32]
 8003ce6:	b11b      	cbz	r3, 8003cf0 <__sinit+0x14>
 8003ce8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cec:	f7ff bff0 	b.w	8003cd0 <__sfp_lock_release>
 8003cf0:	4b04      	ldr	r3, [pc, #16]	; (8003d04 <__sinit+0x28>)
 8003cf2:	6223      	str	r3, [r4, #32]
 8003cf4:	4b04      	ldr	r3, [pc, #16]	; (8003d08 <__sinit+0x2c>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d1f5      	bne.n	8003ce8 <__sinit+0xc>
 8003cfc:	f7ff ffc4 	bl	8003c88 <global_stdio_init.part.0>
 8003d00:	e7f2      	b.n	8003ce8 <__sinit+0xc>
 8003d02:	bf00      	nop
 8003d04:	08003c49 	.word	0x08003c49
 8003d08:	200017b4 	.word	0x200017b4

08003d0c <_fwalk_sglue>:
 8003d0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d10:	4607      	mov	r7, r0
 8003d12:	4688      	mov	r8, r1
 8003d14:	4614      	mov	r4, r2
 8003d16:	2600      	movs	r6, #0
 8003d18:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003d1c:	f1b9 0901 	subs.w	r9, r9, #1
 8003d20:	d505      	bpl.n	8003d2e <_fwalk_sglue+0x22>
 8003d22:	6824      	ldr	r4, [r4, #0]
 8003d24:	2c00      	cmp	r4, #0
 8003d26:	d1f7      	bne.n	8003d18 <_fwalk_sglue+0xc>
 8003d28:	4630      	mov	r0, r6
 8003d2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d2e:	89ab      	ldrh	r3, [r5, #12]
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d907      	bls.n	8003d44 <_fwalk_sglue+0x38>
 8003d34:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003d38:	3301      	adds	r3, #1
 8003d3a:	d003      	beq.n	8003d44 <_fwalk_sglue+0x38>
 8003d3c:	4629      	mov	r1, r5
 8003d3e:	4638      	mov	r0, r7
 8003d40:	47c0      	blx	r8
 8003d42:	4306      	orrs	r6, r0
 8003d44:	3568      	adds	r5, #104	; 0x68
 8003d46:	e7e9      	b.n	8003d1c <_fwalk_sglue+0x10>

08003d48 <_puts_r>:
 8003d48:	6a03      	ldr	r3, [r0, #32]
 8003d4a:	b570      	push	{r4, r5, r6, lr}
 8003d4c:	6884      	ldr	r4, [r0, #8]
 8003d4e:	4605      	mov	r5, r0
 8003d50:	460e      	mov	r6, r1
 8003d52:	b90b      	cbnz	r3, 8003d58 <_puts_r+0x10>
 8003d54:	f7ff ffc2 	bl	8003cdc <__sinit>
 8003d58:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003d5a:	07db      	lsls	r3, r3, #31
 8003d5c:	d405      	bmi.n	8003d6a <_puts_r+0x22>
 8003d5e:	89a3      	ldrh	r3, [r4, #12]
 8003d60:	0598      	lsls	r0, r3, #22
 8003d62:	d402      	bmi.n	8003d6a <_puts_r+0x22>
 8003d64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d66:	f000 f996 	bl	8004096 <__retarget_lock_acquire_recursive>
 8003d6a:	89a3      	ldrh	r3, [r4, #12]
 8003d6c:	0719      	lsls	r1, r3, #28
 8003d6e:	d513      	bpl.n	8003d98 <_puts_r+0x50>
 8003d70:	6923      	ldr	r3, [r4, #16]
 8003d72:	b18b      	cbz	r3, 8003d98 <_puts_r+0x50>
 8003d74:	3e01      	subs	r6, #1
 8003d76:	68a3      	ldr	r3, [r4, #8]
 8003d78:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003d7c:	3b01      	subs	r3, #1
 8003d7e:	60a3      	str	r3, [r4, #8]
 8003d80:	b9e9      	cbnz	r1, 8003dbe <_puts_r+0x76>
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	da2e      	bge.n	8003de4 <_puts_r+0x9c>
 8003d86:	4622      	mov	r2, r4
 8003d88:	210a      	movs	r1, #10
 8003d8a:	4628      	mov	r0, r5
 8003d8c:	f000 f87b 	bl	8003e86 <__swbuf_r>
 8003d90:	3001      	adds	r0, #1
 8003d92:	d007      	beq.n	8003da4 <_puts_r+0x5c>
 8003d94:	250a      	movs	r5, #10
 8003d96:	e007      	b.n	8003da8 <_puts_r+0x60>
 8003d98:	4621      	mov	r1, r4
 8003d9a:	4628      	mov	r0, r5
 8003d9c:	f000 f8b0 	bl	8003f00 <__swsetup_r>
 8003da0:	2800      	cmp	r0, #0
 8003da2:	d0e7      	beq.n	8003d74 <_puts_r+0x2c>
 8003da4:	f04f 35ff 	mov.w	r5, #4294967295
 8003da8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003daa:	07da      	lsls	r2, r3, #31
 8003dac:	d405      	bmi.n	8003dba <_puts_r+0x72>
 8003dae:	89a3      	ldrh	r3, [r4, #12]
 8003db0:	059b      	lsls	r3, r3, #22
 8003db2:	d402      	bmi.n	8003dba <_puts_r+0x72>
 8003db4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003db6:	f000 f96f 	bl	8004098 <__retarget_lock_release_recursive>
 8003dba:	4628      	mov	r0, r5
 8003dbc:	bd70      	pop	{r4, r5, r6, pc}
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	da04      	bge.n	8003dcc <_puts_r+0x84>
 8003dc2:	69a2      	ldr	r2, [r4, #24]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	dc06      	bgt.n	8003dd6 <_puts_r+0x8e>
 8003dc8:	290a      	cmp	r1, #10
 8003dca:	d004      	beq.n	8003dd6 <_puts_r+0x8e>
 8003dcc:	6823      	ldr	r3, [r4, #0]
 8003dce:	1c5a      	adds	r2, r3, #1
 8003dd0:	6022      	str	r2, [r4, #0]
 8003dd2:	7019      	strb	r1, [r3, #0]
 8003dd4:	e7cf      	b.n	8003d76 <_puts_r+0x2e>
 8003dd6:	4622      	mov	r2, r4
 8003dd8:	4628      	mov	r0, r5
 8003dda:	f000 f854 	bl	8003e86 <__swbuf_r>
 8003dde:	3001      	adds	r0, #1
 8003de0:	d1c9      	bne.n	8003d76 <_puts_r+0x2e>
 8003de2:	e7df      	b.n	8003da4 <_puts_r+0x5c>
 8003de4:	6823      	ldr	r3, [r4, #0]
 8003de6:	250a      	movs	r5, #10
 8003de8:	1c5a      	adds	r2, r3, #1
 8003dea:	6022      	str	r2, [r4, #0]
 8003dec:	701d      	strb	r5, [r3, #0]
 8003dee:	e7db      	b.n	8003da8 <_puts_r+0x60>

08003df0 <puts>:
 8003df0:	4b02      	ldr	r3, [pc, #8]	; (8003dfc <puts+0xc>)
 8003df2:	4601      	mov	r1, r0
 8003df4:	6818      	ldr	r0, [r3, #0]
 8003df6:	f7ff bfa7 	b.w	8003d48 <_puts_r>
 8003dfa:	bf00      	nop
 8003dfc:	2000006c 	.word	0x2000006c

08003e00 <__sread>:
 8003e00:	b510      	push	{r4, lr}
 8003e02:	460c      	mov	r4, r1
 8003e04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e08:	f000 f8fc 	bl	8004004 <_read_r>
 8003e0c:	2800      	cmp	r0, #0
 8003e0e:	bfab      	itete	ge
 8003e10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003e12:	89a3      	ldrhlt	r3, [r4, #12]
 8003e14:	181b      	addge	r3, r3, r0
 8003e16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003e1a:	bfac      	ite	ge
 8003e1c:	6563      	strge	r3, [r4, #84]	; 0x54
 8003e1e:	81a3      	strhlt	r3, [r4, #12]
 8003e20:	bd10      	pop	{r4, pc}

08003e22 <__swrite>:
 8003e22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e26:	461f      	mov	r7, r3
 8003e28:	898b      	ldrh	r3, [r1, #12]
 8003e2a:	05db      	lsls	r3, r3, #23
 8003e2c:	4605      	mov	r5, r0
 8003e2e:	460c      	mov	r4, r1
 8003e30:	4616      	mov	r6, r2
 8003e32:	d505      	bpl.n	8003e40 <__swrite+0x1e>
 8003e34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e38:	2302      	movs	r3, #2
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	f000 f8d0 	bl	8003fe0 <_lseek_r>
 8003e40:	89a3      	ldrh	r3, [r4, #12]
 8003e42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e4a:	81a3      	strh	r3, [r4, #12]
 8003e4c:	4632      	mov	r2, r6
 8003e4e:	463b      	mov	r3, r7
 8003e50:	4628      	mov	r0, r5
 8003e52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e56:	f000 b8e7 	b.w	8004028 <_write_r>

08003e5a <__sseek>:
 8003e5a:	b510      	push	{r4, lr}
 8003e5c:	460c      	mov	r4, r1
 8003e5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e62:	f000 f8bd 	bl	8003fe0 <_lseek_r>
 8003e66:	1c43      	adds	r3, r0, #1
 8003e68:	89a3      	ldrh	r3, [r4, #12]
 8003e6a:	bf15      	itete	ne
 8003e6c:	6560      	strne	r0, [r4, #84]	; 0x54
 8003e6e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003e72:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003e76:	81a3      	strheq	r3, [r4, #12]
 8003e78:	bf18      	it	ne
 8003e7a:	81a3      	strhne	r3, [r4, #12]
 8003e7c:	bd10      	pop	{r4, pc}

08003e7e <__sclose>:
 8003e7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e82:	f000 b89d 	b.w	8003fc0 <_close_r>

08003e86 <__swbuf_r>:
 8003e86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e88:	460e      	mov	r6, r1
 8003e8a:	4614      	mov	r4, r2
 8003e8c:	4605      	mov	r5, r0
 8003e8e:	b118      	cbz	r0, 8003e98 <__swbuf_r+0x12>
 8003e90:	6a03      	ldr	r3, [r0, #32]
 8003e92:	b90b      	cbnz	r3, 8003e98 <__swbuf_r+0x12>
 8003e94:	f7ff ff22 	bl	8003cdc <__sinit>
 8003e98:	69a3      	ldr	r3, [r4, #24]
 8003e9a:	60a3      	str	r3, [r4, #8]
 8003e9c:	89a3      	ldrh	r3, [r4, #12]
 8003e9e:	071a      	lsls	r2, r3, #28
 8003ea0:	d525      	bpl.n	8003eee <__swbuf_r+0x68>
 8003ea2:	6923      	ldr	r3, [r4, #16]
 8003ea4:	b31b      	cbz	r3, 8003eee <__swbuf_r+0x68>
 8003ea6:	6823      	ldr	r3, [r4, #0]
 8003ea8:	6922      	ldr	r2, [r4, #16]
 8003eaa:	1a98      	subs	r0, r3, r2
 8003eac:	6963      	ldr	r3, [r4, #20]
 8003eae:	b2f6      	uxtb	r6, r6
 8003eb0:	4283      	cmp	r3, r0
 8003eb2:	4637      	mov	r7, r6
 8003eb4:	dc04      	bgt.n	8003ec0 <__swbuf_r+0x3a>
 8003eb6:	4621      	mov	r1, r4
 8003eb8:	4628      	mov	r0, r5
 8003eba:	f000 fa7b 	bl	80043b4 <_fflush_r>
 8003ebe:	b9e0      	cbnz	r0, 8003efa <__swbuf_r+0x74>
 8003ec0:	68a3      	ldr	r3, [r4, #8]
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	60a3      	str	r3, [r4, #8]
 8003ec6:	6823      	ldr	r3, [r4, #0]
 8003ec8:	1c5a      	adds	r2, r3, #1
 8003eca:	6022      	str	r2, [r4, #0]
 8003ecc:	701e      	strb	r6, [r3, #0]
 8003ece:	6962      	ldr	r2, [r4, #20]
 8003ed0:	1c43      	adds	r3, r0, #1
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d004      	beq.n	8003ee0 <__swbuf_r+0x5a>
 8003ed6:	89a3      	ldrh	r3, [r4, #12]
 8003ed8:	07db      	lsls	r3, r3, #31
 8003eda:	d506      	bpl.n	8003eea <__swbuf_r+0x64>
 8003edc:	2e0a      	cmp	r6, #10
 8003ede:	d104      	bne.n	8003eea <__swbuf_r+0x64>
 8003ee0:	4621      	mov	r1, r4
 8003ee2:	4628      	mov	r0, r5
 8003ee4:	f000 fa66 	bl	80043b4 <_fflush_r>
 8003ee8:	b938      	cbnz	r0, 8003efa <__swbuf_r+0x74>
 8003eea:	4638      	mov	r0, r7
 8003eec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003eee:	4621      	mov	r1, r4
 8003ef0:	4628      	mov	r0, r5
 8003ef2:	f000 f805 	bl	8003f00 <__swsetup_r>
 8003ef6:	2800      	cmp	r0, #0
 8003ef8:	d0d5      	beq.n	8003ea6 <__swbuf_r+0x20>
 8003efa:	f04f 37ff 	mov.w	r7, #4294967295
 8003efe:	e7f4      	b.n	8003eea <__swbuf_r+0x64>

08003f00 <__swsetup_r>:
 8003f00:	b538      	push	{r3, r4, r5, lr}
 8003f02:	4b2a      	ldr	r3, [pc, #168]	; (8003fac <__swsetup_r+0xac>)
 8003f04:	4605      	mov	r5, r0
 8003f06:	6818      	ldr	r0, [r3, #0]
 8003f08:	460c      	mov	r4, r1
 8003f0a:	b118      	cbz	r0, 8003f14 <__swsetup_r+0x14>
 8003f0c:	6a03      	ldr	r3, [r0, #32]
 8003f0e:	b90b      	cbnz	r3, 8003f14 <__swsetup_r+0x14>
 8003f10:	f7ff fee4 	bl	8003cdc <__sinit>
 8003f14:	89a3      	ldrh	r3, [r4, #12]
 8003f16:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003f1a:	0718      	lsls	r0, r3, #28
 8003f1c:	d422      	bmi.n	8003f64 <__swsetup_r+0x64>
 8003f1e:	06d9      	lsls	r1, r3, #27
 8003f20:	d407      	bmi.n	8003f32 <__swsetup_r+0x32>
 8003f22:	2309      	movs	r3, #9
 8003f24:	602b      	str	r3, [r5, #0]
 8003f26:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003f2a:	81a3      	strh	r3, [r4, #12]
 8003f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f30:	e034      	b.n	8003f9c <__swsetup_r+0x9c>
 8003f32:	0758      	lsls	r0, r3, #29
 8003f34:	d512      	bpl.n	8003f5c <__swsetup_r+0x5c>
 8003f36:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f38:	b141      	cbz	r1, 8003f4c <__swsetup_r+0x4c>
 8003f3a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003f3e:	4299      	cmp	r1, r3
 8003f40:	d002      	beq.n	8003f48 <__swsetup_r+0x48>
 8003f42:	4628      	mov	r0, r5
 8003f44:	f000 f8b8 	bl	80040b8 <_free_r>
 8003f48:	2300      	movs	r3, #0
 8003f4a:	6363      	str	r3, [r4, #52]	; 0x34
 8003f4c:	89a3      	ldrh	r3, [r4, #12]
 8003f4e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003f52:	81a3      	strh	r3, [r4, #12]
 8003f54:	2300      	movs	r3, #0
 8003f56:	6063      	str	r3, [r4, #4]
 8003f58:	6923      	ldr	r3, [r4, #16]
 8003f5a:	6023      	str	r3, [r4, #0]
 8003f5c:	89a3      	ldrh	r3, [r4, #12]
 8003f5e:	f043 0308 	orr.w	r3, r3, #8
 8003f62:	81a3      	strh	r3, [r4, #12]
 8003f64:	6923      	ldr	r3, [r4, #16]
 8003f66:	b94b      	cbnz	r3, 8003f7c <__swsetup_r+0x7c>
 8003f68:	89a3      	ldrh	r3, [r4, #12]
 8003f6a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003f6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f72:	d003      	beq.n	8003f7c <__swsetup_r+0x7c>
 8003f74:	4621      	mov	r1, r4
 8003f76:	4628      	mov	r0, r5
 8003f78:	f000 fa6a 	bl	8004450 <__smakebuf_r>
 8003f7c:	89a0      	ldrh	r0, [r4, #12]
 8003f7e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003f82:	f010 0301 	ands.w	r3, r0, #1
 8003f86:	d00a      	beq.n	8003f9e <__swsetup_r+0x9e>
 8003f88:	2300      	movs	r3, #0
 8003f8a:	60a3      	str	r3, [r4, #8]
 8003f8c:	6963      	ldr	r3, [r4, #20]
 8003f8e:	425b      	negs	r3, r3
 8003f90:	61a3      	str	r3, [r4, #24]
 8003f92:	6923      	ldr	r3, [r4, #16]
 8003f94:	b943      	cbnz	r3, 8003fa8 <__swsetup_r+0xa8>
 8003f96:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003f9a:	d1c4      	bne.n	8003f26 <__swsetup_r+0x26>
 8003f9c:	bd38      	pop	{r3, r4, r5, pc}
 8003f9e:	0781      	lsls	r1, r0, #30
 8003fa0:	bf58      	it	pl
 8003fa2:	6963      	ldrpl	r3, [r4, #20]
 8003fa4:	60a3      	str	r3, [r4, #8]
 8003fa6:	e7f4      	b.n	8003f92 <__swsetup_r+0x92>
 8003fa8:	2000      	movs	r0, #0
 8003faa:	e7f7      	b.n	8003f9c <__swsetup_r+0x9c>
 8003fac:	2000006c 	.word	0x2000006c

08003fb0 <memset>:
 8003fb0:	4402      	add	r2, r0
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d100      	bne.n	8003fba <memset+0xa>
 8003fb8:	4770      	bx	lr
 8003fba:	f803 1b01 	strb.w	r1, [r3], #1
 8003fbe:	e7f9      	b.n	8003fb4 <memset+0x4>

08003fc0 <_close_r>:
 8003fc0:	b538      	push	{r3, r4, r5, lr}
 8003fc2:	4d06      	ldr	r5, [pc, #24]	; (8003fdc <_close_r+0x1c>)
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	4604      	mov	r4, r0
 8003fc8:	4608      	mov	r0, r1
 8003fca:	602b      	str	r3, [r5, #0]
 8003fcc:	f7fc fc8d 	bl	80008ea <_close>
 8003fd0:	1c43      	adds	r3, r0, #1
 8003fd2:	d102      	bne.n	8003fda <_close_r+0x1a>
 8003fd4:	682b      	ldr	r3, [r5, #0]
 8003fd6:	b103      	cbz	r3, 8003fda <_close_r+0x1a>
 8003fd8:	6023      	str	r3, [r4, #0]
 8003fda:	bd38      	pop	{r3, r4, r5, pc}
 8003fdc:	200017b8 	.word	0x200017b8

08003fe0 <_lseek_r>:
 8003fe0:	b538      	push	{r3, r4, r5, lr}
 8003fe2:	4d07      	ldr	r5, [pc, #28]	; (8004000 <_lseek_r+0x20>)
 8003fe4:	4604      	mov	r4, r0
 8003fe6:	4608      	mov	r0, r1
 8003fe8:	4611      	mov	r1, r2
 8003fea:	2200      	movs	r2, #0
 8003fec:	602a      	str	r2, [r5, #0]
 8003fee:	461a      	mov	r2, r3
 8003ff0:	f7fc fca2 	bl	8000938 <_lseek>
 8003ff4:	1c43      	adds	r3, r0, #1
 8003ff6:	d102      	bne.n	8003ffe <_lseek_r+0x1e>
 8003ff8:	682b      	ldr	r3, [r5, #0]
 8003ffa:	b103      	cbz	r3, 8003ffe <_lseek_r+0x1e>
 8003ffc:	6023      	str	r3, [r4, #0]
 8003ffe:	bd38      	pop	{r3, r4, r5, pc}
 8004000:	200017b8 	.word	0x200017b8

08004004 <_read_r>:
 8004004:	b538      	push	{r3, r4, r5, lr}
 8004006:	4d07      	ldr	r5, [pc, #28]	; (8004024 <_read_r+0x20>)
 8004008:	4604      	mov	r4, r0
 800400a:	4608      	mov	r0, r1
 800400c:	4611      	mov	r1, r2
 800400e:	2200      	movs	r2, #0
 8004010:	602a      	str	r2, [r5, #0]
 8004012:	461a      	mov	r2, r3
 8004014:	f7fc fc30 	bl	8000878 <_read>
 8004018:	1c43      	adds	r3, r0, #1
 800401a:	d102      	bne.n	8004022 <_read_r+0x1e>
 800401c:	682b      	ldr	r3, [r5, #0]
 800401e:	b103      	cbz	r3, 8004022 <_read_r+0x1e>
 8004020:	6023      	str	r3, [r4, #0]
 8004022:	bd38      	pop	{r3, r4, r5, pc}
 8004024:	200017b8 	.word	0x200017b8

08004028 <_write_r>:
 8004028:	b538      	push	{r3, r4, r5, lr}
 800402a:	4d07      	ldr	r5, [pc, #28]	; (8004048 <_write_r+0x20>)
 800402c:	4604      	mov	r4, r0
 800402e:	4608      	mov	r0, r1
 8004030:	4611      	mov	r1, r2
 8004032:	2200      	movs	r2, #0
 8004034:	602a      	str	r2, [r5, #0]
 8004036:	461a      	mov	r2, r3
 8004038:	f7fc fc3b 	bl	80008b2 <_write>
 800403c:	1c43      	adds	r3, r0, #1
 800403e:	d102      	bne.n	8004046 <_write_r+0x1e>
 8004040:	682b      	ldr	r3, [r5, #0]
 8004042:	b103      	cbz	r3, 8004046 <_write_r+0x1e>
 8004044:	6023      	str	r3, [r4, #0]
 8004046:	bd38      	pop	{r3, r4, r5, pc}
 8004048:	200017b8 	.word	0x200017b8

0800404c <__libc_init_array>:
 800404c:	b570      	push	{r4, r5, r6, lr}
 800404e:	4d0d      	ldr	r5, [pc, #52]	; (8004084 <__libc_init_array+0x38>)
 8004050:	4c0d      	ldr	r4, [pc, #52]	; (8004088 <__libc_init_array+0x3c>)
 8004052:	1b64      	subs	r4, r4, r5
 8004054:	10a4      	asrs	r4, r4, #2
 8004056:	2600      	movs	r6, #0
 8004058:	42a6      	cmp	r6, r4
 800405a:	d109      	bne.n	8004070 <__libc_init_array+0x24>
 800405c:	4d0b      	ldr	r5, [pc, #44]	; (800408c <__libc_init_array+0x40>)
 800405e:	4c0c      	ldr	r4, [pc, #48]	; (8004090 <__libc_init_array+0x44>)
 8004060:	f000 fa72 	bl	8004548 <_init>
 8004064:	1b64      	subs	r4, r4, r5
 8004066:	10a4      	asrs	r4, r4, #2
 8004068:	2600      	movs	r6, #0
 800406a:	42a6      	cmp	r6, r4
 800406c:	d105      	bne.n	800407a <__libc_init_array+0x2e>
 800406e:	bd70      	pop	{r4, r5, r6, pc}
 8004070:	f855 3b04 	ldr.w	r3, [r5], #4
 8004074:	4798      	blx	r3
 8004076:	3601      	adds	r6, #1
 8004078:	e7ee      	b.n	8004058 <__libc_init_array+0xc>
 800407a:	f855 3b04 	ldr.w	r3, [r5], #4
 800407e:	4798      	blx	r3
 8004080:	3601      	adds	r6, #1
 8004082:	e7f2      	b.n	800406a <__libc_init_array+0x1e>
 8004084:	080045d8 	.word	0x080045d8
 8004088:	080045d8 	.word	0x080045d8
 800408c:	080045d8 	.word	0x080045d8
 8004090:	080045dc 	.word	0x080045dc

08004094 <__retarget_lock_init_recursive>:
 8004094:	4770      	bx	lr

08004096 <__retarget_lock_acquire_recursive>:
 8004096:	4770      	bx	lr

08004098 <__retarget_lock_release_recursive>:
 8004098:	4770      	bx	lr

0800409a <memcpy>:
 800409a:	440a      	add	r2, r1
 800409c:	4291      	cmp	r1, r2
 800409e:	f100 33ff 	add.w	r3, r0, #4294967295
 80040a2:	d100      	bne.n	80040a6 <memcpy+0xc>
 80040a4:	4770      	bx	lr
 80040a6:	b510      	push	{r4, lr}
 80040a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80040ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80040b0:	4291      	cmp	r1, r2
 80040b2:	d1f9      	bne.n	80040a8 <memcpy+0xe>
 80040b4:	bd10      	pop	{r4, pc}
	...

080040b8 <_free_r>:
 80040b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80040ba:	2900      	cmp	r1, #0
 80040bc:	d044      	beq.n	8004148 <_free_r+0x90>
 80040be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040c2:	9001      	str	r0, [sp, #4]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	f1a1 0404 	sub.w	r4, r1, #4
 80040ca:	bfb8      	it	lt
 80040cc:	18e4      	addlt	r4, r4, r3
 80040ce:	f000 f8df 	bl	8004290 <__malloc_lock>
 80040d2:	4a1e      	ldr	r2, [pc, #120]	; (800414c <_free_r+0x94>)
 80040d4:	9801      	ldr	r0, [sp, #4]
 80040d6:	6813      	ldr	r3, [r2, #0]
 80040d8:	b933      	cbnz	r3, 80040e8 <_free_r+0x30>
 80040da:	6063      	str	r3, [r4, #4]
 80040dc:	6014      	str	r4, [r2, #0]
 80040de:	b003      	add	sp, #12
 80040e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80040e4:	f000 b8da 	b.w	800429c <__malloc_unlock>
 80040e8:	42a3      	cmp	r3, r4
 80040ea:	d908      	bls.n	80040fe <_free_r+0x46>
 80040ec:	6825      	ldr	r5, [r4, #0]
 80040ee:	1961      	adds	r1, r4, r5
 80040f0:	428b      	cmp	r3, r1
 80040f2:	bf01      	itttt	eq
 80040f4:	6819      	ldreq	r1, [r3, #0]
 80040f6:	685b      	ldreq	r3, [r3, #4]
 80040f8:	1949      	addeq	r1, r1, r5
 80040fa:	6021      	streq	r1, [r4, #0]
 80040fc:	e7ed      	b.n	80040da <_free_r+0x22>
 80040fe:	461a      	mov	r2, r3
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	b10b      	cbz	r3, 8004108 <_free_r+0x50>
 8004104:	42a3      	cmp	r3, r4
 8004106:	d9fa      	bls.n	80040fe <_free_r+0x46>
 8004108:	6811      	ldr	r1, [r2, #0]
 800410a:	1855      	adds	r5, r2, r1
 800410c:	42a5      	cmp	r5, r4
 800410e:	d10b      	bne.n	8004128 <_free_r+0x70>
 8004110:	6824      	ldr	r4, [r4, #0]
 8004112:	4421      	add	r1, r4
 8004114:	1854      	adds	r4, r2, r1
 8004116:	42a3      	cmp	r3, r4
 8004118:	6011      	str	r1, [r2, #0]
 800411a:	d1e0      	bne.n	80040de <_free_r+0x26>
 800411c:	681c      	ldr	r4, [r3, #0]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	6053      	str	r3, [r2, #4]
 8004122:	440c      	add	r4, r1
 8004124:	6014      	str	r4, [r2, #0]
 8004126:	e7da      	b.n	80040de <_free_r+0x26>
 8004128:	d902      	bls.n	8004130 <_free_r+0x78>
 800412a:	230c      	movs	r3, #12
 800412c:	6003      	str	r3, [r0, #0]
 800412e:	e7d6      	b.n	80040de <_free_r+0x26>
 8004130:	6825      	ldr	r5, [r4, #0]
 8004132:	1961      	adds	r1, r4, r5
 8004134:	428b      	cmp	r3, r1
 8004136:	bf04      	itt	eq
 8004138:	6819      	ldreq	r1, [r3, #0]
 800413a:	685b      	ldreq	r3, [r3, #4]
 800413c:	6063      	str	r3, [r4, #4]
 800413e:	bf04      	itt	eq
 8004140:	1949      	addeq	r1, r1, r5
 8004142:	6021      	streq	r1, [r4, #0]
 8004144:	6054      	str	r4, [r2, #4]
 8004146:	e7ca      	b.n	80040de <_free_r+0x26>
 8004148:	b003      	add	sp, #12
 800414a:	bd30      	pop	{r4, r5, pc}
 800414c:	200017c0 	.word	0x200017c0

08004150 <sbrk_aligned>:
 8004150:	b570      	push	{r4, r5, r6, lr}
 8004152:	4e0e      	ldr	r6, [pc, #56]	; (800418c <sbrk_aligned+0x3c>)
 8004154:	460c      	mov	r4, r1
 8004156:	6831      	ldr	r1, [r6, #0]
 8004158:	4605      	mov	r5, r0
 800415a:	b911      	cbnz	r1, 8004162 <sbrk_aligned+0x12>
 800415c:	f000 f9d6 	bl	800450c <_sbrk_r>
 8004160:	6030      	str	r0, [r6, #0]
 8004162:	4621      	mov	r1, r4
 8004164:	4628      	mov	r0, r5
 8004166:	f000 f9d1 	bl	800450c <_sbrk_r>
 800416a:	1c43      	adds	r3, r0, #1
 800416c:	d00a      	beq.n	8004184 <sbrk_aligned+0x34>
 800416e:	1cc4      	adds	r4, r0, #3
 8004170:	f024 0403 	bic.w	r4, r4, #3
 8004174:	42a0      	cmp	r0, r4
 8004176:	d007      	beq.n	8004188 <sbrk_aligned+0x38>
 8004178:	1a21      	subs	r1, r4, r0
 800417a:	4628      	mov	r0, r5
 800417c:	f000 f9c6 	bl	800450c <_sbrk_r>
 8004180:	3001      	adds	r0, #1
 8004182:	d101      	bne.n	8004188 <sbrk_aligned+0x38>
 8004184:	f04f 34ff 	mov.w	r4, #4294967295
 8004188:	4620      	mov	r0, r4
 800418a:	bd70      	pop	{r4, r5, r6, pc}
 800418c:	200017c4 	.word	0x200017c4

08004190 <_malloc_r>:
 8004190:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004194:	1ccd      	adds	r5, r1, #3
 8004196:	f025 0503 	bic.w	r5, r5, #3
 800419a:	3508      	adds	r5, #8
 800419c:	2d0c      	cmp	r5, #12
 800419e:	bf38      	it	cc
 80041a0:	250c      	movcc	r5, #12
 80041a2:	2d00      	cmp	r5, #0
 80041a4:	4607      	mov	r7, r0
 80041a6:	db01      	blt.n	80041ac <_malloc_r+0x1c>
 80041a8:	42a9      	cmp	r1, r5
 80041aa:	d905      	bls.n	80041b8 <_malloc_r+0x28>
 80041ac:	230c      	movs	r3, #12
 80041ae:	603b      	str	r3, [r7, #0]
 80041b0:	2600      	movs	r6, #0
 80041b2:	4630      	mov	r0, r6
 80041b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80041b8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800428c <_malloc_r+0xfc>
 80041bc:	f000 f868 	bl	8004290 <__malloc_lock>
 80041c0:	f8d8 3000 	ldr.w	r3, [r8]
 80041c4:	461c      	mov	r4, r3
 80041c6:	bb5c      	cbnz	r4, 8004220 <_malloc_r+0x90>
 80041c8:	4629      	mov	r1, r5
 80041ca:	4638      	mov	r0, r7
 80041cc:	f7ff ffc0 	bl	8004150 <sbrk_aligned>
 80041d0:	1c43      	adds	r3, r0, #1
 80041d2:	4604      	mov	r4, r0
 80041d4:	d155      	bne.n	8004282 <_malloc_r+0xf2>
 80041d6:	f8d8 4000 	ldr.w	r4, [r8]
 80041da:	4626      	mov	r6, r4
 80041dc:	2e00      	cmp	r6, #0
 80041de:	d145      	bne.n	800426c <_malloc_r+0xdc>
 80041e0:	2c00      	cmp	r4, #0
 80041e2:	d048      	beq.n	8004276 <_malloc_r+0xe6>
 80041e4:	6823      	ldr	r3, [r4, #0]
 80041e6:	4631      	mov	r1, r6
 80041e8:	4638      	mov	r0, r7
 80041ea:	eb04 0903 	add.w	r9, r4, r3
 80041ee:	f000 f98d 	bl	800450c <_sbrk_r>
 80041f2:	4581      	cmp	r9, r0
 80041f4:	d13f      	bne.n	8004276 <_malloc_r+0xe6>
 80041f6:	6821      	ldr	r1, [r4, #0]
 80041f8:	1a6d      	subs	r5, r5, r1
 80041fa:	4629      	mov	r1, r5
 80041fc:	4638      	mov	r0, r7
 80041fe:	f7ff ffa7 	bl	8004150 <sbrk_aligned>
 8004202:	3001      	adds	r0, #1
 8004204:	d037      	beq.n	8004276 <_malloc_r+0xe6>
 8004206:	6823      	ldr	r3, [r4, #0]
 8004208:	442b      	add	r3, r5
 800420a:	6023      	str	r3, [r4, #0]
 800420c:	f8d8 3000 	ldr.w	r3, [r8]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d038      	beq.n	8004286 <_malloc_r+0xf6>
 8004214:	685a      	ldr	r2, [r3, #4]
 8004216:	42a2      	cmp	r2, r4
 8004218:	d12b      	bne.n	8004272 <_malloc_r+0xe2>
 800421a:	2200      	movs	r2, #0
 800421c:	605a      	str	r2, [r3, #4]
 800421e:	e00f      	b.n	8004240 <_malloc_r+0xb0>
 8004220:	6822      	ldr	r2, [r4, #0]
 8004222:	1b52      	subs	r2, r2, r5
 8004224:	d41f      	bmi.n	8004266 <_malloc_r+0xd6>
 8004226:	2a0b      	cmp	r2, #11
 8004228:	d917      	bls.n	800425a <_malloc_r+0xca>
 800422a:	1961      	adds	r1, r4, r5
 800422c:	42a3      	cmp	r3, r4
 800422e:	6025      	str	r5, [r4, #0]
 8004230:	bf18      	it	ne
 8004232:	6059      	strne	r1, [r3, #4]
 8004234:	6863      	ldr	r3, [r4, #4]
 8004236:	bf08      	it	eq
 8004238:	f8c8 1000 	streq.w	r1, [r8]
 800423c:	5162      	str	r2, [r4, r5]
 800423e:	604b      	str	r3, [r1, #4]
 8004240:	4638      	mov	r0, r7
 8004242:	f104 060b 	add.w	r6, r4, #11
 8004246:	f000 f829 	bl	800429c <__malloc_unlock>
 800424a:	f026 0607 	bic.w	r6, r6, #7
 800424e:	1d23      	adds	r3, r4, #4
 8004250:	1af2      	subs	r2, r6, r3
 8004252:	d0ae      	beq.n	80041b2 <_malloc_r+0x22>
 8004254:	1b9b      	subs	r3, r3, r6
 8004256:	50a3      	str	r3, [r4, r2]
 8004258:	e7ab      	b.n	80041b2 <_malloc_r+0x22>
 800425a:	42a3      	cmp	r3, r4
 800425c:	6862      	ldr	r2, [r4, #4]
 800425e:	d1dd      	bne.n	800421c <_malloc_r+0x8c>
 8004260:	f8c8 2000 	str.w	r2, [r8]
 8004264:	e7ec      	b.n	8004240 <_malloc_r+0xb0>
 8004266:	4623      	mov	r3, r4
 8004268:	6864      	ldr	r4, [r4, #4]
 800426a:	e7ac      	b.n	80041c6 <_malloc_r+0x36>
 800426c:	4634      	mov	r4, r6
 800426e:	6876      	ldr	r6, [r6, #4]
 8004270:	e7b4      	b.n	80041dc <_malloc_r+0x4c>
 8004272:	4613      	mov	r3, r2
 8004274:	e7cc      	b.n	8004210 <_malloc_r+0x80>
 8004276:	230c      	movs	r3, #12
 8004278:	603b      	str	r3, [r7, #0]
 800427a:	4638      	mov	r0, r7
 800427c:	f000 f80e 	bl	800429c <__malloc_unlock>
 8004280:	e797      	b.n	80041b2 <_malloc_r+0x22>
 8004282:	6025      	str	r5, [r4, #0]
 8004284:	e7dc      	b.n	8004240 <_malloc_r+0xb0>
 8004286:	605b      	str	r3, [r3, #4]
 8004288:	deff      	udf	#255	; 0xff
 800428a:	bf00      	nop
 800428c:	200017c0 	.word	0x200017c0

08004290 <__malloc_lock>:
 8004290:	4801      	ldr	r0, [pc, #4]	; (8004298 <__malloc_lock+0x8>)
 8004292:	f7ff bf00 	b.w	8004096 <__retarget_lock_acquire_recursive>
 8004296:	bf00      	nop
 8004298:	200017bc 	.word	0x200017bc

0800429c <__malloc_unlock>:
 800429c:	4801      	ldr	r0, [pc, #4]	; (80042a4 <__malloc_unlock+0x8>)
 800429e:	f7ff befb 	b.w	8004098 <__retarget_lock_release_recursive>
 80042a2:	bf00      	nop
 80042a4:	200017bc 	.word	0x200017bc

080042a8 <__sflush_r>:
 80042a8:	898a      	ldrh	r2, [r1, #12]
 80042aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042ae:	4605      	mov	r5, r0
 80042b0:	0710      	lsls	r0, r2, #28
 80042b2:	460c      	mov	r4, r1
 80042b4:	d458      	bmi.n	8004368 <__sflush_r+0xc0>
 80042b6:	684b      	ldr	r3, [r1, #4]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	dc05      	bgt.n	80042c8 <__sflush_r+0x20>
 80042bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80042be:	2b00      	cmp	r3, #0
 80042c0:	dc02      	bgt.n	80042c8 <__sflush_r+0x20>
 80042c2:	2000      	movs	r0, #0
 80042c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80042ca:	2e00      	cmp	r6, #0
 80042cc:	d0f9      	beq.n	80042c2 <__sflush_r+0x1a>
 80042ce:	2300      	movs	r3, #0
 80042d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80042d4:	682f      	ldr	r7, [r5, #0]
 80042d6:	6a21      	ldr	r1, [r4, #32]
 80042d8:	602b      	str	r3, [r5, #0]
 80042da:	d032      	beq.n	8004342 <__sflush_r+0x9a>
 80042dc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80042de:	89a3      	ldrh	r3, [r4, #12]
 80042e0:	075a      	lsls	r2, r3, #29
 80042e2:	d505      	bpl.n	80042f0 <__sflush_r+0x48>
 80042e4:	6863      	ldr	r3, [r4, #4]
 80042e6:	1ac0      	subs	r0, r0, r3
 80042e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80042ea:	b10b      	cbz	r3, 80042f0 <__sflush_r+0x48>
 80042ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80042ee:	1ac0      	subs	r0, r0, r3
 80042f0:	2300      	movs	r3, #0
 80042f2:	4602      	mov	r2, r0
 80042f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80042f6:	6a21      	ldr	r1, [r4, #32]
 80042f8:	4628      	mov	r0, r5
 80042fa:	47b0      	blx	r6
 80042fc:	1c43      	adds	r3, r0, #1
 80042fe:	89a3      	ldrh	r3, [r4, #12]
 8004300:	d106      	bne.n	8004310 <__sflush_r+0x68>
 8004302:	6829      	ldr	r1, [r5, #0]
 8004304:	291d      	cmp	r1, #29
 8004306:	d82b      	bhi.n	8004360 <__sflush_r+0xb8>
 8004308:	4a29      	ldr	r2, [pc, #164]	; (80043b0 <__sflush_r+0x108>)
 800430a:	410a      	asrs	r2, r1
 800430c:	07d6      	lsls	r6, r2, #31
 800430e:	d427      	bmi.n	8004360 <__sflush_r+0xb8>
 8004310:	2200      	movs	r2, #0
 8004312:	6062      	str	r2, [r4, #4]
 8004314:	04d9      	lsls	r1, r3, #19
 8004316:	6922      	ldr	r2, [r4, #16]
 8004318:	6022      	str	r2, [r4, #0]
 800431a:	d504      	bpl.n	8004326 <__sflush_r+0x7e>
 800431c:	1c42      	adds	r2, r0, #1
 800431e:	d101      	bne.n	8004324 <__sflush_r+0x7c>
 8004320:	682b      	ldr	r3, [r5, #0]
 8004322:	b903      	cbnz	r3, 8004326 <__sflush_r+0x7e>
 8004324:	6560      	str	r0, [r4, #84]	; 0x54
 8004326:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004328:	602f      	str	r7, [r5, #0]
 800432a:	2900      	cmp	r1, #0
 800432c:	d0c9      	beq.n	80042c2 <__sflush_r+0x1a>
 800432e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004332:	4299      	cmp	r1, r3
 8004334:	d002      	beq.n	800433c <__sflush_r+0x94>
 8004336:	4628      	mov	r0, r5
 8004338:	f7ff febe 	bl	80040b8 <_free_r>
 800433c:	2000      	movs	r0, #0
 800433e:	6360      	str	r0, [r4, #52]	; 0x34
 8004340:	e7c0      	b.n	80042c4 <__sflush_r+0x1c>
 8004342:	2301      	movs	r3, #1
 8004344:	4628      	mov	r0, r5
 8004346:	47b0      	blx	r6
 8004348:	1c41      	adds	r1, r0, #1
 800434a:	d1c8      	bne.n	80042de <__sflush_r+0x36>
 800434c:	682b      	ldr	r3, [r5, #0]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d0c5      	beq.n	80042de <__sflush_r+0x36>
 8004352:	2b1d      	cmp	r3, #29
 8004354:	d001      	beq.n	800435a <__sflush_r+0xb2>
 8004356:	2b16      	cmp	r3, #22
 8004358:	d101      	bne.n	800435e <__sflush_r+0xb6>
 800435a:	602f      	str	r7, [r5, #0]
 800435c:	e7b1      	b.n	80042c2 <__sflush_r+0x1a>
 800435e:	89a3      	ldrh	r3, [r4, #12]
 8004360:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004364:	81a3      	strh	r3, [r4, #12]
 8004366:	e7ad      	b.n	80042c4 <__sflush_r+0x1c>
 8004368:	690f      	ldr	r7, [r1, #16]
 800436a:	2f00      	cmp	r7, #0
 800436c:	d0a9      	beq.n	80042c2 <__sflush_r+0x1a>
 800436e:	0793      	lsls	r3, r2, #30
 8004370:	680e      	ldr	r6, [r1, #0]
 8004372:	bf08      	it	eq
 8004374:	694b      	ldreq	r3, [r1, #20]
 8004376:	600f      	str	r7, [r1, #0]
 8004378:	bf18      	it	ne
 800437a:	2300      	movne	r3, #0
 800437c:	eba6 0807 	sub.w	r8, r6, r7
 8004380:	608b      	str	r3, [r1, #8]
 8004382:	f1b8 0f00 	cmp.w	r8, #0
 8004386:	dd9c      	ble.n	80042c2 <__sflush_r+0x1a>
 8004388:	6a21      	ldr	r1, [r4, #32]
 800438a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800438c:	4643      	mov	r3, r8
 800438e:	463a      	mov	r2, r7
 8004390:	4628      	mov	r0, r5
 8004392:	47b0      	blx	r6
 8004394:	2800      	cmp	r0, #0
 8004396:	dc06      	bgt.n	80043a6 <__sflush_r+0xfe>
 8004398:	89a3      	ldrh	r3, [r4, #12]
 800439a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800439e:	81a3      	strh	r3, [r4, #12]
 80043a0:	f04f 30ff 	mov.w	r0, #4294967295
 80043a4:	e78e      	b.n	80042c4 <__sflush_r+0x1c>
 80043a6:	4407      	add	r7, r0
 80043a8:	eba8 0800 	sub.w	r8, r8, r0
 80043ac:	e7e9      	b.n	8004382 <__sflush_r+0xda>
 80043ae:	bf00      	nop
 80043b0:	dfbffffe 	.word	0xdfbffffe

080043b4 <_fflush_r>:
 80043b4:	b538      	push	{r3, r4, r5, lr}
 80043b6:	690b      	ldr	r3, [r1, #16]
 80043b8:	4605      	mov	r5, r0
 80043ba:	460c      	mov	r4, r1
 80043bc:	b913      	cbnz	r3, 80043c4 <_fflush_r+0x10>
 80043be:	2500      	movs	r5, #0
 80043c0:	4628      	mov	r0, r5
 80043c2:	bd38      	pop	{r3, r4, r5, pc}
 80043c4:	b118      	cbz	r0, 80043ce <_fflush_r+0x1a>
 80043c6:	6a03      	ldr	r3, [r0, #32]
 80043c8:	b90b      	cbnz	r3, 80043ce <_fflush_r+0x1a>
 80043ca:	f7ff fc87 	bl	8003cdc <__sinit>
 80043ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d0f3      	beq.n	80043be <_fflush_r+0xa>
 80043d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80043d8:	07d0      	lsls	r0, r2, #31
 80043da:	d404      	bmi.n	80043e6 <_fflush_r+0x32>
 80043dc:	0599      	lsls	r1, r3, #22
 80043de:	d402      	bmi.n	80043e6 <_fflush_r+0x32>
 80043e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80043e2:	f7ff fe58 	bl	8004096 <__retarget_lock_acquire_recursive>
 80043e6:	4628      	mov	r0, r5
 80043e8:	4621      	mov	r1, r4
 80043ea:	f7ff ff5d 	bl	80042a8 <__sflush_r>
 80043ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80043f0:	07da      	lsls	r2, r3, #31
 80043f2:	4605      	mov	r5, r0
 80043f4:	d4e4      	bmi.n	80043c0 <_fflush_r+0xc>
 80043f6:	89a3      	ldrh	r3, [r4, #12]
 80043f8:	059b      	lsls	r3, r3, #22
 80043fa:	d4e1      	bmi.n	80043c0 <_fflush_r+0xc>
 80043fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80043fe:	f7ff fe4b 	bl	8004098 <__retarget_lock_release_recursive>
 8004402:	e7dd      	b.n	80043c0 <_fflush_r+0xc>

08004404 <__swhatbuf_r>:
 8004404:	b570      	push	{r4, r5, r6, lr}
 8004406:	460c      	mov	r4, r1
 8004408:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800440c:	2900      	cmp	r1, #0
 800440e:	b096      	sub	sp, #88	; 0x58
 8004410:	4615      	mov	r5, r2
 8004412:	461e      	mov	r6, r3
 8004414:	da0d      	bge.n	8004432 <__swhatbuf_r+0x2e>
 8004416:	89a3      	ldrh	r3, [r4, #12]
 8004418:	f013 0f80 	tst.w	r3, #128	; 0x80
 800441c:	f04f 0100 	mov.w	r1, #0
 8004420:	bf0c      	ite	eq
 8004422:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004426:	2340      	movne	r3, #64	; 0x40
 8004428:	2000      	movs	r0, #0
 800442a:	6031      	str	r1, [r6, #0]
 800442c:	602b      	str	r3, [r5, #0]
 800442e:	b016      	add	sp, #88	; 0x58
 8004430:	bd70      	pop	{r4, r5, r6, pc}
 8004432:	466a      	mov	r2, sp
 8004434:	f000 f848 	bl	80044c8 <_fstat_r>
 8004438:	2800      	cmp	r0, #0
 800443a:	dbec      	blt.n	8004416 <__swhatbuf_r+0x12>
 800443c:	9901      	ldr	r1, [sp, #4]
 800443e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004442:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004446:	4259      	negs	r1, r3
 8004448:	4159      	adcs	r1, r3
 800444a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800444e:	e7eb      	b.n	8004428 <__swhatbuf_r+0x24>

08004450 <__smakebuf_r>:
 8004450:	898b      	ldrh	r3, [r1, #12]
 8004452:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004454:	079d      	lsls	r5, r3, #30
 8004456:	4606      	mov	r6, r0
 8004458:	460c      	mov	r4, r1
 800445a:	d507      	bpl.n	800446c <__smakebuf_r+0x1c>
 800445c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004460:	6023      	str	r3, [r4, #0]
 8004462:	6123      	str	r3, [r4, #16]
 8004464:	2301      	movs	r3, #1
 8004466:	6163      	str	r3, [r4, #20]
 8004468:	b002      	add	sp, #8
 800446a:	bd70      	pop	{r4, r5, r6, pc}
 800446c:	ab01      	add	r3, sp, #4
 800446e:	466a      	mov	r2, sp
 8004470:	f7ff ffc8 	bl	8004404 <__swhatbuf_r>
 8004474:	9900      	ldr	r1, [sp, #0]
 8004476:	4605      	mov	r5, r0
 8004478:	4630      	mov	r0, r6
 800447a:	f7ff fe89 	bl	8004190 <_malloc_r>
 800447e:	b948      	cbnz	r0, 8004494 <__smakebuf_r+0x44>
 8004480:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004484:	059a      	lsls	r2, r3, #22
 8004486:	d4ef      	bmi.n	8004468 <__smakebuf_r+0x18>
 8004488:	f023 0303 	bic.w	r3, r3, #3
 800448c:	f043 0302 	orr.w	r3, r3, #2
 8004490:	81a3      	strh	r3, [r4, #12]
 8004492:	e7e3      	b.n	800445c <__smakebuf_r+0xc>
 8004494:	89a3      	ldrh	r3, [r4, #12]
 8004496:	6020      	str	r0, [r4, #0]
 8004498:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800449c:	81a3      	strh	r3, [r4, #12]
 800449e:	9b00      	ldr	r3, [sp, #0]
 80044a0:	6163      	str	r3, [r4, #20]
 80044a2:	9b01      	ldr	r3, [sp, #4]
 80044a4:	6120      	str	r0, [r4, #16]
 80044a6:	b15b      	cbz	r3, 80044c0 <__smakebuf_r+0x70>
 80044a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80044ac:	4630      	mov	r0, r6
 80044ae:	f000 f81d 	bl	80044ec <_isatty_r>
 80044b2:	b128      	cbz	r0, 80044c0 <__smakebuf_r+0x70>
 80044b4:	89a3      	ldrh	r3, [r4, #12]
 80044b6:	f023 0303 	bic.w	r3, r3, #3
 80044ba:	f043 0301 	orr.w	r3, r3, #1
 80044be:	81a3      	strh	r3, [r4, #12]
 80044c0:	89a3      	ldrh	r3, [r4, #12]
 80044c2:	431d      	orrs	r5, r3
 80044c4:	81a5      	strh	r5, [r4, #12]
 80044c6:	e7cf      	b.n	8004468 <__smakebuf_r+0x18>

080044c8 <_fstat_r>:
 80044c8:	b538      	push	{r3, r4, r5, lr}
 80044ca:	4d07      	ldr	r5, [pc, #28]	; (80044e8 <_fstat_r+0x20>)
 80044cc:	2300      	movs	r3, #0
 80044ce:	4604      	mov	r4, r0
 80044d0:	4608      	mov	r0, r1
 80044d2:	4611      	mov	r1, r2
 80044d4:	602b      	str	r3, [r5, #0]
 80044d6:	f7fc fa14 	bl	8000902 <_fstat>
 80044da:	1c43      	adds	r3, r0, #1
 80044dc:	d102      	bne.n	80044e4 <_fstat_r+0x1c>
 80044de:	682b      	ldr	r3, [r5, #0]
 80044e0:	b103      	cbz	r3, 80044e4 <_fstat_r+0x1c>
 80044e2:	6023      	str	r3, [r4, #0]
 80044e4:	bd38      	pop	{r3, r4, r5, pc}
 80044e6:	bf00      	nop
 80044e8:	200017b8 	.word	0x200017b8

080044ec <_isatty_r>:
 80044ec:	b538      	push	{r3, r4, r5, lr}
 80044ee:	4d06      	ldr	r5, [pc, #24]	; (8004508 <_isatty_r+0x1c>)
 80044f0:	2300      	movs	r3, #0
 80044f2:	4604      	mov	r4, r0
 80044f4:	4608      	mov	r0, r1
 80044f6:	602b      	str	r3, [r5, #0]
 80044f8:	f7fc fa13 	bl	8000922 <_isatty>
 80044fc:	1c43      	adds	r3, r0, #1
 80044fe:	d102      	bne.n	8004506 <_isatty_r+0x1a>
 8004500:	682b      	ldr	r3, [r5, #0]
 8004502:	b103      	cbz	r3, 8004506 <_isatty_r+0x1a>
 8004504:	6023      	str	r3, [r4, #0]
 8004506:	bd38      	pop	{r3, r4, r5, pc}
 8004508:	200017b8 	.word	0x200017b8

0800450c <_sbrk_r>:
 800450c:	b538      	push	{r3, r4, r5, lr}
 800450e:	4d06      	ldr	r5, [pc, #24]	; (8004528 <_sbrk_r+0x1c>)
 8004510:	2300      	movs	r3, #0
 8004512:	4604      	mov	r4, r0
 8004514:	4608      	mov	r0, r1
 8004516:	602b      	str	r3, [r5, #0]
 8004518:	f000 f808 	bl	800452c <_sbrk>
 800451c:	1c43      	adds	r3, r0, #1
 800451e:	d102      	bne.n	8004526 <_sbrk_r+0x1a>
 8004520:	682b      	ldr	r3, [r5, #0]
 8004522:	b103      	cbz	r3, 8004526 <_sbrk_r+0x1a>
 8004524:	6023      	str	r3, [r4, #0]
 8004526:	bd38      	pop	{r3, r4, r5, pc}
 8004528:	200017b8 	.word	0x200017b8

0800452c <_sbrk>:
 800452c:	4a04      	ldr	r2, [pc, #16]	; (8004540 <_sbrk+0x14>)
 800452e:	6811      	ldr	r1, [r2, #0]
 8004530:	4603      	mov	r3, r0
 8004532:	b909      	cbnz	r1, 8004538 <_sbrk+0xc>
 8004534:	4903      	ldr	r1, [pc, #12]	; (8004544 <_sbrk+0x18>)
 8004536:	6011      	str	r1, [r2, #0]
 8004538:	6810      	ldr	r0, [r2, #0]
 800453a:	4403      	add	r3, r0
 800453c:	6013      	str	r3, [r2, #0]
 800453e:	4770      	bx	lr
 8004540:	200017c8 	.word	0x200017c8
 8004544:	200017d0 	.word	0x200017d0

08004548 <_init>:
 8004548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800454a:	bf00      	nop
 800454c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800454e:	bc08      	pop	{r3}
 8004550:	469e      	mov	lr, r3
 8004552:	4770      	bx	lr

08004554 <_fini>:
 8004554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004556:	bf00      	nop
 8004558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800455a:	bc08      	pop	{r3}
 800455c:	469e      	mov	lr, r3
 800455e:	4770      	bx	lr
