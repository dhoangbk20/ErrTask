
udemy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002770  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  0800287c  0800287c  0001287c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028c8  080028c8  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  080028c8  080028c8  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  080028c8  080028c8  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028c8  080028c8  000128c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080028cc  080028cc  000128cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080028d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004590  20000014  080028e4  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200045a4  080028e4  000245a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a6a5  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f91  00000000  00000000  0002a725  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c00  00000000  00000000  0002c6b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000938  00000000  00000000  0002d2b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017a29  00000000  00000000  0002dbf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d319  00000000  00000000  00045619  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008e9aa  00000000  00000000  00052932  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000030a4  00000000  00000000  000e12dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000041  00000000  00000000  000e4380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	08002864 	.word	0x08002864

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	08002864 	.word	0x08002864

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fa0b 	bl	800056c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f843 	bl	80001e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f87d 	bl	8000258 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  xStatus = xTaskCreate(LEDON,"LEDON",200,"NULL",1,&ledon_handle);
 800015e:	f107 0308 	add.w	r3, r7, #8
 8000162:	9301      	str	r3, [sp, #4]
 8000164:	2301      	movs	r3, #1
 8000166:	9300      	str	r3, [sp, #0]
 8000168:	4b18      	ldr	r3, [pc, #96]	; (80001cc <main+0x80>)
 800016a:	22c8      	movs	r2, #200	; 0xc8
 800016c:	4918      	ldr	r1, [pc, #96]	; (80001d0 <main+0x84>)
 800016e:	4819      	ldr	r0, [pc, #100]	; (80001d4 <main+0x88>)
 8000170:	f001 fb74 	bl	800185c <xTaskCreate>
 8000174:	6178      	str	r0, [r7, #20]
  configASSERT(xStatus == pdPASS);
 8000176:	697b      	ldr	r3, [r7, #20]
 8000178:	2b01      	cmp	r3, #1
 800017a:	d00a      	beq.n	8000192 <main+0x46>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800017c:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000180:	f383 8811 	msr	BASEPRI, r3
 8000184:	f3bf 8f6f 	isb	sy
 8000188:	f3bf 8f4f 	dsb	sy
 800018c:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800018e:	bf00      	nop
 8000190:	e7fe      	b.n	8000190 <main+0x44>
  xStatus = xTaskCreate(LEDOFF,"LEDOFF",200,"NULL",1,&ledoff_handle);
 8000192:	1d3b      	adds	r3, r7, #4
 8000194:	9301      	str	r3, [sp, #4]
 8000196:	2301      	movs	r3, #1
 8000198:	9300      	str	r3, [sp, #0]
 800019a:	4b0c      	ldr	r3, [pc, #48]	; (80001cc <main+0x80>)
 800019c:	22c8      	movs	r2, #200	; 0xc8
 800019e:	490e      	ldr	r1, [pc, #56]	; (80001d8 <main+0x8c>)
 80001a0:	480e      	ldr	r0, [pc, #56]	; (80001dc <main+0x90>)
 80001a2:	f001 fb5b 	bl	800185c <xTaskCreate>
 80001a6:	6178      	str	r0, [r7, #20]
  configASSERT(xStatus == pdPASS);
 80001a8:	697b      	ldr	r3, [r7, #20]
 80001aa:	2b01      	cmp	r3, #1
 80001ac:	d00a      	beq.n	80001c4 <main+0x78>
        __asm volatile
 80001ae:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80001b2:	f383 8811 	msr	BASEPRI, r3
 80001b6:	f3bf 8f6f 	isb	sy
 80001ba:	f3bf 8f4f 	dsb	sy
 80001be:	60fb      	str	r3, [r7, #12]
    }
 80001c0:	bf00      	nop
 80001c2:	e7fe      	b.n	80001c2 <main+0x76>
  vTaskStartScheduler();
 80001c4:	f001 fca6 	bl	8001b14 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001c8:	e7fe      	b.n	80001c8 <main+0x7c>
 80001ca:	bf00      	nop
 80001cc:	0800287c 	.word	0x0800287c
 80001d0:	08002884 	.word	0x08002884
 80001d4:	080002d9 	.word	0x080002d9
 80001d8:	0800288c 	.word	0x0800288c
 80001dc:	08000309 	.word	0x08000309

080001e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b090      	sub	sp, #64	; 0x40
 80001e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001e6:	f107 0318 	add.w	r3, r7, #24
 80001ea:	2228      	movs	r2, #40	; 0x28
 80001ec:	2100      	movs	r1, #0
 80001ee:	4618      	mov	r0, r3
 80001f0:	f002 fb0c 	bl	800280c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001f4:	1d3b      	adds	r3, r7, #4
 80001f6:	2200      	movs	r2, #0
 80001f8:	601a      	str	r2, [r3, #0]
 80001fa:	605a      	str	r2, [r3, #4]
 80001fc:	609a      	str	r2, [r3, #8]
 80001fe:	60da      	str	r2, [r3, #12]
 8000200:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000202:	2302      	movs	r3, #2
 8000204:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000206:	2301      	movs	r3, #1
 8000208:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800020a:	2310      	movs	r3, #16
 800020c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800020e:	2300      	movs	r3, #0
 8000210:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000212:	f107 0318 	add.w	r3, r7, #24
 8000216:	4618      	mov	r0, r3
 8000218:	f000 fc56 	bl	8000ac8 <HAL_RCC_OscConfig>
 800021c:	4603      	mov	r3, r0
 800021e:	2b00      	cmp	r3, #0
 8000220:	d001      	beq.n	8000226 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000222:	f000 f89b 	bl	800035c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000226:	230f      	movs	r3, #15
 8000228:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800022a:	2300      	movs	r3, #0
 800022c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800022e:	2300      	movs	r3, #0
 8000230:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000232:	2300      	movs	r3, #0
 8000234:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000236:	2300      	movs	r3, #0
 8000238:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800023a:	1d3b      	adds	r3, r7, #4
 800023c:	2100      	movs	r1, #0
 800023e:	4618      	mov	r0, r3
 8000240:	f000 fec4 	bl	8000fcc <HAL_RCC_ClockConfig>
 8000244:	4603      	mov	r3, r0
 8000246:	2b00      	cmp	r3, #0
 8000248:	d001      	beq.n	800024e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800024a:	f000 f887 	bl	800035c <Error_Handler>
  }
}
 800024e:	bf00      	nop
 8000250:	3740      	adds	r7, #64	; 0x40
 8000252:	46bd      	mov	sp, r7
 8000254:	bd80      	pop	{r7, pc}
	...

08000258 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b086      	sub	sp, #24
 800025c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800025e:	f107 0308 	add.w	r3, r7, #8
 8000262:	2200      	movs	r2, #0
 8000264:	601a      	str	r2, [r3, #0]
 8000266:	605a      	str	r2, [r3, #4]
 8000268:	609a      	str	r2, [r3, #8]
 800026a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800026c:	4b18      	ldr	r3, [pc, #96]	; (80002d0 <MX_GPIO_Init+0x78>)
 800026e:	699b      	ldr	r3, [r3, #24]
 8000270:	4a17      	ldr	r2, [pc, #92]	; (80002d0 <MX_GPIO_Init+0x78>)
 8000272:	f043 0310 	orr.w	r3, r3, #16
 8000276:	6193      	str	r3, [r2, #24]
 8000278:	4b15      	ldr	r3, [pc, #84]	; (80002d0 <MX_GPIO_Init+0x78>)
 800027a:	699b      	ldr	r3, [r3, #24]
 800027c:	f003 0310 	and.w	r3, r3, #16
 8000280:	607b      	str	r3, [r7, #4]
 8000282:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000284:	4b12      	ldr	r3, [pc, #72]	; (80002d0 <MX_GPIO_Init+0x78>)
 8000286:	699b      	ldr	r3, [r3, #24]
 8000288:	4a11      	ldr	r2, [pc, #68]	; (80002d0 <MX_GPIO_Init+0x78>)
 800028a:	f043 0304 	orr.w	r3, r3, #4
 800028e:	6193      	str	r3, [r2, #24]
 8000290:	4b0f      	ldr	r3, [pc, #60]	; (80002d0 <MX_GPIO_Init+0x78>)
 8000292:	699b      	ldr	r3, [r3, #24]
 8000294:	f003 0304 	and.w	r3, r3, #4
 8000298:	603b      	str	r3, [r7, #0]
 800029a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800029c:	2200      	movs	r2, #0
 800029e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002a2:	480c      	ldr	r0, [pc, #48]	; (80002d4 <MX_GPIO_Init+0x7c>)
 80002a4:	f000 fbf8 	bl	8000a98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80002a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80002ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002ae:	2301      	movs	r3, #1
 80002b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002b2:	2300      	movs	r3, #0
 80002b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002b6:	2302      	movs	r3, #2
 80002b8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002ba:	f107 0308 	add.w	r3, r7, #8
 80002be:	4619      	mov	r1, r3
 80002c0:	4804      	ldr	r0, [pc, #16]	; (80002d4 <MX_GPIO_Init+0x7c>)
 80002c2:	f000 fa65 	bl	8000790 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80002c6:	bf00      	nop
 80002c8:	3718      	adds	r7, #24
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}
 80002ce:	bf00      	nop
 80002d0:	40021000 	.word	0x40021000
 80002d4:	40011000 	.word	0x40011000

080002d8 <LEDON>:

/* USER CODE BEGIN 4 */
static void LEDON(void *pvParameters)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,GPIO_PIN_SET);
 80002e0:	2201      	movs	r2, #1
 80002e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002e6:	4806      	ldr	r0, [pc, #24]	; (8000300 <LEDON+0x28>)
 80002e8:	f000 fbd6 	bl	8000a98 <HAL_GPIO_WritePin>
		taskYIELD();
 80002ec:	4b05      	ldr	r3, [pc, #20]	; (8000304 <LEDON+0x2c>)
 80002ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80002f2:	601a      	str	r2, [r3, #0]
 80002f4:	f3bf 8f4f 	dsb	sy
 80002f8:	f3bf 8f6f 	isb	sy
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,GPIO_PIN_SET);
 80002fc:	e7f0      	b.n	80002e0 <LEDON+0x8>
 80002fe:	bf00      	nop
 8000300:	40011000 	.word	0x40011000
 8000304:	e000ed04 	.word	0xe000ed04

08000308 <LEDOFF>:
	}

}

static void LEDOFF(void *pvParameters)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b082      	sub	sp, #8
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
	while(1)
		{
			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,GPIO_PIN_RESET);
 8000310:	2200      	movs	r2, #0
 8000312:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000316:	4806      	ldr	r0, [pc, #24]	; (8000330 <LEDOFF+0x28>)
 8000318:	f000 fbbe 	bl	8000a98 <HAL_GPIO_WritePin>
			taskYIELD();
 800031c:	4b05      	ldr	r3, [pc, #20]	; (8000334 <LEDOFF+0x2c>)
 800031e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000322:	601a      	str	r2, [r3, #0]
 8000324:	f3bf 8f4f 	dsb	sy
 8000328:	f3bf 8f6f 	isb	sy
			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,GPIO_PIN_RESET);
 800032c:	e7f0      	b.n	8000310 <LEDOFF+0x8>
 800032e:	bf00      	nop
 8000330:	40011000 	.word	0x40011000
 8000334:	e000ed04 	.word	0xe000ed04

08000338 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b082      	sub	sp, #8
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	4a04      	ldr	r2, [pc, #16]	; (8000358 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000346:	4293      	cmp	r3, r2
 8000348:	d101      	bne.n	800034e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800034a:	f000 f925 	bl	8000598 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800034e:	bf00      	nop
 8000350:	3708      	adds	r7, #8
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	40012c00 	.word	0x40012c00

0800035c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000360:	b672      	cpsid	i
}
 8000362:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000364:	e7fe      	b.n	8000364 <Error_Handler+0x8>
	...

08000368 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000368:	b480      	push	{r7}
 800036a:	b085      	sub	sp, #20
 800036c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800036e:	4b15      	ldr	r3, [pc, #84]	; (80003c4 <HAL_MspInit+0x5c>)
 8000370:	699b      	ldr	r3, [r3, #24]
 8000372:	4a14      	ldr	r2, [pc, #80]	; (80003c4 <HAL_MspInit+0x5c>)
 8000374:	f043 0301 	orr.w	r3, r3, #1
 8000378:	6193      	str	r3, [r2, #24]
 800037a:	4b12      	ldr	r3, [pc, #72]	; (80003c4 <HAL_MspInit+0x5c>)
 800037c:	699b      	ldr	r3, [r3, #24]
 800037e:	f003 0301 	and.w	r3, r3, #1
 8000382:	60bb      	str	r3, [r7, #8]
 8000384:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000386:	4b0f      	ldr	r3, [pc, #60]	; (80003c4 <HAL_MspInit+0x5c>)
 8000388:	69db      	ldr	r3, [r3, #28]
 800038a:	4a0e      	ldr	r2, [pc, #56]	; (80003c4 <HAL_MspInit+0x5c>)
 800038c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000390:	61d3      	str	r3, [r2, #28]
 8000392:	4b0c      	ldr	r3, [pc, #48]	; (80003c4 <HAL_MspInit+0x5c>)
 8000394:	69db      	ldr	r3, [r3, #28]
 8000396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800039a:	607b      	str	r3, [r7, #4]
 800039c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800039e:	4b0a      	ldr	r3, [pc, #40]	; (80003c8 <HAL_MspInit+0x60>)
 80003a0:	685b      	ldr	r3, [r3, #4]
 80003a2:	60fb      	str	r3, [r7, #12]
 80003a4:	68fb      	ldr	r3, [r7, #12]
 80003a6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003aa:	60fb      	str	r3, [r7, #12]
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003b2:	60fb      	str	r3, [r7, #12]
 80003b4:	4a04      	ldr	r2, [pc, #16]	; (80003c8 <HAL_MspInit+0x60>)
 80003b6:	68fb      	ldr	r3, [r7, #12]
 80003b8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003ba:	bf00      	nop
 80003bc:	3714      	adds	r7, #20
 80003be:	46bd      	mov	sp, r7
 80003c0:	bc80      	pop	{r7}
 80003c2:	4770      	bx	lr
 80003c4:	40021000 	.word	0x40021000
 80003c8:	40010000 	.word	0x40010000

080003cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b08c      	sub	sp, #48	; 0x30
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80003d4:	2300      	movs	r3, #0
 80003d6:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80003d8:	2300      	movs	r3, #0
 80003da:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80003dc:	2300      	movs	r3, #0
 80003de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80003e2:	4b2e      	ldr	r3, [pc, #184]	; (800049c <HAL_InitTick+0xd0>)
 80003e4:	699b      	ldr	r3, [r3, #24]
 80003e6:	4a2d      	ldr	r2, [pc, #180]	; (800049c <HAL_InitTick+0xd0>)
 80003e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80003ec:	6193      	str	r3, [r2, #24]
 80003ee:	4b2b      	ldr	r3, [pc, #172]	; (800049c <HAL_InitTick+0xd0>)
 80003f0:	699b      	ldr	r3, [r3, #24]
 80003f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80003f6:	60bb      	str	r3, [r7, #8]
 80003f8:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80003fa:	f107 020c 	add.w	r2, r7, #12
 80003fe:	f107 0310 	add.w	r3, r7, #16
 8000402:	4611      	mov	r1, r2
 8000404:	4618      	mov	r0, r3
 8000406:	f000 ff3d 	bl	8001284 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800040a:	f000 ff27 	bl	800125c <HAL_RCC_GetPCLK2Freq>
 800040e:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000412:	4a23      	ldr	r2, [pc, #140]	; (80004a0 <HAL_InitTick+0xd4>)
 8000414:	fba2 2303 	umull	r2, r3, r2, r3
 8000418:	0c9b      	lsrs	r3, r3, #18
 800041a:	3b01      	subs	r3, #1
 800041c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800041e:	4b21      	ldr	r3, [pc, #132]	; (80004a4 <HAL_InitTick+0xd8>)
 8000420:	4a21      	ldr	r2, [pc, #132]	; (80004a8 <HAL_InitTick+0xdc>)
 8000422:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000424:	4b1f      	ldr	r3, [pc, #124]	; (80004a4 <HAL_InitTick+0xd8>)
 8000426:	f240 32e7 	movw	r2, #999	; 0x3e7
 800042a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800042c:	4a1d      	ldr	r2, [pc, #116]	; (80004a4 <HAL_InitTick+0xd8>)
 800042e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000430:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000432:	4b1c      	ldr	r3, [pc, #112]	; (80004a4 <HAL_InitTick+0xd8>)
 8000434:	2200      	movs	r2, #0
 8000436:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000438:	4b1a      	ldr	r3, [pc, #104]	; (80004a4 <HAL_InitTick+0xd8>)
 800043a:	2200      	movs	r2, #0
 800043c:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800043e:	4b19      	ldr	r3, [pc, #100]	; (80004a4 <HAL_InitTick+0xd8>)
 8000440:	2200      	movs	r2, #0
 8000442:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000444:	4817      	ldr	r0, [pc, #92]	; (80004a4 <HAL_InitTick+0xd8>)
 8000446:	f000 ff6b 	bl	8001320 <HAL_TIM_Base_Init>
 800044a:	4603      	mov	r3, r0
 800044c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000450:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000454:	2b00      	cmp	r3, #0
 8000456:	d11b      	bne.n	8000490 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000458:	4812      	ldr	r0, [pc, #72]	; (80004a4 <HAL_InitTick+0xd8>)
 800045a:	f000 ffb9 	bl	80013d0 <HAL_TIM_Base_Start_IT>
 800045e:	4603      	mov	r3, r0
 8000460:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000464:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000468:	2b00      	cmp	r3, #0
 800046a:	d111      	bne.n	8000490 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800046c:	2019      	movs	r0, #25
 800046e:	f000 f980 	bl	8000772 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	2b0f      	cmp	r3, #15
 8000476:	d808      	bhi.n	800048a <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000478:	2200      	movs	r2, #0
 800047a:	6879      	ldr	r1, [r7, #4]
 800047c:	2019      	movs	r0, #25
 800047e:	f000 f95c 	bl	800073a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000482:	4a0a      	ldr	r2, [pc, #40]	; (80004ac <HAL_InitTick+0xe0>)
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	6013      	str	r3, [r2, #0]
 8000488:	e002      	b.n	8000490 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 800048a:	2301      	movs	r3, #1
 800048c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000490:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000494:	4618      	mov	r0, r3
 8000496:	3730      	adds	r7, #48	; 0x30
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}
 800049c:	40021000 	.word	0x40021000
 80004a0:	431bde83 	.word	0x431bde83
 80004a4:	20000030 	.word	0x20000030
 80004a8:	40012c00 	.word	0x40012c00
 80004ac:	20000004 	.word	0x20000004

080004b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004b4:	e7fe      	b.n	80004b4 <NMI_Handler+0x4>

080004b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004b6:	b480      	push	{r7}
 80004b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004ba:	e7fe      	b.n	80004ba <HardFault_Handler+0x4>

080004bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004c0:	e7fe      	b.n	80004c0 <MemManage_Handler+0x4>

080004c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004c2:	b480      	push	{r7}
 80004c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004c6:	e7fe      	b.n	80004c6 <BusFault_Handler+0x4>

080004c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004cc:	e7fe      	b.n	80004cc <UsageFault_Handler+0x4>

080004ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004ce:	b480      	push	{r7}
 80004d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004d2:	bf00      	nop
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bc80      	pop	{r7}
 80004d8:	4770      	bx	lr

080004da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004da:	b480      	push	{r7}
 80004dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004de:	bf00      	nop
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bc80      	pop	{r7}
 80004e4:	4770      	bx	lr

080004e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004e6:	b480      	push	{r7}
 80004e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004ea:	bf00      	nop
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bc80      	pop	{r7}
 80004f0:	4770      	bx	lr

080004f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004f2:	b480      	push	{r7}
 80004f4:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004f6:	bf00      	nop
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bc80      	pop	{r7}
 80004fc:	4770      	bx	lr
	...

08000500 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000504:	4802      	ldr	r0, [pc, #8]	; (8000510 <TIM1_UP_IRQHandler+0x10>)
 8000506:	f000 ffb5 	bl	8001474 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800050a:	bf00      	nop
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	20000030 	.word	0x20000030

08000514 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000518:	bf00      	nop
 800051a:	46bd      	mov	sp, r7
 800051c:	bc80      	pop	{r7}
 800051e:	4770      	bx	lr

08000520 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000520:	f7ff fff8 	bl	8000514 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000524:	480b      	ldr	r0, [pc, #44]	; (8000554 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000526:	490c      	ldr	r1, [pc, #48]	; (8000558 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000528:	4a0c      	ldr	r2, [pc, #48]	; (800055c <LoopFillZerobss+0x16>)
  movs r3, #0
 800052a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800052c:	e002      	b.n	8000534 <LoopCopyDataInit>

0800052e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800052e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000530:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000532:	3304      	adds	r3, #4

08000534 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000534:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000536:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000538:	d3f9      	bcc.n	800052e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800053a:	4a09      	ldr	r2, [pc, #36]	; (8000560 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800053c:	4c09      	ldr	r4, [pc, #36]	; (8000564 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800053e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000540:	e001      	b.n	8000546 <LoopFillZerobss>

08000542 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000542:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000544:	3204      	adds	r2, #4

08000546 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000546:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000548:	d3fb      	bcc.n	8000542 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800054a:	f002 f967 	bl	800281c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800054e:	f7ff fdfd 	bl	800014c <main>
  bx lr
 8000552:	4770      	bx	lr
  ldr r0, =_sdata
 8000554:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000558:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 800055c:	080028d0 	.word	0x080028d0
  ldr r2, =_sbss
 8000560:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000564:	200045a4 	.word	0x200045a4

08000568 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000568:	e7fe      	b.n	8000568 <ADC1_2_IRQHandler>
	...

0800056c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000570:	4b08      	ldr	r3, [pc, #32]	; (8000594 <HAL_Init+0x28>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a07      	ldr	r2, [pc, #28]	; (8000594 <HAL_Init+0x28>)
 8000576:	f043 0310 	orr.w	r3, r3, #16
 800057a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800057c:	2003      	movs	r0, #3
 800057e:	f000 f8d1 	bl	8000724 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000582:	200f      	movs	r0, #15
 8000584:	f7ff ff22 	bl	80003cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000588:	f7ff feee 	bl	8000368 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800058c:	2300      	movs	r3, #0
}
 800058e:	4618      	mov	r0, r3
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	40022000 	.word	0x40022000

08000598 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800059c:	4b05      	ldr	r3, [pc, #20]	; (80005b4 <HAL_IncTick+0x1c>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	461a      	mov	r2, r3
 80005a2:	4b05      	ldr	r3, [pc, #20]	; (80005b8 <HAL_IncTick+0x20>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	4413      	add	r3, r2
 80005a8:	4a03      	ldr	r2, [pc, #12]	; (80005b8 <HAL_IncTick+0x20>)
 80005aa:	6013      	str	r3, [r2, #0]
}
 80005ac:	bf00      	nop
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bc80      	pop	{r7}
 80005b2:	4770      	bx	lr
 80005b4:	20000008 	.word	0x20000008
 80005b8:	20000078 	.word	0x20000078

080005bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  return uwTick;
 80005c0:	4b02      	ldr	r3, [pc, #8]	; (80005cc <HAL_GetTick+0x10>)
 80005c2:	681b      	ldr	r3, [r3, #0]
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bc80      	pop	{r7}
 80005ca:	4770      	bx	lr
 80005cc:	20000078 	.word	0x20000078

080005d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b085      	sub	sp, #20
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	f003 0307 	and.w	r3, r3, #7
 80005de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005e0:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <__NVIC_SetPriorityGrouping+0x44>)
 80005e2:	68db      	ldr	r3, [r3, #12]
 80005e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005e6:	68ba      	ldr	r2, [r7, #8]
 80005e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005ec:	4013      	ands	r3, r2
 80005ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005f4:	68bb      	ldr	r3, [r7, #8]
 80005f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000600:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000602:	4a04      	ldr	r2, [pc, #16]	; (8000614 <__NVIC_SetPriorityGrouping+0x44>)
 8000604:	68bb      	ldr	r3, [r7, #8]
 8000606:	60d3      	str	r3, [r2, #12]
}
 8000608:	bf00      	nop
 800060a:	3714      	adds	r7, #20
 800060c:	46bd      	mov	sp, r7
 800060e:	bc80      	pop	{r7}
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	e000ed00 	.word	0xe000ed00

08000618 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800061c:	4b04      	ldr	r3, [pc, #16]	; (8000630 <__NVIC_GetPriorityGrouping+0x18>)
 800061e:	68db      	ldr	r3, [r3, #12]
 8000620:	0a1b      	lsrs	r3, r3, #8
 8000622:	f003 0307 	and.w	r3, r3, #7
}
 8000626:	4618      	mov	r0, r3
 8000628:	46bd      	mov	sp, r7
 800062a:	bc80      	pop	{r7}
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop
 8000630:	e000ed00 	.word	0xe000ed00

08000634 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	4603      	mov	r3, r0
 800063c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800063e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000642:	2b00      	cmp	r3, #0
 8000644:	db0b      	blt.n	800065e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000646:	79fb      	ldrb	r3, [r7, #7]
 8000648:	f003 021f 	and.w	r2, r3, #31
 800064c:	4906      	ldr	r1, [pc, #24]	; (8000668 <__NVIC_EnableIRQ+0x34>)
 800064e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000652:	095b      	lsrs	r3, r3, #5
 8000654:	2001      	movs	r0, #1
 8000656:	fa00 f202 	lsl.w	r2, r0, r2
 800065a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800065e:	bf00      	nop
 8000660:	370c      	adds	r7, #12
 8000662:	46bd      	mov	sp, r7
 8000664:	bc80      	pop	{r7}
 8000666:	4770      	bx	lr
 8000668:	e000e100 	.word	0xe000e100

0800066c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	6039      	str	r1, [r7, #0]
 8000676:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800067c:	2b00      	cmp	r3, #0
 800067e:	db0a      	blt.n	8000696 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000680:	683b      	ldr	r3, [r7, #0]
 8000682:	b2da      	uxtb	r2, r3
 8000684:	490c      	ldr	r1, [pc, #48]	; (80006b8 <__NVIC_SetPriority+0x4c>)
 8000686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800068a:	0112      	lsls	r2, r2, #4
 800068c:	b2d2      	uxtb	r2, r2
 800068e:	440b      	add	r3, r1
 8000690:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000694:	e00a      	b.n	80006ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	b2da      	uxtb	r2, r3
 800069a:	4908      	ldr	r1, [pc, #32]	; (80006bc <__NVIC_SetPriority+0x50>)
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	f003 030f 	and.w	r3, r3, #15
 80006a2:	3b04      	subs	r3, #4
 80006a4:	0112      	lsls	r2, r2, #4
 80006a6:	b2d2      	uxtb	r2, r2
 80006a8:	440b      	add	r3, r1
 80006aa:	761a      	strb	r2, [r3, #24]
}
 80006ac:	bf00      	nop
 80006ae:	370c      	adds	r7, #12
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bc80      	pop	{r7}
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	e000e100 	.word	0xe000e100
 80006bc:	e000ed00 	.word	0xe000ed00

080006c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b089      	sub	sp, #36	; 0x24
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	60f8      	str	r0, [r7, #12]
 80006c8:	60b9      	str	r1, [r7, #8]
 80006ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	f003 0307 	and.w	r3, r3, #7
 80006d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006d4:	69fb      	ldr	r3, [r7, #28]
 80006d6:	f1c3 0307 	rsb	r3, r3, #7
 80006da:	2b04      	cmp	r3, #4
 80006dc:	bf28      	it	cs
 80006de:	2304      	movcs	r3, #4
 80006e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006e2:	69fb      	ldr	r3, [r7, #28]
 80006e4:	3304      	adds	r3, #4
 80006e6:	2b06      	cmp	r3, #6
 80006e8:	d902      	bls.n	80006f0 <NVIC_EncodePriority+0x30>
 80006ea:	69fb      	ldr	r3, [r7, #28]
 80006ec:	3b03      	subs	r3, #3
 80006ee:	e000      	b.n	80006f2 <NVIC_EncodePriority+0x32>
 80006f0:	2300      	movs	r3, #0
 80006f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f4:	f04f 32ff 	mov.w	r2, #4294967295
 80006f8:	69bb      	ldr	r3, [r7, #24]
 80006fa:	fa02 f303 	lsl.w	r3, r2, r3
 80006fe:	43da      	mvns	r2, r3
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	401a      	ands	r2, r3
 8000704:	697b      	ldr	r3, [r7, #20]
 8000706:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000708:	f04f 31ff 	mov.w	r1, #4294967295
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	fa01 f303 	lsl.w	r3, r1, r3
 8000712:	43d9      	mvns	r1, r3
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000718:	4313      	orrs	r3, r2
         );
}
 800071a:	4618      	mov	r0, r3
 800071c:	3724      	adds	r7, #36	; 0x24
 800071e:	46bd      	mov	sp, r7
 8000720:	bc80      	pop	{r7}
 8000722:	4770      	bx	lr

08000724 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800072c:	6878      	ldr	r0, [r7, #4]
 800072e:	f7ff ff4f 	bl	80005d0 <__NVIC_SetPriorityGrouping>
}
 8000732:	bf00      	nop
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}

0800073a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800073a:	b580      	push	{r7, lr}
 800073c:	b086      	sub	sp, #24
 800073e:	af00      	add	r7, sp, #0
 8000740:	4603      	mov	r3, r0
 8000742:	60b9      	str	r1, [r7, #8]
 8000744:	607a      	str	r2, [r7, #4]
 8000746:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000748:	2300      	movs	r3, #0
 800074a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800074c:	f7ff ff64 	bl	8000618 <__NVIC_GetPriorityGrouping>
 8000750:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000752:	687a      	ldr	r2, [r7, #4]
 8000754:	68b9      	ldr	r1, [r7, #8]
 8000756:	6978      	ldr	r0, [r7, #20]
 8000758:	f7ff ffb2 	bl	80006c0 <NVIC_EncodePriority>
 800075c:	4602      	mov	r2, r0
 800075e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000762:	4611      	mov	r1, r2
 8000764:	4618      	mov	r0, r3
 8000766:	f7ff ff81 	bl	800066c <__NVIC_SetPriority>
}
 800076a:	bf00      	nop
 800076c:	3718      	adds	r7, #24
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}

08000772 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000772:	b580      	push	{r7, lr}
 8000774:	b082      	sub	sp, #8
 8000776:	af00      	add	r7, sp, #0
 8000778:	4603      	mov	r3, r0
 800077a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800077c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000780:	4618      	mov	r0, r3
 8000782:	f7ff ff57 	bl	8000634 <__NVIC_EnableIRQ>
}
 8000786:	bf00      	nop
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
	...

08000790 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000790:	b480      	push	{r7}
 8000792:	b08b      	sub	sp, #44	; 0x2c
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
 8000798:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800079a:	2300      	movs	r3, #0
 800079c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800079e:	2300      	movs	r3, #0
 80007a0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007a2:	e169      	b.n	8000a78 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80007a4:	2201      	movs	r2, #1
 80007a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007a8:	fa02 f303 	lsl.w	r3, r2, r3
 80007ac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	69fa      	ldr	r2, [r7, #28]
 80007b4:	4013      	ands	r3, r2
 80007b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80007b8:	69ba      	ldr	r2, [r7, #24]
 80007ba:	69fb      	ldr	r3, [r7, #28]
 80007bc:	429a      	cmp	r2, r3
 80007be:	f040 8158 	bne.w	8000a72 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80007c2:	683b      	ldr	r3, [r7, #0]
 80007c4:	685b      	ldr	r3, [r3, #4]
 80007c6:	4a9a      	ldr	r2, [pc, #616]	; (8000a30 <HAL_GPIO_Init+0x2a0>)
 80007c8:	4293      	cmp	r3, r2
 80007ca:	d05e      	beq.n	800088a <HAL_GPIO_Init+0xfa>
 80007cc:	4a98      	ldr	r2, [pc, #608]	; (8000a30 <HAL_GPIO_Init+0x2a0>)
 80007ce:	4293      	cmp	r3, r2
 80007d0:	d875      	bhi.n	80008be <HAL_GPIO_Init+0x12e>
 80007d2:	4a98      	ldr	r2, [pc, #608]	; (8000a34 <HAL_GPIO_Init+0x2a4>)
 80007d4:	4293      	cmp	r3, r2
 80007d6:	d058      	beq.n	800088a <HAL_GPIO_Init+0xfa>
 80007d8:	4a96      	ldr	r2, [pc, #600]	; (8000a34 <HAL_GPIO_Init+0x2a4>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d86f      	bhi.n	80008be <HAL_GPIO_Init+0x12e>
 80007de:	4a96      	ldr	r2, [pc, #600]	; (8000a38 <HAL_GPIO_Init+0x2a8>)
 80007e0:	4293      	cmp	r3, r2
 80007e2:	d052      	beq.n	800088a <HAL_GPIO_Init+0xfa>
 80007e4:	4a94      	ldr	r2, [pc, #592]	; (8000a38 <HAL_GPIO_Init+0x2a8>)
 80007e6:	4293      	cmp	r3, r2
 80007e8:	d869      	bhi.n	80008be <HAL_GPIO_Init+0x12e>
 80007ea:	4a94      	ldr	r2, [pc, #592]	; (8000a3c <HAL_GPIO_Init+0x2ac>)
 80007ec:	4293      	cmp	r3, r2
 80007ee:	d04c      	beq.n	800088a <HAL_GPIO_Init+0xfa>
 80007f0:	4a92      	ldr	r2, [pc, #584]	; (8000a3c <HAL_GPIO_Init+0x2ac>)
 80007f2:	4293      	cmp	r3, r2
 80007f4:	d863      	bhi.n	80008be <HAL_GPIO_Init+0x12e>
 80007f6:	4a92      	ldr	r2, [pc, #584]	; (8000a40 <HAL_GPIO_Init+0x2b0>)
 80007f8:	4293      	cmp	r3, r2
 80007fa:	d046      	beq.n	800088a <HAL_GPIO_Init+0xfa>
 80007fc:	4a90      	ldr	r2, [pc, #576]	; (8000a40 <HAL_GPIO_Init+0x2b0>)
 80007fe:	4293      	cmp	r3, r2
 8000800:	d85d      	bhi.n	80008be <HAL_GPIO_Init+0x12e>
 8000802:	2b12      	cmp	r3, #18
 8000804:	d82a      	bhi.n	800085c <HAL_GPIO_Init+0xcc>
 8000806:	2b12      	cmp	r3, #18
 8000808:	d859      	bhi.n	80008be <HAL_GPIO_Init+0x12e>
 800080a:	a201      	add	r2, pc, #4	; (adr r2, 8000810 <HAL_GPIO_Init+0x80>)
 800080c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000810:	0800088b 	.word	0x0800088b
 8000814:	08000865 	.word	0x08000865
 8000818:	08000877 	.word	0x08000877
 800081c:	080008b9 	.word	0x080008b9
 8000820:	080008bf 	.word	0x080008bf
 8000824:	080008bf 	.word	0x080008bf
 8000828:	080008bf 	.word	0x080008bf
 800082c:	080008bf 	.word	0x080008bf
 8000830:	080008bf 	.word	0x080008bf
 8000834:	080008bf 	.word	0x080008bf
 8000838:	080008bf 	.word	0x080008bf
 800083c:	080008bf 	.word	0x080008bf
 8000840:	080008bf 	.word	0x080008bf
 8000844:	080008bf 	.word	0x080008bf
 8000848:	080008bf 	.word	0x080008bf
 800084c:	080008bf 	.word	0x080008bf
 8000850:	080008bf 	.word	0x080008bf
 8000854:	0800086d 	.word	0x0800086d
 8000858:	08000881 	.word	0x08000881
 800085c:	4a79      	ldr	r2, [pc, #484]	; (8000a44 <HAL_GPIO_Init+0x2b4>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d013      	beq.n	800088a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000862:	e02c      	b.n	80008be <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	68db      	ldr	r3, [r3, #12]
 8000868:	623b      	str	r3, [r7, #32]
          break;
 800086a:	e029      	b.n	80008c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	68db      	ldr	r3, [r3, #12]
 8000870:	3304      	adds	r3, #4
 8000872:	623b      	str	r3, [r7, #32]
          break;
 8000874:	e024      	b.n	80008c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	68db      	ldr	r3, [r3, #12]
 800087a:	3308      	adds	r3, #8
 800087c:	623b      	str	r3, [r7, #32]
          break;
 800087e:	e01f      	b.n	80008c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	68db      	ldr	r3, [r3, #12]
 8000884:	330c      	adds	r3, #12
 8000886:	623b      	str	r3, [r7, #32]
          break;
 8000888:	e01a      	b.n	80008c0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	689b      	ldr	r3, [r3, #8]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d102      	bne.n	8000898 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000892:	2304      	movs	r3, #4
 8000894:	623b      	str	r3, [r7, #32]
          break;
 8000896:	e013      	b.n	80008c0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	689b      	ldr	r3, [r3, #8]
 800089c:	2b01      	cmp	r3, #1
 800089e:	d105      	bne.n	80008ac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80008a0:	2308      	movs	r3, #8
 80008a2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	69fa      	ldr	r2, [r7, #28]
 80008a8:	611a      	str	r2, [r3, #16]
          break;
 80008aa:	e009      	b.n	80008c0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80008ac:	2308      	movs	r3, #8
 80008ae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	69fa      	ldr	r2, [r7, #28]
 80008b4:	615a      	str	r2, [r3, #20]
          break;
 80008b6:	e003      	b.n	80008c0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80008b8:	2300      	movs	r3, #0
 80008ba:	623b      	str	r3, [r7, #32]
          break;
 80008bc:	e000      	b.n	80008c0 <HAL_GPIO_Init+0x130>
          break;
 80008be:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80008c0:	69bb      	ldr	r3, [r7, #24]
 80008c2:	2bff      	cmp	r3, #255	; 0xff
 80008c4:	d801      	bhi.n	80008ca <HAL_GPIO_Init+0x13a>
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	e001      	b.n	80008ce <HAL_GPIO_Init+0x13e>
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	3304      	adds	r3, #4
 80008ce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80008d0:	69bb      	ldr	r3, [r7, #24]
 80008d2:	2bff      	cmp	r3, #255	; 0xff
 80008d4:	d802      	bhi.n	80008dc <HAL_GPIO_Init+0x14c>
 80008d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008d8:	009b      	lsls	r3, r3, #2
 80008da:	e002      	b.n	80008e2 <HAL_GPIO_Init+0x152>
 80008dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008de:	3b08      	subs	r3, #8
 80008e0:	009b      	lsls	r3, r3, #2
 80008e2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	681a      	ldr	r2, [r3, #0]
 80008e8:	210f      	movs	r1, #15
 80008ea:	693b      	ldr	r3, [r7, #16]
 80008ec:	fa01 f303 	lsl.w	r3, r1, r3
 80008f0:	43db      	mvns	r3, r3
 80008f2:	401a      	ands	r2, r3
 80008f4:	6a39      	ldr	r1, [r7, #32]
 80008f6:	693b      	ldr	r3, [r7, #16]
 80008f8:	fa01 f303 	lsl.w	r3, r1, r3
 80008fc:	431a      	orrs	r2, r3
 80008fe:	697b      	ldr	r3, [r7, #20]
 8000900:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	685b      	ldr	r3, [r3, #4]
 8000906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800090a:	2b00      	cmp	r3, #0
 800090c:	f000 80b1 	beq.w	8000a72 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000910:	4b4d      	ldr	r3, [pc, #308]	; (8000a48 <HAL_GPIO_Init+0x2b8>)
 8000912:	699b      	ldr	r3, [r3, #24]
 8000914:	4a4c      	ldr	r2, [pc, #304]	; (8000a48 <HAL_GPIO_Init+0x2b8>)
 8000916:	f043 0301 	orr.w	r3, r3, #1
 800091a:	6193      	str	r3, [r2, #24]
 800091c:	4b4a      	ldr	r3, [pc, #296]	; (8000a48 <HAL_GPIO_Init+0x2b8>)
 800091e:	699b      	ldr	r3, [r3, #24]
 8000920:	f003 0301 	and.w	r3, r3, #1
 8000924:	60bb      	str	r3, [r7, #8]
 8000926:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000928:	4a48      	ldr	r2, [pc, #288]	; (8000a4c <HAL_GPIO_Init+0x2bc>)
 800092a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800092c:	089b      	lsrs	r3, r3, #2
 800092e:	3302      	adds	r3, #2
 8000930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000934:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000938:	f003 0303 	and.w	r3, r3, #3
 800093c:	009b      	lsls	r3, r3, #2
 800093e:	220f      	movs	r2, #15
 8000940:	fa02 f303 	lsl.w	r3, r2, r3
 8000944:	43db      	mvns	r3, r3
 8000946:	68fa      	ldr	r2, [r7, #12]
 8000948:	4013      	ands	r3, r2
 800094a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	4a40      	ldr	r2, [pc, #256]	; (8000a50 <HAL_GPIO_Init+0x2c0>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d013      	beq.n	800097c <HAL_GPIO_Init+0x1ec>
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	4a3f      	ldr	r2, [pc, #252]	; (8000a54 <HAL_GPIO_Init+0x2c4>)
 8000958:	4293      	cmp	r3, r2
 800095a:	d00d      	beq.n	8000978 <HAL_GPIO_Init+0x1e8>
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	4a3e      	ldr	r2, [pc, #248]	; (8000a58 <HAL_GPIO_Init+0x2c8>)
 8000960:	4293      	cmp	r3, r2
 8000962:	d007      	beq.n	8000974 <HAL_GPIO_Init+0x1e4>
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	4a3d      	ldr	r2, [pc, #244]	; (8000a5c <HAL_GPIO_Init+0x2cc>)
 8000968:	4293      	cmp	r3, r2
 800096a:	d101      	bne.n	8000970 <HAL_GPIO_Init+0x1e0>
 800096c:	2303      	movs	r3, #3
 800096e:	e006      	b.n	800097e <HAL_GPIO_Init+0x1ee>
 8000970:	2304      	movs	r3, #4
 8000972:	e004      	b.n	800097e <HAL_GPIO_Init+0x1ee>
 8000974:	2302      	movs	r3, #2
 8000976:	e002      	b.n	800097e <HAL_GPIO_Init+0x1ee>
 8000978:	2301      	movs	r3, #1
 800097a:	e000      	b.n	800097e <HAL_GPIO_Init+0x1ee>
 800097c:	2300      	movs	r3, #0
 800097e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000980:	f002 0203 	and.w	r2, r2, #3
 8000984:	0092      	lsls	r2, r2, #2
 8000986:	4093      	lsls	r3, r2
 8000988:	68fa      	ldr	r2, [r7, #12]
 800098a:	4313      	orrs	r3, r2
 800098c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800098e:	492f      	ldr	r1, [pc, #188]	; (8000a4c <HAL_GPIO_Init+0x2bc>)
 8000990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000992:	089b      	lsrs	r3, r3, #2
 8000994:	3302      	adds	r3, #2
 8000996:	68fa      	ldr	r2, [r7, #12]
 8000998:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	685b      	ldr	r3, [r3, #4]
 80009a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d006      	beq.n	80009b6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80009a8:	4b2d      	ldr	r3, [pc, #180]	; (8000a60 <HAL_GPIO_Init+0x2d0>)
 80009aa:	689a      	ldr	r2, [r3, #8]
 80009ac:	492c      	ldr	r1, [pc, #176]	; (8000a60 <HAL_GPIO_Init+0x2d0>)
 80009ae:	69bb      	ldr	r3, [r7, #24]
 80009b0:	4313      	orrs	r3, r2
 80009b2:	608b      	str	r3, [r1, #8]
 80009b4:	e006      	b.n	80009c4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80009b6:	4b2a      	ldr	r3, [pc, #168]	; (8000a60 <HAL_GPIO_Init+0x2d0>)
 80009b8:	689a      	ldr	r2, [r3, #8]
 80009ba:	69bb      	ldr	r3, [r7, #24]
 80009bc:	43db      	mvns	r3, r3
 80009be:	4928      	ldr	r1, [pc, #160]	; (8000a60 <HAL_GPIO_Init+0x2d0>)
 80009c0:	4013      	ands	r3, r2
 80009c2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d006      	beq.n	80009de <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80009d0:	4b23      	ldr	r3, [pc, #140]	; (8000a60 <HAL_GPIO_Init+0x2d0>)
 80009d2:	68da      	ldr	r2, [r3, #12]
 80009d4:	4922      	ldr	r1, [pc, #136]	; (8000a60 <HAL_GPIO_Init+0x2d0>)
 80009d6:	69bb      	ldr	r3, [r7, #24]
 80009d8:	4313      	orrs	r3, r2
 80009da:	60cb      	str	r3, [r1, #12]
 80009dc:	e006      	b.n	80009ec <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80009de:	4b20      	ldr	r3, [pc, #128]	; (8000a60 <HAL_GPIO_Init+0x2d0>)
 80009e0:	68da      	ldr	r2, [r3, #12]
 80009e2:	69bb      	ldr	r3, [r7, #24]
 80009e4:	43db      	mvns	r3, r3
 80009e6:	491e      	ldr	r1, [pc, #120]	; (8000a60 <HAL_GPIO_Init+0x2d0>)
 80009e8:	4013      	ands	r3, r2
 80009ea:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	685b      	ldr	r3, [r3, #4]
 80009f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d006      	beq.n	8000a06 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80009f8:	4b19      	ldr	r3, [pc, #100]	; (8000a60 <HAL_GPIO_Init+0x2d0>)
 80009fa:	685a      	ldr	r2, [r3, #4]
 80009fc:	4918      	ldr	r1, [pc, #96]	; (8000a60 <HAL_GPIO_Init+0x2d0>)
 80009fe:	69bb      	ldr	r3, [r7, #24]
 8000a00:	4313      	orrs	r3, r2
 8000a02:	604b      	str	r3, [r1, #4]
 8000a04:	e006      	b.n	8000a14 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000a06:	4b16      	ldr	r3, [pc, #88]	; (8000a60 <HAL_GPIO_Init+0x2d0>)
 8000a08:	685a      	ldr	r2, [r3, #4]
 8000a0a:	69bb      	ldr	r3, [r7, #24]
 8000a0c:	43db      	mvns	r3, r3
 8000a0e:	4914      	ldr	r1, [pc, #80]	; (8000a60 <HAL_GPIO_Init+0x2d0>)
 8000a10:	4013      	ands	r3, r2
 8000a12:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	685b      	ldr	r3, [r3, #4]
 8000a18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d021      	beq.n	8000a64 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000a20:	4b0f      	ldr	r3, [pc, #60]	; (8000a60 <HAL_GPIO_Init+0x2d0>)
 8000a22:	681a      	ldr	r2, [r3, #0]
 8000a24:	490e      	ldr	r1, [pc, #56]	; (8000a60 <HAL_GPIO_Init+0x2d0>)
 8000a26:	69bb      	ldr	r3, [r7, #24]
 8000a28:	4313      	orrs	r3, r2
 8000a2a:	600b      	str	r3, [r1, #0]
 8000a2c:	e021      	b.n	8000a72 <HAL_GPIO_Init+0x2e2>
 8000a2e:	bf00      	nop
 8000a30:	10320000 	.word	0x10320000
 8000a34:	10310000 	.word	0x10310000
 8000a38:	10220000 	.word	0x10220000
 8000a3c:	10210000 	.word	0x10210000
 8000a40:	10120000 	.word	0x10120000
 8000a44:	10110000 	.word	0x10110000
 8000a48:	40021000 	.word	0x40021000
 8000a4c:	40010000 	.word	0x40010000
 8000a50:	40010800 	.word	0x40010800
 8000a54:	40010c00 	.word	0x40010c00
 8000a58:	40011000 	.word	0x40011000
 8000a5c:	40011400 	.word	0x40011400
 8000a60:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000a64:	4b0b      	ldr	r3, [pc, #44]	; (8000a94 <HAL_GPIO_Init+0x304>)
 8000a66:	681a      	ldr	r2, [r3, #0]
 8000a68:	69bb      	ldr	r3, [r7, #24]
 8000a6a:	43db      	mvns	r3, r3
 8000a6c:	4909      	ldr	r1, [pc, #36]	; (8000a94 <HAL_GPIO_Init+0x304>)
 8000a6e:	4013      	ands	r3, r2
 8000a70:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a74:	3301      	adds	r3, #1
 8000a76:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	681a      	ldr	r2, [r3, #0]
 8000a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a7e:	fa22 f303 	lsr.w	r3, r2, r3
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	f47f ae8e 	bne.w	80007a4 <HAL_GPIO_Init+0x14>
  }
}
 8000a88:	bf00      	nop
 8000a8a:	bf00      	nop
 8000a8c:	372c      	adds	r7, #44	; 0x2c
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bc80      	pop	{r7}
 8000a92:	4770      	bx	lr
 8000a94:	40010400 	.word	0x40010400

08000a98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
 8000aa0:	460b      	mov	r3, r1
 8000aa2:	807b      	strh	r3, [r7, #2]
 8000aa4:	4613      	mov	r3, r2
 8000aa6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000aa8:	787b      	ldrb	r3, [r7, #1]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d003      	beq.n	8000ab6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000aae:	887a      	ldrh	r2, [r7, #2]
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000ab4:	e003      	b.n	8000abe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ab6:	887b      	ldrh	r3, [r7, #2]
 8000ab8:	041a      	lsls	r2, r3, #16
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	611a      	str	r2, [r3, #16]
}
 8000abe:	bf00      	nop
 8000ac0:	370c      	adds	r7, #12
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bc80      	pop	{r7}
 8000ac6:	4770      	bx	lr

08000ac8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b086      	sub	sp, #24
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d101      	bne.n	8000ada <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	e272      	b.n	8000fc0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	f003 0301 	and.w	r3, r3, #1
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	f000 8087 	beq.w	8000bf6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ae8:	4b92      	ldr	r3, [pc, #584]	; (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	f003 030c 	and.w	r3, r3, #12
 8000af0:	2b04      	cmp	r3, #4
 8000af2:	d00c      	beq.n	8000b0e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000af4:	4b8f      	ldr	r3, [pc, #572]	; (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	f003 030c 	and.w	r3, r3, #12
 8000afc:	2b08      	cmp	r3, #8
 8000afe:	d112      	bne.n	8000b26 <HAL_RCC_OscConfig+0x5e>
 8000b00:	4b8c      	ldr	r3, [pc, #560]	; (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b0c:	d10b      	bne.n	8000b26 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b0e:	4b89      	ldr	r3, [pc, #548]	; (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d06c      	beq.n	8000bf4 <HAL_RCC_OscConfig+0x12c>
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d168      	bne.n	8000bf4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000b22:	2301      	movs	r3, #1
 8000b24:	e24c      	b.n	8000fc0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	685b      	ldr	r3, [r3, #4]
 8000b2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b2e:	d106      	bne.n	8000b3e <HAL_RCC_OscConfig+0x76>
 8000b30:	4b80      	ldr	r3, [pc, #512]	; (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a7f      	ldr	r2, [pc, #508]	; (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000b36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b3a:	6013      	str	r3, [r2, #0]
 8000b3c:	e02e      	b.n	8000b9c <HAL_RCC_OscConfig+0xd4>
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d10c      	bne.n	8000b60 <HAL_RCC_OscConfig+0x98>
 8000b46:	4b7b      	ldr	r3, [pc, #492]	; (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a7a      	ldr	r2, [pc, #488]	; (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000b4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b50:	6013      	str	r3, [r2, #0]
 8000b52:	4b78      	ldr	r3, [pc, #480]	; (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4a77      	ldr	r2, [pc, #476]	; (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000b58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b5c:	6013      	str	r3, [r2, #0]
 8000b5e:	e01d      	b.n	8000b9c <HAL_RCC_OscConfig+0xd4>
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b68:	d10c      	bne.n	8000b84 <HAL_RCC_OscConfig+0xbc>
 8000b6a:	4b72      	ldr	r3, [pc, #456]	; (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4a71      	ldr	r2, [pc, #452]	; (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000b70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b74:	6013      	str	r3, [r2, #0]
 8000b76:	4b6f      	ldr	r3, [pc, #444]	; (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4a6e      	ldr	r2, [pc, #440]	; (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000b7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b80:	6013      	str	r3, [r2, #0]
 8000b82:	e00b      	b.n	8000b9c <HAL_RCC_OscConfig+0xd4>
 8000b84:	4b6b      	ldr	r3, [pc, #428]	; (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a6a      	ldr	r2, [pc, #424]	; (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000b8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b8e:	6013      	str	r3, [r2, #0]
 8000b90:	4b68      	ldr	r3, [pc, #416]	; (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a67      	ldr	r2, [pc, #412]	; (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000b96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b9a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d013      	beq.n	8000bcc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ba4:	f7ff fd0a 	bl	80005bc <HAL_GetTick>
 8000ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000baa:	e008      	b.n	8000bbe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000bac:	f7ff fd06 	bl	80005bc <HAL_GetTick>
 8000bb0:	4602      	mov	r2, r0
 8000bb2:	693b      	ldr	r3, [r7, #16]
 8000bb4:	1ad3      	subs	r3, r2, r3
 8000bb6:	2b64      	cmp	r3, #100	; 0x64
 8000bb8:	d901      	bls.n	8000bbe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000bba:	2303      	movs	r3, #3
 8000bbc:	e200      	b.n	8000fc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bbe:	4b5d      	ldr	r3, [pc, #372]	; (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d0f0      	beq.n	8000bac <HAL_RCC_OscConfig+0xe4>
 8000bca:	e014      	b.n	8000bf6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bcc:	f7ff fcf6 	bl	80005bc <HAL_GetTick>
 8000bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bd2:	e008      	b.n	8000be6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000bd4:	f7ff fcf2 	bl	80005bc <HAL_GetTick>
 8000bd8:	4602      	mov	r2, r0
 8000bda:	693b      	ldr	r3, [r7, #16]
 8000bdc:	1ad3      	subs	r3, r2, r3
 8000bde:	2b64      	cmp	r3, #100	; 0x64
 8000be0:	d901      	bls.n	8000be6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000be2:	2303      	movs	r3, #3
 8000be4:	e1ec      	b.n	8000fc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000be6:	4b53      	ldr	r3, [pc, #332]	; (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d1f0      	bne.n	8000bd4 <HAL_RCC_OscConfig+0x10c>
 8000bf2:	e000      	b.n	8000bf6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bf4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f003 0302 	and.w	r3, r3, #2
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d063      	beq.n	8000cca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c02:	4b4c      	ldr	r3, [pc, #304]	; (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	f003 030c 	and.w	r3, r3, #12
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d00b      	beq.n	8000c26 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000c0e:	4b49      	ldr	r3, [pc, #292]	; (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	f003 030c 	and.w	r3, r3, #12
 8000c16:	2b08      	cmp	r3, #8
 8000c18:	d11c      	bne.n	8000c54 <HAL_RCC_OscConfig+0x18c>
 8000c1a:	4b46      	ldr	r3, [pc, #280]	; (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d116      	bne.n	8000c54 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c26:	4b43      	ldr	r3, [pc, #268]	; (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f003 0302 	and.w	r3, r3, #2
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d005      	beq.n	8000c3e <HAL_RCC_OscConfig+0x176>
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	691b      	ldr	r3, [r3, #16]
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d001      	beq.n	8000c3e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	e1c0      	b.n	8000fc0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c3e:	4b3d      	ldr	r3, [pc, #244]	; (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	695b      	ldr	r3, [r3, #20]
 8000c4a:	00db      	lsls	r3, r3, #3
 8000c4c:	4939      	ldr	r1, [pc, #228]	; (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c52:	e03a      	b.n	8000cca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	691b      	ldr	r3, [r3, #16]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d020      	beq.n	8000c9e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c5c:	4b36      	ldr	r3, [pc, #216]	; (8000d38 <HAL_RCC_OscConfig+0x270>)
 8000c5e:	2201      	movs	r2, #1
 8000c60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c62:	f7ff fcab 	bl	80005bc <HAL_GetTick>
 8000c66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c68:	e008      	b.n	8000c7c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c6a:	f7ff fca7 	bl	80005bc <HAL_GetTick>
 8000c6e:	4602      	mov	r2, r0
 8000c70:	693b      	ldr	r3, [r7, #16]
 8000c72:	1ad3      	subs	r3, r2, r3
 8000c74:	2b02      	cmp	r3, #2
 8000c76:	d901      	bls.n	8000c7c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000c78:	2303      	movs	r3, #3
 8000c7a:	e1a1      	b.n	8000fc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c7c:	4b2d      	ldr	r3, [pc, #180]	; (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f003 0302 	and.w	r3, r3, #2
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d0f0      	beq.n	8000c6a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c88:	4b2a      	ldr	r3, [pc, #168]	; (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	695b      	ldr	r3, [r3, #20]
 8000c94:	00db      	lsls	r3, r3, #3
 8000c96:	4927      	ldr	r1, [pc, #156]	; (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	600b      	str	r3, [r1, #0]
 8000c9c:	e015      	b.n	8000cca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000c9e:	4b26      	ldr	r3, [pc, #152]	; (8000d38 <HAL_RCC_OscConfig+0x270>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ca4:	f7ff fc8a 	bl	80005bc <HAL_GetTick>
 8000ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000caa:	e008      	b.n	8000cbe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000cac:	f7ff fc86 	bl	80005bc <HAL_GetTick>
 8000cb0:	4602      	mov	r2, r0
 8000cb2:	693b      	ldr	r3, [r7, #16]
 8000cb4:	1ad3      	subs	r3, r2, r3
 8000cb6:	2b02      	cmp	r3, #2
 8000cb8:	d901      	bls.n	8000cbe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000cba:	2303      	movs	r3, #3
 8000cbc:	e180      	b.n	8000fc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cbe:	4b1d      	ldr	r3, [pc, #116]	; (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f003 0302 	and.w	r3, r3, #2
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d1f0      	bne.n	8000cac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f003 0308 	and.w	r3, r3, #8
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d03a      	beq.n	8000d4c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	699b      	ldr	r3, [r3, #24]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d019      	beq.n	8000d12 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000cde:	4b17      	ldr	r3, [pc, #92]	; (8000d3c <HAL_RCC_OscConfig+0x274>)
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ce4:	f7ff fc6a 	bl	80005bc <HAL_GetTick>
 8000ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cea:	e008      	b.n	8000cfe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000cec:	f7ff fc66 	bl	80005bc <HAL_GetTick>
 8000cf0:	4602      	mov	r2, r0
 8000cf2:	693b      	ldr	r3, [r7, #16]
 8000cf4:	1ad3      	subs	r3, r2, r3
 8000cf6:	2b02      	cmp	r3, #2
 8000cf8:	d901      	bls.n	8000cfe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000cfa:	2303      	movs	r3, #3
 8000cfc:	e160      	b.n	8000fc0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cfe:	4b0d      	ldr	r3, [pc, #52]	; (8000d34 <HAL_RCC_OscConfig+0x26c>)
 8000d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d02:	f003 0302 	and.w	r3, r3, #2
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d0f0      	beq.n	8000cec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000d0a:	2001      	movs	r0, #1
 8000d0c:	f000 faea 	bl	80012e4 <RCC_Delay>
 8000d10:	e01c      	b.n	8000d4c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d12:	4b0a      	ldr	r3, [pc, #40]	; (8000d3c <HAL_RCC_OscConfig+0x274>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d18:	f7ff fc50 	bl	80005bc <HAL_GetTick>
 8000d1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d1e:	e00f      	b.n	8000d40 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d20:	f7ff fc4c 	bl	80005bc <HAL_GetTick>
 8000d24:	4602      	mov	r2, r0
 8000d26:	693b      	ldr	r3, [r7, #16]
 8000d28:	1ad3      	subs	r3, r2, r3
 8000d2a:	2b02      	cmp	r3, #2
 8000d2c:	d908      	bls.n	8000d40 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000d2e:	2303      	movs	r3, #3
 8000d30:	e146      	b.n	8000fc0 <HAL_RCC_OscConfig+0x4f8>
 8000d32:	bf00      	nop
 8000d34:	40021000 	.word	0x40021000
 8000d38:	42420000 	.word	0x42420000
 8000d3c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d40:	4b92      	ldr	r3, [pc, #584]	; (8000f8c <HAL_RCC_OscConfig+0x4c4>)
 8000d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d44:	f003 0302 	and.w	r3, r3, #2
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d1e9      	bne.n	8000d20 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f003 0304 	and.w	r3, r3, #4
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	f000 80a6 	beq.w	8000ea6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d5e:	4b8b      	ldr	r3, [pc, #556]	; (8000f8c <HAL_RCC_OscConfig+0x4c4>)
 8000d60:	69db      	ldr	r3, [r3, #28]
 8000d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d10d      	bne.n	8000d86 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d6a:	4b88      	ldr	r3, [pc, #544]	; (8000f8c <HAL_RCC_OscConfig+0x4c4>)
 8000d6c:	69db      	ldr	r3, [r3, #28]
 8000d6e:	4a87      	ldr	r2, [pc, #540]	; (8000f8c <HAL_RCC_OscConfig+0x4c4>)
 8000d70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d74:	61d3      	str	r3, [r2, #28]
 8000d76:	4b85      	ldr	r3, [pc, #532]	; (8000f8c <HAL_RCC_OscConfig+0x4c4>)
 8000d78:	69db      	ldr	r3, [r3, #28]
 8000d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d7e:	60bb      	str	r3, [r7, #8]
 8000d80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000d82:	2301      	movs	r3, #1
 8000d84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d86:	4b82      	ldr	r3, [pc, #520]	; (8000f90 <HAL_RCC_OscConfig+0x4c8>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d118      	bne.n	8000dc4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d92:	4b7f      	ldr	r3, [pc, #508]	; (8000f90 <HAL_RCC_OscConfig+0x4c8>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4a7e      	ldr	r2, [pc, #504]	; (8000f90 <HAL_RCC_OscConfig+0x4c8>)
 8000d98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000d9e:	f7ff fc0d 	bl	80005bc <HAL_GetTick>
 8000da2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000da4:	e008      	b.n	8000db8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000da6:	f7ff fc09 	bl	80005bc <HAL_GetTick>
 8000daa:	4602      	mov	r2, r0
 8000dac:	693b      	ldr	r3, [r7, #16]
 8000dae:	1ad3      	subs	r3, r2, r3
 8000db0:	2b64      	cmp	r3, #100	; 0x64
 8000db2:	d901      	bls.n	8000db8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000db4:	2303      	movs	r3, #3
 8000db6:	e103      	b.n	8000fc0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000db8:	4b75      	ldr	r3, [pc, #468]	; (8000f90 <HAL_RCC_OscConfig+0x4c8>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d0f0      	beq.n	8000da6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d106      	bne.n	8000dda <HAL_RCC_OscConfig+0x312>
 8000dcc:	4b6f      	ldr	r3, [pc, #444]	; (8000f8c <HAL_RCC_OscConfig+0x4c4>)
 8000dce:	6a1b      	ldr	r3, [r3, #32]
 8000dd0:	4a6e      	ldr	r2, [pc, #440]	; (8000f8c <HAL_RCC_OscConfig+0x4c4>)
 8000dd2:	f043 0301 	orr.w	r3, r3, #1
 8000dd6:	6213      	str	r3, [r2, #32]
 8000dd8:	e02d      	b.n	8000e36 <HAL_RCC_OscConfig+0x36e>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	68db      	ldr	r3, [r3, #12]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d10c      	bne.n	8000dfc <HAL_RCC_OscConfig+0x334>
 8000de2:	4b6a      	ldr	r3, [pc, #424]	; (8000f8c <HAL_RCC_OscConfig+0x4c4>)
 8000de4:	6a1b      	ldr	r3, [r3, #32]
 8000de6:	4a69      	ldr	r2, [pc, #420]	; (8000f8c <HAL_RCC_OscConfig+0x4c4>)
 8000de8:	f023 0301 	bic.w	r3, r3, #1
 8000dec:	6213      	str	r3, [r2, #32]
 8000dee:	4b67      	ldr	r3, [pc, #412]	; (8000f8c <HAL_RCC_OscConfig+0x4c4>)
 8000df0:	6a1b      	ldr	r3, [r3, #32]
 8000df2:	4a66      	ldr	r2, [pc, #408]	; (8000f8c <HAL_RCC_OscConfig+0x4c4>)
 8000df4:	f023 0304 	bic.w	r3, r3, #4
 8000df8:	6213      	str	r3, [r2, #32]
 8000dfa:	e01c      	b.n	8000e36 <HAL_RCC_OscConfig+0x36e>
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	68db      	ldr	r3, [r3, #12]
 8000e00:	2b05      	cmp	r3, #5
 8000e02:	d10c      	bne.n	8000e1e <HAL_RCC_OscConfig+0x356>
 8000e04:	4b61      	ldr	r3, [pc, #388]	; (8000f8c <HAL_RCC_OscConfig+0x4c4>)
 8000e06:	6a1b      	ldr	r3, [r3, #32]
 8000e08:	4a60      	ldr	r2, [pc, #384]	; (8000f8c <HAL_RCC_OscConfig+0x4c4>)
 8000e0a:	f043 0304 	orr.w	r3, r3, #4
 8000e0e:	6213      	str	r3, [r2, #32]
 8000e10:	4b5e      	ldr	r3, [pc, #376]	; (8000f8c <HAL_RCC_OscConfig+0x4c4>)
 8000e12:	6a1b      	ldr	r3, [r3, #32]
 8000e14:	4a5d      	ldr	r2, [pc, #372]	; (8000f8c <HAL_RCC_OscConfig+0x4c4>)
 8000e16:	f043 0301 	orr.w	r3, r3, #1
 8000e1a:	6213      	str	r3, [r2, #32]
 8000e1c:	e00b      	b.n	8000e36 <HAL_RCC_OscConfig+0x36e>
 8000e1e:	4b5b      	ldr	r3, [pc, #364]	; (8000f8c <HAL_RCC_OscConfig+0x4c4>)
 8000e20:	6a1b      	ldr	r3, [r3, #32]
 8000e22:	4a5a      	ldr	r2, [pc, #360]	; (8000f8c <HAL_RCC_OscConfig+0x4c4>)
 8000e24:	f023 0301 	bic.w	r3, r3, #1
 8000e28:	6213      	str	r3, [r2, #32]
 8000e2a:	4b58      	ldr	r3, [pc, #352]	; (8000f8c <HAL_RCC_OscConfig+0x4c4>)
 8000e2c:	6a1b      	ldr	r3, [r3, #32]
 8000e2e:	4a57      	ldr	r2, [pc, #348]	; (8000f8c <HAL_RCC_OscConfig+0x4c4>)
 8000e30:	f023 0304 	bic.w	r3, r3, #4
 8000e34:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	68db      	ldr	r3, [r3, #12]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d015      	beq.n	8000e6a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e3e:	f7ff fbbd 	bl	80005bc <HAL_GetTick>
 8000e42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e44:	e00a      	b.n	8000e5c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e46:	f7ff fbb9 	bl	80005bc <HAL_GetTick>
 8000e4a:	4602      	mov	r2, r0
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	1ad3      	subs	r3, r2, r3
 8000e50:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d901      	bls.n	8000e5c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000e58:	2303      	movs	r3, #3
 8000e5a:	e0b1      	b.n	8000fc0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e5c:	4b4b      	ldr	r3, [pc, #300]	; (8000f8c <HAL_RCC_OscConfig+0x4c4>)
 8000e5e:	6a1b      	ldr	r3, [r3, #32]
 8000e60:	f003 0302 	and.w	r3, r3, #2
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d0ee      	beq.n	8000e46 <HAL_RCC_OscConfig+0x37e>
 8000e68:	e014      	b.n	8000e94 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e6a:	f7ff fba7 	bl	80005bc <HAL_GetTick>
 8000e6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e70:	e00a      	b.n	8000e88 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e72:	f7ff fba3 	bl	80005bc <HAL_GetTick>
 8000e76:	4602      	mov	r2, r0
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	1ad3      	subs	r3, r2, r3
 8000e7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d901      	bls.n	8000e88 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000e84:	2303      	movs	r3, #3
 8000e86:	e09b      	b.n	8000fc0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e88:	4b40      	ldr	r3, [pc, #256]	; (8000f8c <HAL_RCC_OscConfig+0x4c4>)
 8000e8a:	6a1b      	ldr	r3, [r3, #32]
 8000e8c:	f003 0302 	and.w	r3, r3, #2
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d1ee      	bne.n	8000e72 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000e94:	7dfb      	ldrb	r3, [r7, #23]
 8000e96:	2b01      	cmp	r3, #1
 8000e98:	d105      	bne.n	8000ea6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e9a:	4b3c      	ldr	r3, [pc, #240]	; (8000f8c <HAL_RCC_OscConfig+0x4c4>)
 8000e9c:	69db      	ldr	r3, [r3, #28]
 8000e9e:	4a3b      	ldr	r2, [pc, #236]	; (8000f8c <HAL_RCC_OscConfig+0x4c4>)
 8000ea0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ea4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	69db      	ldr	r3, [r3, #28]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	f000 8087 	beq.w	8000fbe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000eb0:	4b36      	ldr	r3, [pc, #216]	; (8000f8c <HAL_RCC_OscConfig+0x4c4>)
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f003 030c 	and.w	r3, r3, #12
 8000eb8:	2b08      	cmp	r3, #8
 8000eba:	d061      	beq.n	8000f80 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	69db      	ldr	r3, [r3, #28]
 8000ec0:	2b02      	cmp	r3, #2
 8000ec2:	d146      	bne.n	8000f52 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ec4:	4b33      	ldr	r3, [pc, #204]	; (8000f94 <HAL_RCC_OscConfig+0x4cc>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eca:	f7ff fb77 	bl	80005bc <HAL_GetTick>
 8000ece:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ed0:	e008      	b.n	8000ee4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ed2:	f7ff fb73 	bl	80005bc <HAL_GetTick>
 8000ed6:	4602      	mov	r2, r0
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	1ad3      	subs	r3, r2, r3
 8000edc:	2b02      	cmp	r3, #2
 8000ede:	d901      	bls.n	8000ee4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000ee0:	2303      	movs	r3, #3
 8000ee2:	e06d      	b.n	8000fc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ee4:	4b29      	ldr	r3, [pc, #164]	; (8000f8c <HAL_RCC_OscConfig+0x4c4>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d1f0      	bne.n	8000ed2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6a1b      	ldr	r3, [r3, #32]
 8000ef4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ef8:	d108      	bne.n	8000f0c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000efa:	4b24      	ldr	r3, [pc, #144]	; (8000f8c <HAL_RCC_OscConfig+0x4c4>)
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	689b      	ldr	r3, [r3, #8]
 8000f06:	4921      	ldr	r1, [pc, #132]	; (8000f8c <HAL_RCC_OscConfig+0x4c4>)
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f0c:	4b1f      	ldr	r3, [pc, #124]	; (8000f8c <HAL_RCC_OscConfig+0x4c4>)
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6a19      	ldr	r1, [r3, #32]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f1c:	430b      	orrs	r3, r1
 8000f1e:	491b      	ldr	r1, [pc, #108]	; (8000f8c <HAL_RCC_OscConfig+0x4c4>)
 8000f20:	4313      	orrs	r3, r2
 8000f22:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f24:	4b1b      	ldr	r3, [pc, #108]	; (8000f94 <HAL_RCC_OscConfig+0x4cc>)
 8000f26:	2201      	movs	r2, #1
 8000f28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f2a:	f7ff fb47 	bl	80005bc <HAL_GetTick>
 8000f2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f30:	e008      	b.n	8000f44 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f32:	f7ff fb43 	bl	80005bc <HAL_GetTick>
 8000f36:	4602      	mov	r2, r0
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	1ad3      	subs	r3, r2, r3
 8000f3c:	2b02      	cmp	r3, #2
 8000f3e:	d901      	bls.n	8000f44 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000f40:	2303      	movs	r3, #3
 8000f42:	e03d      	b.n	8000fc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f44:	4b11      	ldr	r3, [pc, #68]	; (8000f8c <HAL_RCC_OscConfig+0x4c4>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d0f0      	beq.n	8000f32 <HAL_RCC_OscConfig+0x46a>
 8000f50:	e035      	b.n	8000fbe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f52:	4b10      	ldr	r3, [pc, #64]	; (8000f94 <HAL_RCC_OscConfig+0x4cc>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f58:	f7ff fb30 	bl	80005bc <HAL_GetTick>
 8000f5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f5e:	e008      	b.n	8000f72 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f60:	f7ff fb2c 	bl	80005bc <HAL_GetTick>
 8000f64:	4602      	mov	r2, r0
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	d901      	bls.n	8000f72 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	e026      	b.n	8000fc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f72:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <HAL_RCC_OscConfig+0x4c4>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d1f0      	bne.n	8000f60 <HAL_RCC_OscConfig+0x498>
 8000f7e:	e01e      	b.n	8000fbe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	69db      	ldr	r3, [r3, #28]
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d107      	bne.n	8000f98 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	e019      	b.n	8000fc0 <HAL_RCC_OscConfig+0x4f8>
 8000f8c:	40021000 	.word	0x40021000
 8000f90:	40007000 	.word	0x40007000
 8000f94:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000f98:	4b0b      	ldr	r3, [pc, #44]	; (8000fc8 <HAL_RCC_OscConfig+0x500>)
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6a1b      	ldr	r3, [r3, #32]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d106      	bne.n	8000fba <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fb6:	429a      	cmp	r2, r3
 8000fb8:	d001      	beq.n	8000fbe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e000      	b.n	8000fc0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8000fbe:	2300      	movs	r3, #0
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3718      	adds	r7, #24
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	40021000 	.word	0x40021000

08000fcc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d101      	bne.n	8000fe0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	e0d0      	b.n	8001182 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000fe0:	4b6a      	ldr	r3, [pc, #424]	; (800118c <HAL_RCC_ClockConfig+0x1c0>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f003 0307 	and.w	r3, r3, #7
 8000fe8:	683a      	ldr	r2, [r7, #0]
 8000fea:	429a      	cmp	r2, r3
 8000fec:	d910      	bls.n	8001010 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fee:	4b67      	ldr	r3, [pc, #412]	; (800118c <HAL_RCC_ClockConfig+0x1c0>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f023 0207 	bic.w	r2, r3, #7
 8000ff6:	4965      	ldr	r1, [pc, #404]	; (800118c <HAL_RCC_ClockConfig+0x1c0>)
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ffe:	4b63      	ldr	r3, [pc, #396]	; (800118c <HAL_RCC_ClockConfig+0x1c0>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f003 0307 	and.w	r3, r3, #7
 8001006:	683a      	ldr	r2, [r7, #0]
 8001008:	429a      	cmp	r2, r3
 800100a:	d001      	beq.n	8001010 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800100c:	2301      	movs	r3, #1
 800100e:	e0b8      	b.n	8001182 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f003 0302 	and.w	r3, r3, #2
 8001018:	2b00      	cmp	r3, #0
 800101a:	d020      	beq.n	800105e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f003 0304 	and.w	r3, r3, #4
 8001024:	2b00      	cmp	r3, #0
 8001026:	d005      	beq.n	8001034 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001028:	4b59      	ldr	r3, [pc, #356]	; (8001190 <HAL_RCC_ClockConfig+0x1c4>)
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	4a58      	ldr	r2, [pc, #352]	; (8001190 <HAL_RCC_ClockConfig+0x1c4>)
 800102e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001032:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f003 0308 	and.w	r3, r3, #8
 800103c:	2b00      	cmp	r3, #0
 800103e:	d005      	beq.n	800104c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001040:	4b53      	ldr	r3, [pc, #332]	; (8001190 <HAL_RCC_ClockConfig+0x1c4>)
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	4a52      	ldr	r2, [pc, #328]	; (8001190 <HAL_RCC_ClockConfig+0x1c4>)
 8001046:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800104a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800104c:	4b50      	ldr	r3, [pc, #320]	; (8001190 <HAL_RCC_ClockConfig+0x1c4>)
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	494d      	ldr	r1, [pc, #308]	; (8001190 <HAL_RCC_ClockConfig+0x1c4>)
 800105a:	4313      	orrs	r3, r2
 800105c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f003 0301 	and.w	r3, r3, #1
 8001066:	2b00      	cmp	r3, #0
 8001068:	d040      	beq.n	80010ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	2b01      	cmp	r3, #1
 8001070:	d107      	bne.n	8001082 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001072:	4b47      	ldr	r3, [pc, #284]	; (8001190 <HAL_RCC_ClockConfig+0x1c4>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800107a:	2b00      	cmp	r3, #0
 800107c:	d115      	bne.n	80010aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	e07f      	b.n	8001182 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	2b02      	cmp	r3, #2
 8001088:	d107      	bne.n	800109a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800108a:	4b41      	ldr	r3, [pc, #260]	; (8001190 <HAL_RCC_ClockConfig+0x1c4>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001092:	2b00      	cmp	r3, #0
 8001094:	d109      	bne.n	80010aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e073      	b.n	8001182 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800109a:	4b3d      	ldr	r3, [pc, #244]	; (8001190 <HAL_RCC_ClockConfig+0x1c4>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f003 0302 	and.w	r3, r3, #2
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d101      	bne.n	80010aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e06b      	b.n	8001182 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010aa:	4b39      	ldr	r3, [pc, #228]	; (8001190 <HAL_RCC_ClockConfig+0x1c4>)
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f023 0203 	bic.w	r2, r3, #3
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	4936      	ldr	r1, [pc, #216]	; (8001190 <HAL_RCC_ClockConfig+0x1c4>)
 80010b8:	4313      	orrs	r3, r2
 80010ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80010bc:	f7ff fa7e 	bl	80005bc <HAL_GetTick>
 80010c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010c2:	e00a      	b.n	80010da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010c4:	f7ff fa7a 	bl	80005bc <HAL_GetTick>
 80010c8:	4602      	mov	r2, r0
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d901      	bls.n	80010da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80010d6:	2303      	movs	r3, #3
 80010d8:	e053      	b.n	8001182 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010da:	4b2d      	ldr	r3, [pc, #180]	; (8001190 <HAL_RCC_ClockConfig+0x1c4>)
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f003 020c 	and.w	r2, r3, #12
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d1eb      	bne.n	80010c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80010ec:	4b27      	ldr	r3, [pc, #156]	; (800118c <HAL_RCC_ClockConfig+0x1c0>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f003 0307 	and.w	r3, r3, #7
 80010f4:	683a      	ldr	r2, [r7, #0]
 80010f6:	429a      	cmp	r2, r3
 80010f8:	d210      	bcs.n	800111c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010fa:	4b24      	ldr	r3, [pc, #144]	; (800118c <HAL_RCC_ClockConfig+0x1c0>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f023 0207 	bic.w	r2, r3, #7
 8001102:	4922      	ldr	r1, [pc, #136]	; (800118c <HAL_RCC_ClockConfig+0x1c0>)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	4313      	orrs	r3, r2
 8001108:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800110a:	4b20      	ldr	r3, [pc, #128]	; (800118c <HAL_RCC_ClockConfig+0x1c0>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f003 0307 	and.w	r3, r3, #7
 8001112:	683a      	ldr	r2, [r7, #0]
 8001114:	429a      	cmp	r2, r3
 8001116:	d001      	beq.n	800111c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001118:	2301      	movs	r3, #1
 800111a:	e032      	b.n	8001182 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f003 0304 	and.w	r3, r3, #4
 8001124:	2b00      	cmp	r3, #0
 8001126:	d008      	beq.n	800113a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001128:	4b19      	ldr	r3, [pc, #100]	; (8001190 <HAL_RCC_ClockConfig+0x1c4>)
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	4916      	ldr	r1, [pc, #88]	; (8001190 <HAL_RCC_ClockConfig+0x1c4>)
 8001136:	4313      	orrs	r3, r2
 8001138:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 0308 	and.w	r3, r3, #8
 8001142:	2b00      	cmp	r3, #0
 8001144:	d009      	beq.n	800115a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001146:	4b12      	ldr	r3, [pc, #72]	; (8001190 <HAL_RCC_ClockConfig+0x1c4>)
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	691b      	ldr	r3, [r3, #16]
 8001152:	00db      	lsls	r3, r3, #3
 8001154:	490e      	ldr	r1, [pc, #56]	; (8001190 <HAL_RCC_ClockConfig+0x1c4>)
 8001156:	4313      	orrs	r3, r2
 8001158:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800115a:	f000 f821 	bl	80011a0 <HAL_RCC_GetSysClockFreq>
 800115e:	4602      	mov	r2, r0
 8001160:	4b0b      	ldr	r3, [pc, #44]	; (8001190 <HAL_RCC_ClockConfig+0x1c4>)
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	091b      	lsrs	r3, r3, #4
 8001166:	f003 030f 	and.w	r3, r3, #15
 800116a:	490a      	ldr	r1, [pc, #40]	; (8001194 <HAL_RCC_ClockConfig+0x1c8>)
 800116c:	5ccb      	ldrb	r3, [r1, r3]
 800116e:	fa22 f303 	lsr.w	r3, r2, r3
 8001172:	4a09      	ldr	r2, [pc, #36]	; (8001198 <HAL_RCC_ClockConfig+0x1cc>)
 8001174:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001176:	4b09      	ldr	r3, [pc, #36]	; (800119c <HAL_RCC_ClockConfig+0x1d0>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff f926 	bl	80003cc <HAL_InitTick>

  return HAL_OK;
 8001180:	2300      	movs	r3, #0
}
 8001182:	4618      	mov	r0, r3
 8001184:	3710      	adds	r7, #16
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	40022000 	.word	0x40022000
 8001190:	40021000 	.word	0x40021000
 8001194:	0800289c 	.word	0x0800289c
 8001198:	20000000 	.word	0x20000000
 800119c:	20000004 	.word	0x20000004

080011a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b087      	sub	sp, #28
 80011a4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80011a6:	2300      	movs	r3, #0
 80011a8:	60fb      	str	r3, [r7, #12]
 80011aa:	2300      	movs	r3, #0
 80011ac:	60bb      	str	r3, [r7, #8]
 80011ae:	2300      	movs	r3, #0
 80011b0:	617b      	str	r3, [r7, #20]
 80011b2:	2300      	movs	r3, #0
 80011b4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80011b6:	2300      	movs	r3, #0
 80011b8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80011ba:	4b1e      	ldr	r3, [pc, #120]	; (8001234 <HAL_RCC_GetSysClockFreq+0x94>)
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	f003 030c 	and.w	r3, r3, #12
 80011c6:	2b04      	cmp	r3, #4
 80011c8:	d002      	beq.n	80011d0 <HAL_RCC_GetSysClockFreq+0x30>
 80011ca:	2b08      	cmp	r3, #8
 80011cc:	d003      	beq.n	80011d6 <HAL_RCC_GetSysClockFreq+0x36>
 80011ce:	e027      	b.n	8001220 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80011d0:	4b19      	ldr	r3, [pc, #100]	; (8001238 <HAL_RCC_GetSysClockFreq+0x98>)
 80011d2:	613b      	str	r3, [r7, #16]
      break;
 80011d4:	e027      	b.n	8001226 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	0c9b      	lsrs	r3, r3, #18
 80011da:	f003 030f 	and.w	r3, r3, #15
 80011de:	4a17      	ldr	r2, [pc, #92]	; (800123c <HAL_RCC_GetSysClockFreq+0x9c>)
 80011e0:	5cd3      	ldrb	r3, [r2, r3]
 80011e2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d010      	beq.n	8001210 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80011ee:	4b11      	ldr	r3, [pc, #68]	; (8001234 <HAL_RCC_GetSysClockFreq+0x94>)
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	0c5b      	lsrs	r3, r3, #17
 80011f4:	f003 0301 	and.w	r3, r3, #1
 80011f8:	4a11      	ldr	r2, [pc, #68]	; (8001240 <HAL_RCC_GetSysClockFreq+0xa0>)
 80011fa:	5cd3      	ldrb	r3, [r2, r3]
 80011fc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a0d      	ldr	r2, [pc, #52]	; (8001238 <HAL_RCC_GetSysClockFreq+0x98>)
 8001202:	fb03 f202 	mul.w	r2, r3, r2
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	fbb2 f3f3 	udiv	r3, r2, r3
 800120c:	617b      	str	r3, [r7, #20]
 800120e:	e004      	b.n	800121a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	4a0c      	ldr	r2, [pc, #48]	; (8001244 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001214:	fb02 f303 	mul.w	r3, r2, r3
 8001218:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	613b      	str	r3, [r7, #16]
      break;
 800121e:	e002      	b.n	8001226 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001220:	4b05      	ldr	r3, [pc, #20]	; (8001238 <HAL_RCC_GetSysClockFreq+0x98>)
 8001222:	613b      	str	r3, [r7, #16]
      break;
 8001224:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001226:	693b      	ldr	r3, [r7, #16]
}
 8001228:	4618      	mov	r0, r3
 800122a:	371c      	adds	r7, #28
 800122c:	46bd      	mov	sp, r7
 800122e:	bc80      	pop	{r7}
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	40021000 	.word	0x40021000
 8001238:	007a1200 	.word	0x007a1200
 800123c:	080028b4 	.word	0x080028b4
 8001240:	080028c4 	.word	0x080028c4
 8001244:	003d0900 	.word	0x003d0900

08001248 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800124c:	4b02      	ldr	r3, [pc, #8]	; (8001258 <HAL_RCC_GetHCLKFreq+0x10>)
 800124e:	681b      	ldr	r3, [r3, #0]
}
 8001250:	4618      	mov	r0, r3
 8001252:	46bd      	mov	sp, r7
 8001254:	bc80      	pop	{r7}
 8001256:	4770      	bx	lr
 8001258:	20000000 	.word	0x20000000

0800125c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001260:	f7ff fff2 	bl	8001248 <HAL_RCC_GetHCLKFreq>
 8001264:	4602      	mov	r2, r0
 8001266:	4b05      	ldr	r3, [pc, #20]	; (800127c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	0adb      	lsrs	r3, r3, #11
 800126c:	f003 0307 	and.w	r3, r3, #7
 8001270:	4903      	ldr	r1, [pc, #12]	; (8001280 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001272:	5ccb      	ldrb	r3, [r1, r3]
 8001274:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001278:	4618      	mov	r0, r3
 800127a:	bd80      	pop	{r7, pc}
 800127c:	40021000 	.word	0x40021000
 8001280:	080028ac 	.word	0x080028ac

08001284 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	220f      	movs	r2, #15
 8001292:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001294:	4b11      	ldr	r3, [pc, #68]	; (80012dc <HAL_RCC_GetClockConfig+0x58>)
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f003 0203 	and.w	r2, r3, #3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80012a0:	4b0e      	ldr	r3, [pc, #56]	; (80012dc <HAL_RCC_GetClockConfig+0x58>)
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80012ac:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <HAL_RCC_GetClockConfig+0x58>)
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80012b8:	4b08      	ldr	r3, [pc, #32]	; (80012dc <HAL_RCC_GetClockConfig+0x58>)
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	08db      	lsrs	r3, r3, #3
 80012be:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80012c6:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <HAL_RCC_GetClockConfig+0x5c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 0207 	and.w	r2, r3, #7
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80012d2:	bf00      	nop
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bc80      	pop	{r7}
 80012da:	4770      	bx	lr
 80012dc:	40021000 	.word	0x40021000
 80012e0:	40022000 	.word	0x40022000

080012e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b085      	sub	sp, #20
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80012ec:	4b0a      	ldr	r3, [pc, #40]	; (8001318 <RCC_Delay+0x34>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a0a      	ldr	r2, [pc, #40]	; (800131c <RCC_Delay+0x38>)
 80012f2:	fba2 2303 	umull	r2, r3, r2, r3
 80012f6:	0a5b      	lsrs	r3, r3, #9
 80012f8:	687a      	ldr	r2, [r7, #4]
 80012fa:	fb02 f303 	mul.w	r3, r2, r3
 80012fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001300:	bf00      	nop
  }
  while (Delay --);
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	1e5a      	subs	r2, r3, #1
 8001306:	60fa      	str	r2, [r7, #12]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d1f9      	bne.n	8001300 <RCC_Delay+0x1c>
}
 800130c:	bf00      	nop
 800130e:	bf00      	nop
 8001310:	3714      	adds	r7, #20
 8001312:	46bd      	mov	sp, r7
 8001314:	bc80      	pop	{r7}
 8001316:	4770      	bx	lr
 8001318:	20000000 	.word	0x20000000
 800131c:	10624dd3 	.word	0x10624dd3

08001320 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d101      	bne.n	8001332 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e041      	b.n	80013b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001338:	b2db      	uxtb	r3, r3
 800133a:	2b00      	cmp	r3, #0
 800133c:	d106      	bne.n	800134c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2200      	movs	r2, #0
 8001342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f000 f839 	bl	80013be <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2202      	movs	r2, #2
 8001350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	3304      	adds	r3, #4
 800135c:	4619      	mov	r1, r3
 800135e:	4610      	mov	r0, r2
 8001360:	f000 f9b4 	bl	80016cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2201      	movs	r2, #1
 8001368:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2201      	movs	r2, #1
 8001370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2201      	movs	r2, #1
 8001378:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2201      	movs	r2, #1
 8001380:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2201      	movs	r2, #1
 8001388:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2201      	movs	r2, #1
 8001390:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2201      	movs	r2, #1
 8001398:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2201      	movs	r2, #1
 80013a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2201      	movs	r2, #1
 80013a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2201      	movs	r2, #1
 80013b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80013b4:	2300      	movs	r3, #0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}

080013be <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80013be:	b480      	push	{r7}
 80013c0:	b083      	sub	sp, #12
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80013c6:	bf00      	nop
 80013c8:	370c      	adds	r7, #12
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bc80      	pop	{r7}
 80013ce:	4770      	bx	lr

080013d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d001      	beq.n	80013e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e03a      	b.n	800145e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2202      	movs	r2, #2
 80013ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	68da      	ldr	r2, [r3, #12]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f042 0201 	orr.w	r2, r2, #1
 80013fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a18      	ldr	r2, [pc, #96]	; (8001468 <HAL_TIM_Base_Start_IT+0x98>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d00e      	beq.n	8001428 <HAL_TIM_Base_Start_IT+0x58>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001412:	d009      	beq.n	8001428 <HAL_TIM_Base_Start_IT+0x58>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a14      	ldr	r2, [pc, #80]	; (800146c <HAL_TIM_Base_Start_IT+0x9c>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d004      	beq.n	8001428 <HAL_TIM_Base_Start_IT+0x58>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a13      	ldr	r2, [pc, #76]	; (8001470 <HAL_TIM_Base_Start_IT+0xa0>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d111      	bne.n	800144c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	f003 0307 	and.w	r3, r3, #7
 8001432:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	2b06      	cmp	r3, #6
 8001438:	d010      	beq.n	800145c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f042 0201 	orr.w	r2, r2, #1
 8001448:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800144a:	e007      	b.n	800145c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f042 0201 	orr.w	r2, r2, #1
 800145a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800145c:	2300      	movs	r3, #0
}
 800145e:	4618      	mov	r0, r3
 8001460:	3714      	adds	r7, #20
 8001462:	46bd      	mov	sp, r7
 8001464:	bc80      	pop	{r7}
 8001466:	4770      	bx	lr
 8001468:	40012c00 	.word	0x40012c00
 800146c:	40000400 	.word	0x40000400
 8001470:	40000800 	.word	0x40000800

08001474 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	691b      	ldr	r3, [r3, #16]
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	2b02      	cmp	r3, #2
 8001488:	d122      	bne.n	80014d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	f003 0302 	and.w	r3, r3, #2
 8001494:	2b02      	cmp	r3, #2
 8001496:	d11b      	bne.n	80014d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f06f 0202 	mvn.w	r2, #2
 80014a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2201      	movs	r2, #1
 80014a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	699b      	ldr	r3, [r3, #24]
 80014ae:	f003 0303 	and.w	r3, r3, #3
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d003      	beq.n	80014be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f000 f8ed 	bl	8001696 <HAL_TIM_IC_CaptureCallback>
 80014bc:	e005      	b.n	80014ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f000 f8e0 	bl	8001684 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f000 f8ef 	bl	80016a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2200      	movs	r2, #0
 80014ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	691b      	ldr	r3, [r3, #16]
 80014d6:	f003 0304 	and.w	r3, r3, #4
 80014da:	2b04      	cmp	r3, #4
 80014dc:	d122      	bne.n	8001524 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	f003 0304 	and.w	r3, r3, #4
 80014e8:	2b04      	cmp	r3, #4
 80014ea:	d11b      	bne.n	8001524 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f06f 0204 	mvn.w	r2, #4
 80014f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2202      	movs	r2, #2
 80014fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	699b      	ldr	r3, [r3, #24]
 8001502:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001506:	2b00      	cmp	r3, #0
 8001508:	d003      	beq.n	8001512 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f000 f8c3 	bl	8001696 <HAL_TIM_IC_CaptureCallback>
 8001510:	e005      	b.n	800151e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f000 f8b6 	bl	8001684 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f000 f8c5 	bl	80016a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2200      	movs	r2, #0
 8001522:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	691b      	ldr	r3, [r3, #16]
 800152a:	f003 0308 	and.w	r3, r3, #8
 800152e:	2b08      	cmp	r3, #8
 8001530:	d122      	bne.n	8001578 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	f003 0308 	and.w	r3, r3, #8
 800153c:	2b08      	cmp	r3, #8
 800153e:	d11b      	bne.n	8001578 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f06f 0208 	mvn.w	r2, #8
 8001548:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2204      	movs	r2, #4
 800154e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	69db      	ldr	r3, [r3, #28]
 8001556:	f003 0303 	and.w	r3, r3, #3
 800155a:	2b00      	cmp	r3, #0
 800155c:	d003      	beq.n	8001566 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f000 f899 	bl	8001696 <HAL_TIM_IC_CaptureCallback>
 8001564:	e005      	b.n	8001572 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f000 f88c 	bl	8001684 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f000 f89b 	bl	80016a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2200      	movs	r2, #0
 8001576:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	691b      	ldr	r3, [r3, #16]
 800157e:	f003 0310 	and.w	r3, r3, #16
 8001582:	2b10      	cmp	r3, #16
 8001584:	d122      	bne.n	80015cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	f003 0310 	and.w	r3, r3, #16
 8001590:	2b10      	cmp	r3, #16
 8001592:	d11b      	bne.n	80015cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f06f 0210 	mvn.w	r2, #16
 800159c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2208      	movs	r2, #8
 80015a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	69db      	ldr	r3, [r3, #28]
 80015aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d003      	beq.n	80015ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f000 f86f 	bl	8001696 <HAL_TIM_IC_CaptureCallback>
 80015b8:	e005      	b.n	80015c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f000 f862 	bl	8001684 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f000 f871 	bl	80016a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2200      	movs	r2, #0
 80015ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	691b      	ldr	r3, [r3, #16]
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d10e      	bne.n	80015f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	f003 0301 	and.w	r3, r3, #1
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d107      	bne.n	80015f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f06f 0201 	mvn.w	r2, #1
 80015f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f7fe fea0 	bl	8000338 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	691b      	ldr	r3, [r3, #16]
 80015fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001602:	2b80      	cmp	r3, #128	; 0x80
 8001604:	d10e      	bne.n	8001624 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001610:	2b80      	cmp	r3, #128	; 0x80
 8001612:	d107      	bne.n	8001624 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800161c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f000 f8bf 	bl	80017a2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	691b      	ldr	r3, [r3, #16]
 800162a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800162e:	2b40      	cmp	r3, #64	; 0x40
 8001630:	d10e      	bne.n	8001650 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800163c:	2b40      	cmp	r3, #64	; 0x40
 800163e:	d107      	bne.n	8001650 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001648:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f000 f835 	bl	80016ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	691b      	ldr	r3, [r3, #16]
 8001656:	f003 0320 	and.w	r3, r3, #32
 800165a:	2b20      	cmp	r3, #32
 800165c:	d10e      	bne.n	800167c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	f003 0320 	and.w	r3, r3, #32
 8001668:	2b20      	cmp	r3, #32
 800166a:	d107      	bne.n	800167c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f06f 0220 	mvn.w	r2, #32
 8001674:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f000 f88a 	bl	8001790 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800167c:	bf00      	nop
 800167e:	3708      	adds	r7, #8
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800168c:	bf00      	nop
 800168e:	370c      	adds	r7, #12
 8001690:	46bd      	mov	sp, r7
 8001692:	bc80      	pop	{r7}
 8001694:	4770      	bx	lr

08001696 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001696:	b480      	push	{r7}
 8001698:	b083      	sub	sp, #12
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800169e:	bf00      	nop
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bc80      	pop	{r7}
 80016a6:	4770      	bx	lr

080016a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80016b0:	bf00      	nop
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bc80      	pop	{r7}
 80016b8:	4770      	bx	lr

080016ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80016ba:	b480      	push	{r7}
 80016bc:	b083      	sub	sp, #12
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80016c2:	bf00      	nop
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bc80      	pop	{r7}
 80016ca:	4770      	bx	lr

080016cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	4a29      	ldr	r2, [pc, #164]	; (8001784 <TIM_Base_SetConfig+0xb8>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d00b      	beq.n	80016fc <TIM_Base_SetConfig+0x30>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016ea:	d007      	beq.n	80016fc <TIM_Base_SetConfig+0x30>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	4a26      	ldr	r2, [pc, #152]	; (8001788 <TIM_Base_SetConfig+0xbc>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d003      	beq.n	80016fc <TIM_Base_SetConfig+0x30>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	4a25      	ldr	r2, [pc, #148]	; (800178c <TIM_Base_SetConfig+0xc0>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d108      	bne.n	800170e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001702:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	68fa      	ldr	r2, [r7, #12]
 800170a:	4313      	orrs	r3, r2
 800170c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4a1c      	ldr	r2, [pc, #112]	; (8001784 <TIM_Base_SetConfig+0xb8>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d00b      	beq.n	800172e <TIM_Base_SetConfig+0x62>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800171c:	d007      	beq.n	800172e <TIM_Base_SetConfig+0x62>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4a19      	ldr	r2, [pc, #100]	; (8001788 <TIM_Base_SetConfig+0xbc>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d003      	beq.n	800172e <TIM_Base_SetConfig+0x62>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4a18      	ldr	r2, [pc, #96]	; (800178c <TIM_Base_SetConfig+0xc0>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d108      	bne.n	8001740 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001734:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	68db      	ldr	r3, [r3, #12]
 800173a:	68fa      	ldr	r2, [r7, #12]
 800173c:	4313      	orrs	r3, r2
 800173e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	695b      	ldr	r3, [r3, #20]
 800174a:	4313      	orrs	r3, r2
 800174c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	68fa      	ldr	r2, [r7, #12]
 8001752:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	689a      	ldr	r2, [r3, #8]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	4a07      	ldr	r2, [pc, #28]	; (8001784 <TIM_Base_SetConfig+0xb8>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d103      	bne.n	8001774 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	691a      	ldr	r2, [r3, #16]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2201      	movs	r2, #1
 8001778:	615a      	str	r2, [r3, #20]
}
 800177a:	bf00      	nop
 800177c:	3714      	adds	r7, #20
 800177e:	46bd      	mov	sp, r7
 8001780:	bc80      	pop	{r7}
 8001782:	4770      	bx	lr
 8001784:	40012c00 	.word	0x40012c00
 8001788:	40000400 	.word	0x40000400
 800178c:	40000800 	.word	0x40000800

08001790 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001798:	bf00      	nop
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	bc80      	pop	{r7}
 80017a0:	4770      	bx	lr

080017a2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80017a2:	b480      	push	{r7}
 80017a4:	b083      	sub	sp, #12
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80017aa:	bf00      	nop
 80017ac:	370c      	adds	r7, #12
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bc80      	pop	{r7}
 80017b2:	4770      	bx	lr

080017b4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f103 0208 	add.w	r2, r3, #8
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	f04f 32ff 	mov.w	r2, #4294967295
 80017cc:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f103 0208 	add.w	r2, r3, #8
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f103 0208 	add.w	r2, r3, #8
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80017e8:	bf00      	nop
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bc80      	pop	{r7}
 80017f0:	4770      	bx	lr

080017f2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80017f2:	b480      	push	{r7}
 80017f4:	b083      	sub	sp, #12
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2200      	movs	r2, #0
 80017fe:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001800:	bf00      	nop
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	bc80      	pop	{r7}
 8001808:	4770      	bx	lr

0800180a <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800180a:	b480      	push	{r7}
 800180c:	b085      	sub	sp, #20
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	691b      	ldr	r3, [r3, #16]
 8001816:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	6892      	ldr	r2, [r2, #8]
 8001820:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	6852      	ldr	r2, [r2, #4]
 800182a:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	429a      	cmp	r2, r3
 8001834:	d103      	bne.n	800183e <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	689a      	ldr	r2, [r3, #8]
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2200      	movs	r2, #0
 8001842:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	1e5a      	subs	r2, r3, #1
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
}
 8001852:	4618      	mov	r0, r3
 8001854:	3714      	adds	r7, #20
 8001856:	46bd      	mov	sp, r7
 8001858:	bc80      	pop	{r7}
 800185a:	4770      	bx	lr

0800185c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800185c:	b580      	push	{r7, lr}
 800185e:	b08c      	sub	sp, #48	; 0x30
 8001860:	af04      	add	r7, sp, #16
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	60b9      	str	r1, [r7, #8]
 8001866:	603b      	str	r3, [r7, #0]
 8001868:	4613      	mov	r3, r2
 800186a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800186c:	88fb      	ldrh	r3, [r7, #6]
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	4618      	mov	r0, r3
 8001872:	f000 fe01 	bl	8002478 <pvPortMalloc>
 8001876:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d013      	beq.n	80018a6 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800187e:	204c      	movs	r0, #76	; 0x4c
 8001880:	f000 fdfa 	bl	8002478 <pvPortMalloc>
 8001884:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d008      	beq.n	800189e <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800188c:	224c      	movs	r2, #76	; 0x4c
 800188e:	2100      	movs	r1, #0
 8001890:	69f8      	ldr	r0, [r7, #28]
 8001892:	f000 ffbb 	bl	800280c <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	697a      	ldr	r2, [r7, #20]
 800189a:	631a      	str	r2, [r3, #48]	; 0x30
 800189c:	e005      	b.n	80018aa <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800189e:	6978      	ldr	r0, [r7, #20]
 80018a0:	f000 fea4 	bl	80025ec <vPortFree>
 80018a4:	e001      	b.n	80018aa <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80018a6:	2300      	movs	r3, #0
 80018a8:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d013      	beq.n	80018d8 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80018b0:	88fa      	ldrh	r2, [r7, #6]
 80018b2:	2300      	movs	r3, #0
 80018b4:	9303      	str	r3, [sp, #12]
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	9302      	str	r3, [sp, #8]
 80018ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018bc:	9301      	str	r3, [sp, #4]
 80018be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018c0:	9300      	str	r3, [sp, #0]
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	68b9      	ldr	r1, [r7, #8]
 80018c6:	68f8      	ldr	r0, [r7, #12]
 80018c8:	f000 f80e 	bl	80018e8 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80018cc:	69f8      	ldr	r0, [r7, #28]
 80018ce:	f000 f88f 	bl	80019f0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80018d2:	2301      	movs	r3, #1
 80018d4:	61bb      	str	r3, [r7, #24]
 80018d6:	e002      	b.n	80018de <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80018d8:	f04f 33ff 	mov.w	r3, #4294967295
 80018dc:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80018de:	69bb      	ldr	r3, [r7, #24]
    }
 80018e0:	4618      	mov	r0, r3
 80018e2:	3720      	adds	r7, #32
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b088      	sub	sp, #32
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	60f8      	str	r0, [r7, #12]
 80018f0:	60b9      	str	r1, [r7, #8]
 80018f2:	607a      	str	r2, [r7, #4]
 80018f4:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80018f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001900:	3b01      	subs	r3, #1
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	4413      	add	r3, r2
 8001906:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	f023 0307 	bic.w	r3, r3, #7
 800190e:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	f003 0307 	and.w	r3, r3, #7
 8001916:	2b00      	cmp	r3, #0
 8001918:	d00a      	beq.n	8001930 <prvInitialiseNewTask+0x48>
        __asm volatile
 800191a:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 800191e:	f383 8811 	msr	BASEPRI, r3
 8001922:	f3bf 8f6f 	isb	sy
 8001926:	f3bf 8f4f 	dsb	sy
 800192a:	617b      	str	r3, [r7, #20]
    }
 800192c:	bf00      	nop
 800192e:	e7fe      	b.n	800192e <prvInitialiseNewTask+0x46>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d01e      	beq.n	8001974 <prvInitialiseNewTask+0x8c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001936:	2300      	movs	r3, #0
 8001938:	61fb      	str	r3, [r7, #28]
 800193a:	e012      	b.n	8001962 <prvInitialiseNewTask+0x7a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800193c:	68ba      	ldr	r2, [r7, #8]
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	4413      	add	r3, r2
 8001942:	7819      	ldrb	r1, [r3, #0]
 8001944:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	4413      	add	r3, r2
 800194a:	3334      	adds	r3, #52	; 0x34
 800194c:	460a      	mov	r2, r1
 800194e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001950:	68ba      	ldr	r2, [r7, #8]
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	4413      	add	r3, r2
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d006      	beq.n	800196a <prvInitialiseNewTask+0x82>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	3301      	adds	r3, #1
 8001960:	61fb      	str	r3, [r7, #28]
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	2b0f      	cmp	r3, #15
 8001966:	d9e9      	bls.n	800193c <prvInitialiseNewTask+0x54>
 8001968:	e000      	b.n	800196c <prvInitialiseNewTask+0x84>
            {
                break;
 800196a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800196c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800196e:	2200      	movs	r2, #0
 8001970:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8001974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001976:	2b04      	cmp	r3, #4
 8001978:	d90a      	bls.n	8001990 <prvInitialiseNewTask+0xa8>
        __asm volatile
 800197a:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 800197e:	f383 8811 	msr	BASEPRI, r3
 8001982:	f3bf 8f6f 	isb	sy
 8001986:	f3bf 8f4f 	dsb	sy
 800198a:	613b      	str	r3, [r7, #16]
    }
 800198c:	bf00      	nop
 800198e:	e7fe      	b.n	800198e <prvInitialiseNewTask+0xa6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001992:	2b04      	cmp	r3, #4
 8001994:	d901      	bls.n	800199a <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001996:	2304      	movs	r3, #4
 8001998:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800199a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800199c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800199e:	62da      	str	r2, [r3, #44]	; 0x2c
    {
        pxNewTCB->uxBasePriority = uxPriority;
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80019a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019a2:	3304      	adds	r3, #4
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff ff24 	bl	80017f2 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80019aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019ac:	3318      	adds	r3, #24
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7ff ff1f 	bl	80017f2 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80019b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80019b8:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80019ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019bc:	f1c3 0205 	rsb	r2, r3, #5
 80019c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019c2:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80019c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80019c8:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80019ca:	683a      	ldr	r2, [r7, #0]
 80019cc:	68f9      	ldr	r1, [r7, #12]
 80019ce:	69b8      	ldr	r0, [r7, #24]
 80019d0:	f000 fc16 	bl	8002200 <pxPortInitialiseStack>
 80019d4:	4602      	mov	r2, r0
 80019d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019d8:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80019da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d002      	beq.n	80019e6 <prvInitialiseNewTask+0xfe>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80019e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80019e4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80019e6:	bf00      	nop
 80019e8:	3720      	adds	r7, #32
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
	...

080019f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80019f8:	f000 fccc 	bl	8002394 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80019fc:	4b3e      	ldr	r3, [pc, #248]	; (8001af8 <prvAddNewTaskToReadyList+0x108>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	3301      	adds	r3, #1
 8001a02:	4a3d      	ldr	r2, [pc, #244]	; (8001af8 <prvAddNewTaskToReadyList+0x108>)
 8001a04:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8001a06:	4b3d      	ldr	r3, [pc, #244]	; (8001afc <prvAddNewTaskToReadyList+0x10c>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d109      	bne.n	8001a22 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8001a0e:	4a3b      	ldr	r2, [pc, #236]	; (8001afc <prvAddNewTaskToReadyList+0x10c>)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001a14:	4b38      	ldr	r3, [pc, #224]	; (8001af8 <prvAddNewTaskToReadyList+0x108>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d110      	bne.n	8001a3e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8001a1c:	f000 fb58 	bl	80020d0 <prvInitialiseTaskLists>
 8001a20:	e00d      	b.n	8001a3e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8001a22:	4b37      	ldr	r3, [pc, #220]	; (8001b00 <prvAddNewTaskToReadyList+0x110>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d109      	bne.n	8001a3e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001a2a:	4b34      	ldr	r3, [pc, #208]	; (8001afc <prvAddNewTaskToReadyList+0x10c>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d802      	bhi.n	8001a3e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8001a38:	4a30      	ldr	r2, [pc, #192]	; (8001afc <prvAddNewTaskToReadyList+0x10c>)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8001a3e:	4b31      	ldr	r3, [pc, #196]	; (8001b04 <prvAddNewTaskToReadyList+0x114>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	3301      	adds	r3, #1
 8001a44:	4a2f      	ldr	r2, [pc, #188]	; (8001b04 <prvAddNewTaskToReadyList+0x114>)
 8001a46:	6013      	str	r3, [r2, #0]
            pxNewTCB->uxTCBNumber = uxTaskNumber;
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	409a      	lsls	r2, r3
 8001a50:	4b2d      	ldr	r3, [pc, #180]	; (8001b08 <prvAddNewTaskToReadyList+0x118>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	4a2c      	ldr	r2, [pc, #176]	; (8001b08 <prvAddNewTaskToReadyList+0x118>)
 8001a58:	6013      	str	r3, [r2, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a5e:	492b      	ldr	r1, [pc, #172]	; (8001b0c <prvAddNewTaskToReadyList+0x11c>)
 8001a60:	4613      	mov	r3, r2
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	4413      	add	r3, r2
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	440b      	add	r3, r1
 8001a6a:	3304      	adds	r3, #4
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	68fa      	ldr	r2, [r7, #12]
 8001a74:	609a      	str	r2, [r3, #8]
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	689a      	ldr	r2, [r3, #8]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	60da      	str	r2, [r3, #12]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	3204      	adds	r2, #4
 8001a86:	605a      	str	r2, [r3, #4]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	1d1a      	adds	r2, r3, #4
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	609a      	str	r2, [r3, #8]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a94:	4613      	mov	r3, r2
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	4413      	add	r3, r2
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	4a1b      	ldr	r2, [pc, #108]	; (8001b0c <prvAddNewTaskToReadyList+0x11c>)
 8001a9e:	441a      	add	r2, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	615a      	str	r2, [r3, #20]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001aa8:	4918      	ldr	r1, [pc, #96]	; (8001b0c <prvAddNewTaskToReadyList+0x11c>)
 8001aaa:	4613      	mov	r3, r2
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	4413      	add	r3, r2
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	440b      	add	r3, r1
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	1c59      	adds	r1, r3, #1
 8001ab8:	4814      	ldr	r0, [pc, #80]	; (8001b0c <prvAddNewTaskToReadyList+0x11c>)
 8001aba:	4613      	mov	r3, r2
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	4413      	add	r3, r2
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	4403      	add	r3, r0
 8001ac4:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8001ac6:	f000 fc95 	bl	80023f4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8001aca:	4b0d      	ldr	r3, [pc, #52]	; (8001b00 <prvAddNewTaskToReadyList+0x110>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d00e      	beq.n	8001af0 <prvAddNewTaskToReadyList+0x100>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001ad2:	4b0a      	ldr	r3, [pc, #40]	; (8001afc <prvAddNewTaskToReadyList+0x10c>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d207      	bcs.n	8001af0 <prvAddNewTaskToReadyList+0x100>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8001ae0:	4b0b      	ldr	r3, [pc, #44]	; (8001b10 <prvAddNewTaskToReadyList+0x120>)
 8001ae2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	f3bf 8f4f 	dsb	sy
 8001aec:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001af0:	bf00      	nop
 8001af2:	3710      	adds	r7, #16
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	20000154 	.word	0x20000154
 8001afc:	2000007c 	.word	0x2000007c
 8001b00:	20000160 	.word	0x20000160
 8001b04:	20000170 	.word	0x20000170
 8001b08:	2000015c 	.word	0x2000015c
 8001b0c:	20000080 	.word	0x20000080
 8001b10:	e000ed04 	.word	0xe000ed04

08001b14 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b086      	sub	sp, #24
 8001b18:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8001b1a:	4b1d      	ldr	r3, [pc, #116]	; (8001b90 <vTaskStartScheduler+0x7c>)
 8001b1c:	9301      	str	r3, [sp, #4]
 8001b1e:	2300      	movs	r3, #0
 8001b20:	9300      	str	r3, [sp, #0]
 8001b22:	2300      	movs	r3, #0
 8001b24:	2280      	movs	r2, #128	; 0x80
 8001b26:	491b      	ldr	r1, [pc, #108]	; (8001b94 <vTaskStartScheduler+0x80>)
 8001b28:	481b      	ldr	r0, [pc, #108]	; (8001b98 <vTaskStartScheduler+0x84>)
 8001b2a:	f7ff fe97 	bl	800185c <xTaskCreate>
 8001b2e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d116      	bne.n	8001b64 <vTaskStartScheduler+0x50>
        __asm volatile
 8001b36:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001b3a:	f383 8811 	msr	BASEPRI, r3
 8001b3e:	f3bf 8f6f 	isb	sy
 8001b42:	f3bf 8f4f 	dsb	sy
 8001b46:	60bb      	str	r3, [r7, #8]
    }
 8001b48:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8001b4a:	4b14      	ldr	r3, [pc, #80]	; (8001b9c <vTaskStartScheduler+0x88>)
 8001b4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b50:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8001b52:	4b13      	ldr	r3, [pc, #76]	; (8001ba0 <vTaskStartScheduler+0x8c>)
 8001b54:	2201      	movs	r2, #1
 8001b56:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001b58:	4b12      	ldr	r3, [pc, #72]	; (8001ba4 <vTaskStartScheduler+0x90>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8001b5e:	f000 fbb9 	bl	80022d4 <xPortStartScheduler>
 8001b62:	e00e      	b.n	8001b82 <vTaskStartScheduler+0x6e>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b6a:	d10a      	bne.n	8001b82 <vTaskStartScheduler+0x6e>
        __asm volatile
 8001b6c:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001b70:	f383 8811 	msr	BASEPRI, r3
 8001b74:	f3bf 8f6f 	isb	sy
 8001b78:	f3bf 8f4f 	dsb	sy
 8001b7c:	607b      	str	r3, [r7, #4]
    }
 8001b7e:	bf00      	nop
 8001b80:	e7fe      	b.n	8001b80 <vTaskStartScheduler+0x6c>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8001b82:	4b09      	ldr	r3, [pc, #36]	; (8001ba8 <vTaskStartScheduler+0x94>)
 8001b84:	681b      	ldr	r3, [r3, #0]
}
 8001b86:	bf00      	nop
 8001b88:	3710      	adds	r7, #16
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	20000178 	.word	0x20000178
 8001b94:	08002894 	.word	0x08002894
 8001b98:	080020a1 	.word	0x080020a1
 8001b9c:	20000174 	.word	0x20000174
 8001ba0:	20000160 	.word	0x20000160
 8001ba4:	20000158 	.word	0x20000158
 8001ba8:	2000000c 	.word	0x2000000c

08001bac <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8001bb0:	4b04      	ldr	r3, [pc, #16]	; (8001bc4 <vTaskSuspendAll+0x18>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	4a03      	ldr	r2, [pc, #12]	; (8001bc4 <vTaskSuspendAll+0x18>)
 8001bb8:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8001bba:	bf00      	nop
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bc80      	pop	{r7}
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	2000017c 	.word	0x2000017c

08001bc8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b088      	sub	sp, #32
 8001bcc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8001bd6:	4b71      	ldr	r3, [pc, #452]	; (8001d9c <xTaskResumeAll+0x1d4>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d10a      	bne.n	8001bf4 <xTaskResumeAll+0x2c>
        __asm volatile
 8001bde:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001be2:	f383 8811 	msr	BASEPRI, r3
 8001be6:	f3bf 8f6f 	isb	sy
 8001bea:	f3bf 8f4f 	dsb	sy
 8001bee:	607b      	str	r3, [r7, #4]
    }
 8001bf0:	bf00      	nop
 8001bf2:	e7fe      	b.n	8001bf2 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8001bf4:	f000 fbce 	bl	8002394 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8001bf8:	4b68      	ldr	r3, [pc, #416]	; (8001d9c <xTaskResumeAll+0x1d4>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	3b01      	subs	r3, #1
 8001bfe:	4a67      	ldr	r2, [pc, #412]	; (8001d9c <xTaskResumeAll+0x1d4>)
 8001c00:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001c02:	4b66      	ldr	r3, [pc, #408]	; (8001d9c <xTaskResumeAll+0x1d4>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	f040 80c0 	bne.w	8001d8c <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001c0c:	4b64      	ldr	r3, [pc, #400]	; (8001da0 <xTaskResumeAll+0x1d8>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	f000 80bb 	beq.w	8001d8c <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001c16:	e08a      	b.n	8001d2e <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001c18:	4b62      	ldr	r3, [pc, #392]	; (8001da4 <xTaskResumeAll+0x1dc>)
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c24:	613b      	str	r3, [r7, #16]
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	69db      	ldr	r3, [r3, #28]
 8001c2a:	69fa      	ldr	r2, [r7, #28]
 8001c2c:	6a12      	ldr	r2, [r2, #32]
 8001c2e:	609a      	str	r2, [r3, #8]
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	6a1b      	ldr	r3, [r3, #32]
 8001c34:	69fa      	ldr	r2, [r7, #28]
 8001c36:	69d2      	ldr	r2, [r2, #28]
 8001c38:	605a      	str	r2, [r3, #4]
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	685a      	ldr	r2, [r3, #4]
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	3318      	adds	r3, #24
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d103      	bne.n	8001c4e <xTaskResumeAll+0x86>
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	6a1a      	ldr	r2, [r3, #32]
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	605a      	str	r2, [r3, #4]
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	2200      	movs	r2, #0
 8001c52:	629a      	str	r2, [r3, #40]	; 0x28
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	1e5a      	subs	r2, r3, #1
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	695b      	ldr	r3, [r3, #20]
 8001c62:	60fb      	str	r3, [r7, #12]
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	69fa      	ldr	r2, [r7, #28]
 8001c6a:	68d2      	ldr	r2, [r2, #12]
 8001c6c:	609a      	str	r2, [r3, #8]
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	69fa      	ldr	r2, [r7, #28]
 8001c74:	6892      	ldr	r2, [r2, #8]
 8001c76:	605a      	str	r2, [r3, #4]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	685a      	ldr	r2, [r3, #4]
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	3304      	adds	r3, #4
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d103      	bne.n	8001c8c <xTaskResumeAll+0xc4>
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	68da      	ldr	r2, [r3, #12]
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	605a      	str	r2, [r3, #4]
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	615a      	str	r2, [r3, #20]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	1e5a      	subs	r2, r3, #1
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	409a      	lsls	r2, r3
 8001ca4:	4b40      	ldr	r3, [pc, #256]	; (8001da8 <xTaskResumeAll+0x1e0>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	4a3f      	ldr	r2, [pc, #252]	; (8001da8 <xTaskResumeAll+0x1e0>)
 8001cac:	6013      	str	r3, [r2, #0]
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cb2:	493e      	ldr	r1, [pc, #248]	; (8001dac <xTaskResumeAll+0x1e4>)
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	4413      	add	r3, r2
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	440b      	add	r3, r1
 8001cbe:	3304      	adds	r3, #4
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	60bb      	str	r3, [r7, #8]
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	68ba      	ldr	r2, [r7, #8]
 8001cc8:	609a      	str	r2, [r3, #8]
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	689a      	ldr	r2, [r3, #8]
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	60da      	str	r2, [r3, #12]
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	69fa      	ldr	r2, [r7, #28]
 8001cd8:	3204      	adds	r2, #4
 8001cda:	605a      	str	r2, [r3, #4]
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	1d1a      	adds	r2, r3, #4
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	609a      	str	r2, [r3, #8]
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ce8:	4613      	mov	r3, r2
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	4413      	add	r3, r2
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	4a2e      	ldr	r2, [pc, #184]	; (8001dac <xTaskResumeAll+0x1e4>)
 8001cf2:	441a      	add	r2, r3
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	615a      	str	r2, [r3, #20]
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cfc:	492b      	ldr	r1, [pc, #172]	; (8001dac <xTaskResumeAll+0x1e4>)
 8001cfe:	4613      	mov	r3, r2
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	4413      	add	r3, r2
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	440b      	add	r3, r1
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	1c59      	adds	r1, r3, #1
 8001d0c:	4827      	ldr	r0, [pc, #156]	; (8001dac <xTaskResumeAll+0x1e4>)
 8001d0e:	4613      	mov	r3, r2
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	4413      	add	r3, r2
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	4403      	add	r3, r0
 8001d18:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d1e:	4b24      	ldr	r3, [pc, #144]	; (8001db0 <xTaskResumeAll+0x1e8>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d302      	bcc.n	8001d2e <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8001d28:	4b22      	ldr	r3, [pc, #136]	; (8001db4 <xTaskResumeAll+0x1ec>)
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001d2e:	4b1d      	ldr	r3, [pc, #116]	; (8001da4 <xTaskResumeAll+0x1dc>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	f47f af70 	bne.w	8001c18 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8001d3e:	f000 fa45 	bl	80021cc <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001d42:	4b1d      	ldr	r3, [pc, #116]	; (8001db8 <xTaskResumeAll+0x1f0>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d010      	beq.n	8001d70 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001d4e:	f000 f837 	bl	8001dc0 <xTaskIncrementTick>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d002      	beq.n	8001d5e <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8001d58:	4b16      	ldr	r3, [pc, #88]	; (8001db4 <xTaskResumeAll+0x1ec>)
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	3b01      	subs	r3, #1
 8001d62:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d1f1      	bne.n	8001d4e <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 8001d6a:	4b13      	ldr	r3, [pc, #76]	; (8001db8 <xTaskResumeAll+0x1f0>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8001d70:	4b10      	ldr	r3, [pc, #64]	; (8001db4 <xTaskResumeAll+0x1ec>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d009      	beq.n	8001d8c <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8001d7c:	4b0f      	ldr	r3, [pc, #60]	; (8001dbc <xTaskResumeAll+0x1f4>)
 8001d7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	f3bf 8f4f 	dsb	sy
 8001d88:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8001d8c:	f000 fb32 	bl	80023f4 <vPortExitCritical>

    return xAlreadyYielded;
 8001d90:	69bb      	ldr	r3, [r7, #24]
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3720      	adds	r7, #32
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	2000017c 	.word	0x2000017c
 8001da0:	20000154 	.word	0x20000154
 8001da4:	20000114 	.word	0x20000114
 8001da8:	2000015c 	.word	0x2000015c
 8001dac:	20000080 	.word	0x20000080
 8001db0:	2000007c 	.word	0x2000007c
 8001db4:	20000168 	.word	0x20000168
 8001db8:	20000164 	.word	0x20000164
 8001dbc:	e000ed04 	.word	0xe000ed04

08001dc0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b08a      	sub	sp, #40	; 0x28
 8001dc4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001dca:	4b7d      	ldr	r3, [pc, #500]	; (8001fc0 <xTaskIncrementTick+0x200>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	f040 80ec 	bne.w	8001fac <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001dd4:	4b7b      	ldr	r3, [pc, #492]	; (8001fc4 <xTaskIncrementTick+0x204>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	3301      	adds	r3, #1
 8001dda:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001ddc:	4a79      	ldr	r2, [pc, #484]	; (8001fc4 <xTaskIncrementTick+0x204>)
 8001dde:	6a3b      	ldr	r3, [r7, #32]
 8001de0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001de2:	6a3b      	ldr	r3, [r7, #32]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d120      	bne.n	8001e2a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8001de8:	4b77      	ldr	r3, [pc, #476]	; (8001fc8 <xTaskIncrementTick+0x208>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d00a      	beq.n	8001e08 <xTaskIncrementTick+0x48>
        __asm volatile
 8001df2:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001df6:	f383 8811 	msr	BASEPRI, r3
 8001dfa:	f3bf 8f6f 	isb	sy
 8001dfe:	f3bf 8f4f 	dsb	sy
 8001e02:	607b      	str	r3, [r7, #4]
    }
 8001e04:	bf00      	nop
 8001e06:	e7fe      	b.n	8001e06 <xTaskIncrementTick+0x46>
 8001e08:	4b6f      	ldr	r3, [pc, #444]	; (8001fc8 <xTaskIncrementTick+0x208>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	61fb      	str	r3, [r7, #28]
 8001e0e:	4b6f      	ldr	r3, [pc, #444]	; (8001fcc <xTaskIncrementTick+0x20c>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a6d      	ldr	r2, [pc, #436]	; (8001fc8 <xTaskIncrementTick+0x208>)
 8001e14:	6013      	str	r3, [r2, #0]
 8001e16:	4a6d      	ldr	r2, [pc, #436]	; (8001fcc <xTaskIncrementTick+0x20c>)
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	6013      	str	r3, [r2, #0]
 8001e1c:	4b6c      	ldr	r3, [pc, #432]	; (8001fd0 <xTaskIncrementTick+0x210>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	3301      	adds	r3, #1
 8001e22:	4a6b      	ldr	r2, [pc, #428]	; (8001fd0 <xTaskIncrementTick+0x210>)
 8001e24:	6013      	str	r3, [r2, #0]
 8001e26:	f000 f9d1 	bl	80021cc <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001e2a:	4b6a      	ldr	r3, [pc, #424]	; (8001fd4 <xTaskIncrementTick+0x214>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	6a3a      	ldr	r2, [r7, #32]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	f0c0 80a6 	bcc.w	8001f82 <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001e36:	4b64      	ldr	r3, [pc, #400]	; (8001fc8 <xTaskIncrementTick+0x208>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d104      	bne.n	8001e4a <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001e40:	4b64      	ldr	r3, [pc, #400]	; (8001fd4 <xTaskIncrementTick+0x214>)
 8001e42:	f04f 32ff 	mov.w	r2, #4294967295
 8001e46:	601a      	str	r2, [r3, #0]
                    break;
 8001e48:	e09b      	b.n	8001f82 <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001e4a:	4b5f      	ldr	r3, [pc, #380]	; (8001fc8 <xTaskIncrementTick+0x208>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8001e5a:	6a3a      	ldr	r2, [r7, #32]
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d203      	bcs.n	8001e6a <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001e62:	4a5c      	ldr	r2, [pc, #368]	; (8001fd4 <xTaskIncrementTick+0x214>)
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8001e68:	e08b      	b.n	8001f82 <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	695b      	ldr	r3, [r3, #20]
 8001e6e:	613b      	str	r3, [r7, #16]
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	68d2      	ldr	r2, [r2, #12]
 8001e78:	609a      	str	r2, [r3, #8]
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	6892      	ldr	r2, [r2, #8]
 8001e82:	605a      	str	r2, [r3, #4]
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	685a      	ldr	r2, [r3, #4]
 8001e88:	69bb      	ldr	r3, [r7, #24]
 8001e8a:	3304      	adds	r3, #4
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d103      	bne.n	8001e98 <xTaskIncrementTick+0xd8>
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	68da      	ldr	r2, [r3, #12]
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	605a      	str	r2, [r3, #4]
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	615a      	str	r2, [r3, #20]
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	1e5a      	subs	r2, r3, #1
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d01e      	beq.n	8001eee <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb4:	60fb      	str	r3, [r7, #12]
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	69db      	ldr	r3, [r3, #28]
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	6a12      	ldr	r2, [r2, #32]
 8001ebe:	609a      	str	r2, [r3, #8]
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	6a1b      	ldr	r3, [r3, #32]
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	69d2      	ldr	r2, [r2, #28]
 8001ec8:	605a      	str	r2, [r3, #4]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	685a      	ldr	r2, [r3, #4]
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	3318      	adds	r3, #24
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d103      	bne.n	8001ede <xTaskIncrementTick+0x11e>
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	6a1a      	ldr	r2, [r3, #32]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	605a      	str	r2, [r3, #4]
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	629a      	str	r2, [r3, #40]	; 0x28
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	1e5a      	subs	r2, r3, #1
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	409a      	lsls	r2, r3
 8001ef6:	4b38      	ldr	r3, [pc, #224]	; (8001fd8 <xTaskIncrementTick+0x218>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	4a36      	ldr	r2, [pc, #216]	; (8001fd8 <xTaskIncrementTick+0x218>)
 8001efe:	6013      	str	r3, [r2, #0]
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f04:	4935      	ldr	r1, [pc, #212]	; (8001fdc <xTaskIncrementTick+0x21c>)
 8001f06:	4613      	mov	r3, r2
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	4413      	add	r3, r2
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	440b      	add	r3, r1
 8001f10:	3304      	adds	r3, #4
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	60bb      	str	r3, [r7, #8]
 8001f16:	69bb      	ldr	r3, [r7, #24]
 8001f18:	68ba      	ldr	r2, [r7, #8]
 8001f1a:	609a      	str	r2, [r3, #8]
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	689a      	ldr	r2, [r3, #8]
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	60da      	str	r2, [r3, #12]
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	3204      	adds	r2, #4
 8001f2c:	605a      	str	r2, [r3, #4]
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	1d1a      	adds	r2, r3, #4
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	609a      	str	r2, [r3, #8]
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	4413      	add	r3, r2
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	4a26      	ldr	r2, [pc, #152]	; (8001fdc <xTaskIncrementTick+0x21c>)
 8001f44:	441a      	add	r2, r3
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	615a      	str	r2, [r3, #20]
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f4e:	4923      	ldr	r1, [pc, #140]	; (8001fdc <xTaskIncrementTick+0x21c>)
 8001f50:	4613      	mov	r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	4413      	add	r3, r2
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	440b      	add	r3, r1
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	1c59      	adds	r1, r3, #1
 8001f5e:	481f      	ldr	r0, [pc, #124]	; (8001fdc <xTaskIncrementTick+0x21c>)
 8001f60:	4613      	mov	r3, r2
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	4413      	add	r3, r2
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	4403      	add	r3, r0
 8001f6a:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f70:	4b1b      	ldr	r3, [pc, #108]	; (8001fe0 <xTaskIncrementTick+0x220>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f76:	429a      	cmp	r2, r3
 8001f78:	f67f af5d 	bls.w	8001e36 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001f80:	e759      	b.n	8001e36 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001f82:	4b17      	ldr	r3, [pc, #92]	; (8001fe0 <xTaskIncrementTick+0x220>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f88:	4914      	ldr	r1, [pc, #80]	; (8001fdc <xTaskIncrementTick+0x21c>)
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	4413      	add	r3, r2
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	440b      	add	r3, r1
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d901      	bls.n	8001f9e <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8001f9e:	4b11      	ldr	r3, [pc, #68]	; (8001fe4 <xTaskIncrementTick+0x224>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d007      	beq.n	8001fb6 <xTaskIncrementTick+0x1f6>
            {
                xSwitchRequired = pdTRUE;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	627b      	str	r3, [r7, #36]	; 0x24
 8001faa:	e004      	b.n	8001fb6 <xTaskIncrementTick+0x1f6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8001fac:	4b0e      	ldr	r3, [pc, #56]	; (8001fe8 <xTaskIncrementTick+0x228>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	4a0d      	ldr	r2, [pc, #52]	; (8001fe8 <xTaskIncrementTick+0x228>)
 8001fb4:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8001fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3728      	adds	r7, #40	; 0x28
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	2000017c 	.word	0x2000017c
 8001fc4:	20000158 	.word	0x20000158
 8001fc8:	2000010c 	.word	0x2000010c
 8001fcc:	20000110 	.word	0x20000110
 8001fd0:	2000016c 	.word	0x2000016c
 8001fd4:	20000174 	.word	0x20000174
 8001fd8:	2000015c 	.word	0x2000015c
 8001fdc:	20000080 	.word	0x20000080
 8001fe0:	2000007c 	.word	0x2000007c
 8001fe4:	20000168 	.word	0x20000168
 8001fe8:	20000164 	.word	0x20000164

08001fec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001fec:	b480      	push	{r7}
 8001fee:	b087      	sub	sp, #28
 8001ff0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001ff2:	4b26      	ldr	r3, [pc, #152]	; (800208c <vTaskSwitchContext+0xa0>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d003      	beq.n	8002002 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8001ffa:	4b25      	ldr	r3, [pc, #148]	; (8002090 <vTaskSwitchContext+0xa4>)
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8002000:	e03f      	b.n	8002082 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8002002:	4b23      	ldr	r3, [pc, #140]	; (8002090 <vTaskSwitchContext+0xa4>)
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002008:	4b22      	ldr	r3, [pc, #136]	; (8002094 <vTaskSwitchContext+0xa8>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	fab3 f383 	clz	r3, r3
 8002014:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002016:	7afb      	ldrb	r3, [r7, #11]
 8002018:	f1c3 031f 	rsb	r3, r3, #31
 800201c:	617b      	str	r3, [r7, #20]
 800201e:	491e      	ldr	r1, [pc, #120]	; (8002098 <vTaskSwitchContext+0xac>)
 8002020:	697a      	ldr	r2, [r7, #20]
 8002022:	4613      	mov	r3, r2
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	4413      	add	r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	440b      	add	r3, r1
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d10a      	bne.n	8002048 <vTaskSwitchContext+0x5c>
        __asm volatile
 8002032:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8002036:	f383 8811 	msr	BASEPRI, r3
 800203a:	f3bf 8f6f 	isb	sy
 800203e:	f3bf 8f4f 	dsb	sy
 8002042:	607b      	str	r3, [r7, #4]
    }
 8002044:	bf00      	nop
 8002046:	e7fe      	b.n	8002046 <vTaskSwitchContext+0x5a>
 8002048:	697a      	ldr	r2, [r7, #20]
 800204a:	4613      	mov	r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	4413      	add	r3, r2
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	4a11      	ldr	r2, [pc, #68]	; (8002098 <vTaskSwitchContext+0xac>)
 8002054:	4413      	add	r3, r2
 8002056:	613b      	str	r3, [r7, #16]
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	685a      	ldr	r2, [r3, #4]
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	605a      	str	r2, [r3, #4]
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	685a      	ldr	r2, [r3, #4]
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	3308      	adds	r3, #8
 800206a:	429a      	cmp	r2, r3
 800206c:	d104      	bne.n	8002078 <vTaskSwitchContext+0x8c>
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	685a      	ldr	r2, [r3, #4]
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	605a      	str	r2, [r3, #4]
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	4a07      	ldr	r2, [pc, #28]	; (800209c <vTaskSwitchContext+0xb0>)
 8002080:	6013      	str	r3, [r2, #0]
}
 8002082:	bf00      	nop
 8002084:	371c      	adds	r7, #28
 8002086:	46bd      	mov	sp, r7
 8002088:	bc80      	pop	{r7}
 800208a:	4770      	bx	lr
 800208c:	2000017c 	.word	0x2000017c
 8002090:	20000168 	.word	0x20000168
 8002094:	2000015c 	.word	0x2000015c
 8002098:	20000080 	.word	0x20000080
 800209c:	2000007c 	.word	0x2000007c

080020a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80020a8:	f000 f852 	bl	8002150 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80020ac:	4b06      	ldr	r3, [pc, #24]	; (80020c8 <prvIdleTask+0x28>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d9f9      	bls.n	80020a8 <prvIdleTask+0x8>
            {
                taskYIELD();
 80020b4:	4b05      	ldr	r3, [pc, #20]	; (80020cc <prvIdleTask+0x2c>)
 80020b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	f3bf 8f4f 	dsb	sy
 80020c0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80020c4:	e7f0      	b.n	80020a8 <prvIdleTask+0x8>
 80020c6:	bf00      	nop
 80020c8:	20000080 	.word	0x20000080
 80020cc:	e000ed04 	.word	0xe000ed04

080020d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80020d6:	2300      	movs	r3, #0
 80020d8:	607b      	str	r3, [r7, #4]
 80020da:	e00c      	b.n	80020f6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	4613      	mov	r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	4413      	add	r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	4a12      	ldr	r2, [pc, #72]	; (8002130 <prvInitialiseTaskLists+0x60>)
 80020e8:	4413      	add	r3, r2
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7ff fb62 	bl	80017b4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	3301      	adds	r3, #1
 80020f4:	607b      	str	r3, [r7, #4]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2b04      	cmp	r3, #4
 80020fa:	d9ef      	bls.n	80020dc <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80020fc:	480d      	ldr	r0, [pc, #52]	; (8002134 <prvInitialiseTaskLists+0x64>)
 80020fe:	f7ff fb59 	bl	80017b4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002102:	480d      	ldr	r0, [pc, #52]	; (8002138 <prvInitialiseTaskLists+0x68>)
 8002104:	f7ff fb56 	bl	80017b4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002108:	480c      	ldr	r0, [pc, #48]	; (800213c <prvInitialiseTaskLists+0x6c>)
 800210a:	f7ff fb53 	bl	80017b4 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800210e:	480c      	ldr	r0, [pc, #48]	; (8002140 <prvInitialiseTaskLists+0x70>)
 8002110:	f7ff fb50 	bl	80017b4 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8002114:	480b      	ldr	r0, [pc, #44]	; (8002144 <prvInitialiseTaskLists+0x74>)
 8002116:	f7ff fb4d 	bl	80017b4 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800211a:	4b0b      	ldr	r3, [pc, #44]	; (8002148 <prvInitialiseTaskLists+0x78>)
 800211c:	4a05      	ldr	r2, [pc, #20]	; (8002134 <prvInitialiseTaskLists+0x64>)
 800211e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002120:	4b0a      	ldr	r3, [pc, #40]	; (800214c <prvInitialiseTaskLists+0x7c>)
 8002122:	4a05      	ldr	r2, [pc, #20]	; (8002138 <prvInitialiseTaskLists+0x68>)
 8002124:	601a      	str	r2, [r3, #0]
}
 8002126:	bf00      	nop
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	20000080 	.word	0x20000080
 8002134:	200000e4 	.word	0x200000e4
 8002138:	200000f8 	.word	0x200000f8
 800213c:	20000114 	.word	0x20000114
 8002140:	20000128 	.word	0x20000128
 8002144:	20000140 	.word	0x20000140
 8002148:	2000010c 	.word	0x2000010c
 800214c:	20000110 	.word	0x20000110

08002150 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002156:	e019      	b.n	800218c <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8002158:	f000 f91c 	bl	8002394 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800215c:	4b10      	ldr	r3, [pc, #64]	; (80021a0 <prvCheckTasksWaitingTermination+0x50>)
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	3304      	adds	r3, #4
 8002168:	4618      	mov	r0, r3
 800216a:	f7ff fb4e 	bl	800180a <uxListRemove>
                --uxCurrentNumberOfTasks;
 800216e:	4b0d      	ldr	r3, [pc, #52]	; (80021a4 <prvCheckTasksWaitingTermination+0x54>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	3b01      	subs	r3, #1
 8002174:	4a0b      	ldr	r2, [pc, #44]	; (80021a4 <prvCheckTasksWaitingTermination+0x54>)
 8002176:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8002178:	4b0b      	ldr	r3, [pc, #44]	; (80021a8 <prvCheckTasksWaitingTermination+0x58>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	3b01      	subs	r3, #1
 800217e:	4a0a      	ldr	r2, [pc, #40]	; (80021a8 <prvCheckTasksWaitingTermination+0x58>)
 8002180:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8002182:	f000 f937 	bl	80023f4 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f000 f810 	bl	80021ac <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800218c:	4b06      	ldr	r3, [pc, #24]	; (80021a8 <prvCheckTasksWaitingTermination+0x58>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d1e1      	bne.n	8002158 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8002194:	bf00      	nop
 8002196:	bf00      	nop
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	20000128 	.word	0x20000128
 80021a4:	20000154 	.word	0x20000154
 80021a8:	2000013c 	.word	0x2000013c

080021ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b8:	4618      	mov	r0, r3
 80021ba:	f000 fa17 	bl	80025ec <vPortFree>
            vPortFree( pxTCB );
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f000 fa14 	bl	80025ec <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80021c4:	bf00      	nop
 80021c6:	3708      	adds	r7, #8
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80021d0:	4b09      	ldr	r3, [pc, #36]	; (80021f8 <prvResetNextTaskUnblockTime+0x2c>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d104      	bne.n	80021e4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80021da:	4b08      	ldr	r3, [pc, #32]	; (80021fc <prvResetNextTaskUnblockTime+0x30>)
 80021dc:	f04f 32ff 	mov.w	r2, #4294967295
 80021e0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80021e2:	e005      	b.n	80021f0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80021e4:	4b04      	ldr	r3, [pc, #16]	; (80021f8 <prvResetNextTaskUnblockTime+0x2c>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a03      	ldr	r2, [pc, #12]	; (80021fc <prvResetNextTaskUnblockTime+0x30>)
 80021ee:	6013      	str	r3, [r2, #0]
}
 80021f0:	bf00      	nop
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bc80      	pop	{r7}
 80021f6:	4770      	bx	lr
 80021f8:	2000010c 	.word	0x2000010c
 80021fc:	20000174 	.word	0x20000174

08002200 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002200:	b480      	push	{r7}
 8002202:	b085      	sub	sp, #20
 8002204:	af00      	add	r7, sp, #0
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	60b9      	str	r1, [r7, #8]
 800220a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	3b04      	subs	r3, #4
 8002210:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002218:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	3b04      	subs	r3, #4
 800221e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	f023 0201 	bic.w	r2, r3, #1
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	3b04      	subs	r3, #4
 800222e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002230:	4a08      	ldr	r2, [pc, #32]	; (8002254 <pxPortInitialiseStack+0x54>)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	3b14      	subs	r3, #20
 800223a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	3b20      	subs	r3, #32
 8002246:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002248:	68fb      	ldr	r3, [r7, #12]
}
 800224a:	4618      	mov	r0, r3
 800224c:	3714      	adds	r7, #20
 800224e:	46bd      	mov	sp, r7
 8002250:	bc80      	pop	{r7}
 8002252:	4770      	bx	lr
 8002254:	08002259 	.word	0x08002259

08002258 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 800225e:	2300      	movs	r3, #0
 8002260:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002262:	4b12      	ldr	r3, [pc, #72]	; (80022ac <prvTaskExitError+0x54>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800226a:	d00a      	beq.n	8002282 <prvTaskExitError+0x2a>
        __asm volatile
 800226c:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8002270:	f383 8811 	msr	BASEPRI, r3
 8002274:	f3bf 8f6f 	isb	sy
 8002278:	f3bf 8f4f 	dsb	sy
 800227c:	60fb      	str	r3, [r7, #12]
    }
 800227e:	bf00      	nop
 8002280:	e7fe      	b.n	8002280 <prvTaskExitError+0x28>
        __asm volatile
 8002282:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8002286:	f383 8811 	msr	BASEPRI, r3
 800228a:	f3bf 8f6f 	isb	sy
 800228e:	f3bf 8f4f 	dsb	sy
 8002292:	60bb      	str	r3, [r7, #8]
    }
 8002294:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002296:	bf00      	nop
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d0fc      	beq.n	8002298 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800229e:	bf00      	nop
 80022a0:	bf00      	nop
 80022a2:	3714      	adds	r7, #20
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bc80      	pop	{r7}
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	20000010 	.word	0x20000010

080022b0 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 80022b0:	4806      	ldr	r0, [pc, #24]	; (80022cc <prvPortStartFirstTask+0x1c>)
 80022b2:	6800      	ldr	r0, [r0, #0]
 80022b4:	6800      	ldr	r0, [r0, #0]
 80022b6:	f380 8808 	msr	MSP, r0
 80022ba:	b662      	cpsie	i
 80022bc:	b661      	cpsie	f
 80022be:	f3bf 8f4f 	dsb	sy
 80022c2:	f3bf 8f6f 	isb	sy
 80022c6:	df00      	svc	0
 80022c8:	bf00      	nop
 80022ca:	0000      	.short	0x0000
 80022cc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80022d0:	bf00      	nop
 80022d2:	bf00      	nop

080022d4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80022da:	4b29      	ldr	r3, [pc, #164]	; (8002380 <xPortStartScheduler+0xac>)
 80022dc:	60fb      	str	r3, [r7, #12]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	60bb      	str	r3, [r7, #8]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	22ff      	movs	r2, #255	; 0xff
 80022ea:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80022f4:	79fb      	ldrb	r3, [r7, #7]
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80022fc:	b2da      	uxtb	r2, r3
 80022fe:	4b21      	ldr	r3, [pc, #132]	; (8002384 <xPortStartScheduler+0xb0>)
 8002300:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002302:	4b21      	ldr	r3, [pc, #132]	; (8002388 <xPortStartScheduler+0xb4>)
 8002304:	2207      	movs	r2, #7
 8002306:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002308:	e009      	b.n	800231e <xPortStartScheduler+0x4a>
        {
            ulMaxPRIGROUPValue--;
 800230a:	4b1f      	ldr	r3, [pc, #124]	; (8002388 <xPortStartScheduler+0xb4>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	3b01      	subs	r3, #1
 8002310:	4a1d      	ldr	r2, [pc, #116]	; (8002388 <xPortStartScheduler+0xb4>)
 8002312:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002314:	79fb      	ldrb	r3, [r7, #7]
 8002316:	b2db      	uxtb	r3, r3
 8002318:	005b      	lsls	r3, r3, #1
 800231a:	b2db      	uxtb	r3, r3
 800231c:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800231e:	79fb      	ldrb	r3, [r7, #7]
 8002320:	b2db      	uxtb	r3, r3
 8002322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002326:	2b80      	cmp	r3, #128	; 0x80
 8002328:	d0ef      	beq.n	800230a <xPortStartScheduler+0x36>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800232a:	4b17      	ldr	r3, [pc, #92]	; (8002388 <xPortStartScheduler+0xb4>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	021b      	lsls	r3, r3, #8
 8002330:	4a15      	ldr	r2, [pc, #84]	; (8002388 <xPortStartScheduler+0xb4>)
 8002332:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002334:	4b14      	ldr	r3, [pc, #80]	; (8002388 <xPortStartScheduler+0xb4>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800233c:	4a12      	ldr	r2, [pc, #72]	; (8002388 <xPortStartScheduler+0xb4>)
 800233e:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	b2da      	uxtb	r2, r3
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002348:	4b10      	ldr	r3, [pc, #64]	; (800238c <xPortStartScheduler+0xb8>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a0f      	ldr	r2, [pc, #60]	; (800238c <xPortStartScheduler+0xb8>)
 800234e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002352:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002354:	4b0d      	ldr	r3, [pc, #52]	; (800238c <xPortStartScheduler+0xb8>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a0c      	ldr	r2, [pc, #48]	; (800238c <xPortStartScheduler+0xb8>)
 800235a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800235e:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002360:	f000 f870 	bl	8002444 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002364:	4b0a      	ldr	r3, [pc, #40]	; (8002390 <xPortStartScheduler+0xbc>)
 8002366:	2200      	movs	r2, #0
 8002368:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800236a:	f7ff ffa1 	bl	80022b0 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800236e:	f7ff fe3d 	bl	8001fec <vTaskSwitchContext>
    prvTaskExitError();
 8002372:	f7ff ff71 	bl	8002258 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002376:	2300      	movs	r3, #0
}
 8002378:	4618      	mov	r0, r3
 800237a:	3710      	adds	r7, #16
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	e000e400 	.word	0xe000e400
 8002384:	20000180 	.word	0x20000180
 8002388:	20000184 	.word	0x20000184
 800238c:	e000ed20 	.word	0xe000ed20
 8002390:	20000010 	.word	0x20000010

08002394 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
        __asm volatile
 800239a:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 800239e:	f383 8811 	msr	BASEPRI, r3
 80023a2:	f3bf 8f6f 	isb	sy
 80023a6:	f3bf 8f4f 	dsb	sy
 80023aa:	607b      	str	r3, [r7, #4]
    }
 80023ac:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80023ae:	4b0f      	ldr	r3, [pc, #60]	; (80023ec <vPortEnterCritical+0x58>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	3301      	adds	r3, #1
 80023b4:	4a0d      	ldr	r2, [pc, #52]	; (80023ec <vPortEnterCritical+0x58>)
 80023b6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80023b8:	4b0c      	ldr	r3, [pc, #48]	; (80023ec <vPortEnterCritical+0x58>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d10f      	bne.n	80023e0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80023c0:	4b0b      	ldr	r3, [pc, #44]	; (80023f0 <vPortEnterCritical+0x5c>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d00a      	beq.n	80023e0 <vPortEnterCritical+0x4c>
        __asm volatile
 80023ca:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80023ce:	f383 8811 	msr	BASEPRI, r3
 80023d2:	f3bf 8f6f 	isb	sy
 80023d6:	f3bf 8f4f 	dsb	sy
 80023da:	603b      	str	r3, [r7, #0]
    }
 80023dc:	bf00      	nop
 80023de:	e7fe      	b.n	80023de <vPortEnterCritical+0x4a>
    }
}
 80023e0:	bf00      	nop
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bc80      	pop	{r7}
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	20000010 	.word	0x20000010
 80023f0:	e000ed04 	.word	0xe000ed04

080023f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80023fa:	4b11      	ldr	r3, [pc, #68]	; (8002440 <vPortExitCritical+0x4c>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d10a      	bne.n	8002418 <vPortExitCritical+0x24>
        __asm volatile
 8002402:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8002406:	f383 8811 	msr	BASEPRI, r3
 800240a:	f3bf 8f6f 	isb	sy
 800240e:	f3bf 8f4f 	dsb	sy
 8002412:	607b      	str	r3, [r7, #4]
    }
 8002414:	bf00      	nop
 8002416:	e7fe      	b.n	8002416 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8002418:	4b09      	ldr	r3, [pc, #36]	; (8002440 <vPortExitCritical+0x4c>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	3b01      	subs	r3, #1
 800241e:	4a08      	ldr	r2, [pc, #32]	; (8002440 <vPortExitCritical+0x4c>)
 8002420:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002422:	4b07      	ldr	r3, [pc, #28]	; (8002440 <vPortExitCritical+0x4c>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d105      	bne.n	8002436 <vPortExitCritical+0x42>
 800242a:	2300      	movs	r3, #0
 800242c:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002434:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002436:	bf00      	nop
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	bc80      	pop	{r7}
 800243e:	4770      	bx	lr
 8002440:	20000010 	.word	0x20000010

08002444 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002448:	4b08      	ldr	r3, [pc, #32]	; (800246c <vPortSetupTimerInterrupt+0x28>)
 800244a:	2200      	movs	r2, #0
 800244c:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800244e:	4b08      	ldr	r3, [pc, #32]	; (8002470 <vPortSetupTimerInterrupt+0x2c>)
 8002450:	2200      	movs	r2, #0
 8002452:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002454:	4b07      	ldr	r3, [pc, #28]	; (8002474 <vPortSetupTimerInterrupt+0x30>)
 8002456:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800245a:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800245c:	4b03      	ldr	r3, [pc, #12]	; (800246c <vPortSetupTimerInterrupt+0x28>)
 800245e:	2207      	movs	r2, #7
 8002460:	601a      	str	r2, [r3, #0]
}
 8002462:	bf00      	nop
 8002464:	46bd      	mov	sp, r7
 8002466:	bc80      	pop	{r7}
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	e000e010 	.word	0xe000e010
 8002470:	e000e018 	.word	0xe000e018
 8002474:	e000e014 	.word	0xe000e014

08002478 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b08a      	sub	sp, #40	; 0x28
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8002480:	2300      	movs	r3, #0
 8002482:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8002484:	f7ff fb92 	bl	8001bac <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002488:	4b53      	ldr	r3, [pc, #332]	; (80025d8 <pvPortMalloc+0x160>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d101      	bne.n	8002494 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002490:	f000 f908 	bl	80026a4 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d012      	beq.n	80024c0 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800249a:	2208      	movs	r2, #8
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f003 0307 	and.w	r3, r3, #7
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	3308      	adds	r3, #8
 80024a6:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	43db      	mvns	r3, r3
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d804      	bhi.n	80024bc <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	4413      	add	r3, r2
 80024b8:	607b      	str	r3, [r7, #4]
 80024ba:	e001      	b.n	80024c0 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80024bc:	2300      	movs	r3, #0
 80024be:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	db70      	blt.n	80025a8 <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d06d      	beq.n	80025a8 <pvPortMalloc+0x130>
 80024cc:	4b43      	ldr	r3, [pc, #268]	; (80025dc <pvPortMalloc+0x164>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d868      	bhi.n	80025a8 <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80024d6:	4b42      	ldr	r3, [pc, #264]	; (80025e0 <pvPortMalloc+0x168>)
 80024d8:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80024da:	4b41      	ldr	r3, [pc, #260]	; (80025e0 <pvPortMalloc+0x168>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80024e0:	e004      	b.n	80024ec <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80024e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e4:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80024e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80024ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d903      	bls.n	80024fe <pvPortMalloc+0x86>
 80024f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d1f1      	bne.n	80024e2 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80024fe:	4b36      	ldr	r3, [pc, #216]	; (80025d8 <pvPortMalloc+0x160>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002504:	429a      	cmp	r2, r3
 8002506:	d04f      	beq.n	80025a8 <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002508:	6a3b      	ldr	r3, [r7, #32]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2208      	movs	r2, #8
 800250e:	4413      	add	r3, r2
 8002510:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	6a3b      	ldr	r3, [r7, #32]
 8002518:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800251a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251c:	685a      	ldr	r2, [r3, #4]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	1ad2      	subs	r2, r2, r3
 8002522:	2308      	movs	r3, #8
 8002524:	005b      	lsls	r3, r3, #1
 8002526:	429a      	cmp	r2, r3
 8002528:	d91f      	bls.n	800256a <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800252a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	4413      	add	r3, r2
 8002530:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	f003 0307 	and.w	r3, r3, #7
 8002538:	2b00      	cmp	r3, #0
 800253a:	d00a      	beq.n	8002552 <pvPortMalloc+0xda>
        __asm volatile
 800253c:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8002540:	f383 8811 	msr	BASEPRI, r3
 8002544:	f3bf 8f6f 	isb	sy
 8002548:	f3bf 8f4f 	dsb	sy
 800254c:	613b      	str	r3, [r7, #16]
    }
 800254e:	bf00      	nop
 8002550:	e7fe      	b.n	8002550 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002554:	685a      	ldr	r2, [r3, #4]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	1ad2      	subs	r2, r2, r3
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800255e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002564:	6978      	ldr	r0, [r7, #20]
 8002566:	f000 f8f9 	bl	800275c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800256a:	4b1c      	ldr	r3, [pc, #112]	; (80025dc <pvPortMalloc+0x164>)
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	4a19      	ldr	r2, [pc, #100]	; (80025dc <pvPortMalloc+0x164>)
 8002576:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002578:	4b18      	ldr	r3, [pc, #96]	; (80025dc <pvPortMalloc+0x164>)
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	4b19      	ldr	r3, [pc, #100]	; (80025e4 <pvPortMalloc+0x16c>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	429a      	cmp	r2, r3
 8002582:	d203      	bcs.n	800258c <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002584:	4b15      	ldr	r3, [pc, #84]	; (80025dc <pvPortMalloc+0x164>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a16      	ldr	r2, [pc, #88]	; (80025e4 <pvPortMalloc+0x16c>)
 800258a:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800258c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002596:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8002598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259a:	2200      	movs	r2, #0
 800259c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800259e:	4b12      	ldr	r3, [pc, #72]	; (80025e8 <pvPortMalloc+0x170>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	3301      	adds	r3, #1
 80025a4:	4a10      	ldr	r2, [pc, #64]	; (80025e8 <pvPortMalloc+0x170>)
 80025a6:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80025a8:	f7ff fb0e 	bl	8001bc8 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	f003 0307 	and.w	r3, r3, #7
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d00a      	beq.n	80025cc <pvPortMalloc+0x154>
        __asm volatile
 80025b6:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80025ba:	f383 8811 	msr	BASEPRI, r3
 80025be:	f3bf 8f6f 	isb	sy
 80025c2:	f3bf 8f4f 	dsb	sy
 80025c6:	60fb      	str	r3, [r7, #12]
    }
 80025c8:	bf00      	nop
 80025ca:	e7fe      	b.n	80025ca <pvPortMalloc+0x152>
    return pvReturn;
 80025cc:	69fb      	ldr	r3, [r7, #28]
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3728      	adds	r7, #40	; 0x28
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	20004590 	.word	0x20004590
 80025dc:	20004594 	.word	0x20004594
 80025e0:	20004588 	.word	0x20004588
 80025e4:	20004598 	.word	0x20004598
 80025e8:	2000459c 	.word	0x2000459c

080025ec <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d049      	beq.n	8002692 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80025fe:	2308      	movs	r3, #8
 8002600:	425b      	negs	r3, r3
 8002602:	697a      	ldr	r2, [r7, #20]
 8002604:	4413      	add	r3, r2
 8002606:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	2b00      	cmp	r3, #0
 8002612:	db0a      	blt.n	800262a <vPortFree+0x3e>
        __asm volatile
 8002614:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8002618:	f383 8811 	msr	BASEPRI, r3
 800261c:	f3bf 8f6f 	isb	sy
 8002620:	f3bf 8f4f 	dsb	sy
 8002624:	60fb      	str	r3, [r7, #12]
    }
 8002626:	bf00      	nop
 8002628:	e7fe      	b.n	8002628 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d00a      	beq.n	8002648 <vPortFree+0x5c>
        __asm volatile
 8002632:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8002636:	f383 8811 	msr	BASEPRI, r3
 800263a:	f3bf 8f6f 	isb	sy
 800263e:	f3bf 8f4f 	dsb	sy
 8002642:	60bb      	str	r3, [r7, #8]
    }
 8002644:	bf00      	nop
 8002646:	e7fe      	b.n	8002646 <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	0fdb      	lsrs	r3, r3, #31
 800264e:	f003 0301 	and.w	r3, r3, #1
 8002652:	b2db      	uxtb	r3, r3
 8002654:	2b00      	cmp	r3, #0
 8002656:	d01c      	beq.n	8002692 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d118      	bne.n	8002692 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 800266c:	f7ff fa9e 	bl	8001bac <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	685a      	ldr	r2, [r3, #4]
 8002674:	4b09      	ldr	r3, [pc, #36]	; (800269c <vPortFree+0xb0>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4413      	add	r3, r2
 800267a:	4a08      	ldr	r2, [pc, #32]	; (800269c <vPortFree+0xb0>)
 800267c:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800267e:	6938      	ldr	r0, [r7, #16]
 8002680:	f000 f86c 	bl	800275c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8002684:	4b06      	ldr	r3, [pc, #24]	; (80026a0 <vPortFree+0xb4>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	3301      	adds	r3, #1
 800268a:	4a05      	ldr	r2, [pc, #20]	; (80026a0 <vPortFree+0xb4>)
 800268c:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800268e:	f7ff fa9b 	bl	8001bc8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8002692:	bf00      	nop
 8002694:	3718      	adds	r7, #24
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	20004594 	.word	0x20004594
 80026a0:	200045a0 	.word	0x200045a0

080026a4 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80026a4:	b480      	push	{r7}
 80026a6:	b085      	sub	sp, #20
 80026a8:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80026aa:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 80026ae:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80026b0:	4b25      	ldr	r3, [pc, #148]	; (8002748 <prvHeapInit+0xa4>)
 80026b2:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f003 0307 	and.w	r3, r3, #7
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d00c      	beq.n	80026d8 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	3307      	adds	r3, #7
 80026c2:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f023 0307 	bic.w	r3, r3, #7
 80026ca:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80026cc:	68ba      	ldr	r2, [r7, #8]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	4a1d      	ldr	r2, [pc, #116]	; (8002748 <prvHeapInit+0xa4>)
 80026d4:	4413      	add	r3, r2
 80026d6:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80026dc:	4a1b      	ldr	r2, [pc, #108]	; (800274c <prvHeapInit+0xa8>)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80026e2:	4b1a      	ldr	r3, [pc, #104]	; (800274c <prvHeapInit+0xa8>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	68ba      	ldr	r2, [r7, #8]
 80026ec:	4413      	add	r3, r2
 80026ee:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80026f0:	2208      	movs	r2, #8
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	1a9b      	subs	r3, r3, r2
 80026f6:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f023 0307 	bic.w	r3, r3, #7
 80026fe:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	4a13      	ldr	r2, [pc, #76]	; (8002750 <prvHeapInit+0xac>)
 8002704:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8002706:	4b12      	ldr	r3, [pc, #72]	; (8002750 <prvHeapInit+0xac>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2200      	movs	r2, #0
 800270c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800270e:	4b10      	ldr	r3, [pc, #64]	; (8002750 <prvHeapInit+0xac>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2200      	movs	r2, #0
 8002714:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	68fa      	ldr	r2, [r7, #12]
 800271e:	1ad2      	subs	r2, r2, r3
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002724:	4b0a      	ldr	r3, [pc, #40]	; (8002750 <prvHeapInit+0xac>)
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	4a08      	ldr	r2, [pc, #32]	; (8002754 <prvHeapInit+0xb0>)
 8002732:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	4a07      	ldr	r2, [pc, #28]	; (8002758 <prvHeapInit+0xb4>)
 800273a:	6013      	str	r3, [r2, #0]
}
 800273c:	bf00      	nop
 800273e:	3714      	adds	r7, #20
 8002740:	46bd      	mov	sp, r7
 8002742:	bc80      	pop	{r7}
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	20000188 	.word	0x20000188
 800274c:	20004588 	.word	0x20004588
 8002750:	20004590 	.word	0x20004590
 8002754:	20004598 	.word	0x20004598
 8002758:	20004594 	.word	0x20004594

0800275c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800275c:	b480      	push	{r7}
 800275e:	b085      	sub	sp, #20
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002764:	4b27      	ldr	r3, [pc, #156]	; (8002804 <prvInsertBlockIntoFreeList+0xa8>)
 8002766:	60fb      	str	r3, [r7, #12]
 8002768:	e002      	b.n	8002770 <prvInsertBlockIntoFreeList+0x14>
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	60fb      	str	r3, [r7, #12]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	429a      	cmp	r2, r3
 8002778:	d8f7      	bhi.n	800276a <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	68ba      	ldr	r2, [r7, #8]
 8002784:	4413      	add	r3, r2
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	429a      	cmp	r2, r3
 800278a:	d108      	bne.n	800279e <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	685a      	ldr	r2, [r3, #4]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	441a      	add	r2, r3
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	68ba      	ldr	r2, [r7, #8]
 80027a8:	441a      	add	r2, r3
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d118      	bne.n	80027e4 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	4b14      	ldr	r3, [pc, #80]	; (8002808 <prvInsertBlockIntoFreeList+0xac>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d00d      	beq.n	80027da <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685a      	ldr	r2, [r3, #4]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	441a      	add	r2, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	601a      	str	r2, [r3, #0]
 80027d8:	e008      	b.n	80027ec <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80027da:	4b0b      	ldr	r3, [pc, #44]	; (8002808 <prvInsertBlockIntoFreeList+0xac>)
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	601a      	str	r2, [r3, #0]
 80027e2:	e003      	b.n	80027ec <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80027ec:	68fa      	ldr	r2, [r7, #12]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d002      	beq.n	80027fa <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80027fa:	bf00      	nop
 80027fc:	3714      	adds	r7, #20
 80027fe:	46bd      	mov	sp, r7
 8002800:	bc80      	pop	{r7}
 8002802:	4770      	bx	lr
 8002804:	20004588 	.word	0x20004588
 8002808:	20004590 	.word	0x20004590

0800280c <memset>:
 800280c:	4603      	mov	r3, r0
 800280e:	4402      	add	r2, r0
 8002810:	4293      	cmp	r3, r2
 8002812:	d100      	bne.n	8002816 <memset+0xa>
 8002814:	4770      	bx	lr
 8002816:	f803 1b01 	strb.w	r1, [r3], #1
 800281a:	e7f9      	b.n	8002810 <memset+0x4>

0800281c <__libc_init_array>:
 800281c:	b570      	push	{r4, r5, r6, lr}
 800281e:	2600      	movs	r6, #0
 8002820:	4d0c      	ldr	r5, [pc, #48]	; (8002854 <__libc_init_array+0x38>)
 8002822:	4c0d      	ldr	r4, [pc, #52]	; (8002858 <__libc_init_array+0x3c>)
 8002824:	1b64      	subs	r4, r4, r5
 8002826:	10a4      	asrs	r4, r4, #2
 8002828:	42a6      	cmp	r6, r4
 800282a:	d109      	bne.n	8002840 <__libc_init_array+0x24>
 800282c:	f000 f81a 	bl	8002864 <_init>
 8002830:	2600      	movs	r6, #0
 8002832:	4d0a      	ldr	r5, [pc, #40]	; (800285c <__libc_init_array+0x40>)
 8002834:	4c0a      	ldr	r4, [pc, #40]	; (8002860 <__libc_init_array+0x44>)
 8002836:	1b64      	subs	r4, r4, r5
 8002838:	10a4      	asrs	r4, r4, #2
 800283a:	42a6      	cmp	r6, r4
 800283c:	d105      	bne.n	800284a <__libc_init_array+0x2e>
 800283e:	bd70      	pop	{r4, r5, r6, pc}
 8002840:	f855 3b04 	ldr.w	r3, [r5], #4
 8002844:	4798      	blx	r3
 8002846:	3601      	adds	r6, #1
 8002848:	e7ee      	b.n	8002828 <__libc_init_array+0xc>
 800284a:	f855 3b04 	ldr.w	r3, [r5], #4
 800284e:	4798      	blx	r3
 8002850:	3601      	adds	r6, #1
 8002852:	e7f2      	b.n	800283a <__libc_init_array+0x1e>
 8002854:	080028c8 	.word	0x080028c8
 8002858:	080028c8 	.word	0x080028c8
 800285c:	080028c8 	.word	0x080028c8
 8002860:	080028cc 	.word	0x080028cc

08002864 <_init>:
 8002864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002866:	bf00      	nop
 8002868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800286a:	bc08      	pop	{r3}
 800286c:	469e      	mov	lr, r3
 800286e:	4770      	bx	lr

08002870 <_fini>:
 8002870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002872:	bf00      	nop
 8002874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002876:	bc08      	pop	{r3}
 8002878:	469e      	mov	lr, r3
 800287a:	4770      	bx	lr
